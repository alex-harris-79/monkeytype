/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/styles/index.scss":
/*!*******************************!*\
  !*** ./src/styles/index.scss ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/scripts/account/all-time-stats.ts":
/*!***********************************************!*\
  !*** ./src/scripts/account/all-time-stats.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.update = exports.clear = void 0;
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
function clear() {
    $(".pageAccount .globalTimeTyping .val").text(`-`);
    $(".pageAccount .globalTestsStarted .val").text(`-`);
    $(".pageAccount .globalTestsCompleted .val").text(`-`);
}
exports.clear = clear;
function update() {
    var _a, _b;
    const snapshot = DB.getSnapshot();
    if (snapshot.globalStats !== undefined) {
        // let th = Math.floor(DB.getSnapshot().globalStats.time / 3600);
        // let tm = Math.floor((DB.getSnapshot().globalStats.time % 3600) / 60);
        // let ts = Math.floor((DB.getSnapshot().globalStats.time % 3600) % 60);
        const seconds = (_b = (_a = snapshot === null || snapshot === void 0 ? void 0 : snapshot.globalStats) === null || _a === void 0 ? void 0 : _a.time) !== null && _b !== void 0 ? _b : 0;
        let string = "";
        if (seconds === 0) {
            string = "-";
        }
        else {
            string = Misc.secondsToString(Math.round(seconds), true, true);
        }
        $(".pageAccount .globalTimeTyping .val").text(string);
    }
    if (snapshot.globalStats !== undefined) {
        $(".pageAccount .globalTestsStarted .val").text(snapshot.globalStats.started);
    }
    if (snapshot.globalStats !== undefined) {
        $(".pageAccount .globalTestsCompleted .val").text(snapshot.globalStats.completed);
    }
}
exports.update = update;


/***/ }),

/***/ "./src/scripts/account/mini-result-chart.ts":
/*!**************************************************!*\
  !*** ./src/scripts/account/mini-result-chart.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.updateData = exports.show = exports.updatePosition = void 0;
const ChartController = __importStar(__webpack_require__(/*! ../controllers/chart-controller */ "./src/scripts/controllers/chart-controller.ts"));
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const miniResultScaleOptions = ChartController.result.options.scales;
function updatePosition(x, y) {
    $(".pageAccount .miniResultChartWrapper").css({ top: y, left: x });
}
exports.updatePosition = updatePosition;
function show() {
    $(".pageAccount .miniResultChartWrapper").stop(true, true).fadeIn(125);
    $(".pageAccount .miniResultChartBg").stop(true, true).fadeIn(125);
}
exports.show = show;
function hide() {
    $(".pageAccount .miniResultChartWrapper").stop(true, true).fadeOut(125);
    $(".pageAccount .miniResultChartBg").stop(true, true).fadeOut(125);
}
function updateData(data) {
    // let data = filteredResults[filteredId].chartData;
    const labels = [];
    for (let i = 1; i <= data.wpm.length; i++) {
        labels.push(i.toString());
    }
    ChartController.miniResult.data.labels = labels;
    ChartController.miniResult.data.datasets[0].data = data.wpm;
    ChartController.miniResult.data.datasets[1].data = data.raw;
    ChartController.miniResult.data.datasets[2].data = data.err;
    const maxChartVal = Math.max(...[Math.max(...data.wpm), Math.max(...data.raw)]);
    const minChartVal = Math.min(...[Math.min(...data.wpm), Math.min(...data.raw)]);
    miniResultScaleOptions["wpm"].max = Math.round(maxChartVal);
    miniResultScaleOptions["raw"].max = Math.round(maxChartVal);
    if (!config_1.default.startGraphsAtZero) {
        miniResultScaleOptions["wpm"].min = Math.round(minChartVal);
        miniResultScaleOptions["raw"].min = Math.round(minChartVal);
    }
    else {
        miniResultScaleOptions["wpm"].min = 0;
        miniResultScaleOptions["raw"].min = 0;
    }
    ChartController.miniResult.updateColors();
}
exports.updateData = updateData;
$(document).on("click", ".pageAccount .miniResultChartBg", () => {
    hide();
});


/***/ }),

/***/ "./src/scripts/account/pb-tables.ts":
/*!******************************************!*\
  !*** ./src/scripts/account/pb-tables.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.update = void 0;
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const format_1 = __importDefault(__webpack_require__(/*! date-fns/format */ "./node_modules/date-fns/esm/format/index.js"));
function update() {
    $(".pageAccount .timePbTable tbody").html(`
  <tr>
    <td>15</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
  </tr>
  <tr>
    <td>30</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
  </tr>
  <tr>
    <td>60</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
  </tr>
  <tr>
    <td>120</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
  </tr>
  `);
    $(".pageAccount .wordsPbTable tbody").html(`
  <tr>
    <td>10</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
  </tr>
  <tr>
    <td>25</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
  </tr>
  <tr>
    <td>50</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
  </tr>
  <tr>
    <td>100</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
  </tr>
  `);
    if (config_1.default.alwaysShowCPM) {
        $(".pageAccount .timePbTable thead tr td:nth-child(2), .pageAccount .wordsPbTable thead tr td:nth-child(2)").html('cpm<br><span class="sub">accuracy</span>');
    }
    else {
        $(".pageAccount .timePbTable thead tr td:nth-child(2), .pageAccount .wordsPbTable thead tr td:nth-child(2)").html('wpm<br><span class="sub">accuracy</span>');
    }
    const pb = DB.getSnapshot().personalBests;
    if (pb === undefined)
        return;
    let pbData;
    let text;
    let dateText = `-<br><span class="sub">-</span>`;
    const multiplier = config_1.default.alwaysShowCPM ? 5 : 1;
    text = "";
    try {
        pbData = pb.time[15].sort((a, b) => b.wpm - a.wpm)[0];
        dateText = `-<br><span class="sub">-</span>`;
        const date = new Date(pbData.timestamp);
        if (pbData.timestamp) {
            dateText =
                (0, format_1.default)(date, "dd MMM yyyy") +
                    "<br><div class='sub'>" +
                    (0, format_1.default)(date, "HH:mm") +
                    "</div>";
        }
        text += `<tr>
      <td>15</td>
      <td>${Misc.roundTo2(pbData.wpm * multiplier)}<br><span class="sub">${pbData.acc === undefined ? "-" : pbData.acc + "%"}</span></td>
      <td>${Misc.roundTo2(pbData.raw * multiplier)}<br><span class="sub">${pbData.consistency === undefined ? "-" : pbData.consistency + "%"}</span></td>
      <td>${dateText}</td>
    </tr>`;
    }
    catch (e) {
        text += `<tr>
      <td>15</td>
      <td>-<br><span class="sub">-</span></td>
      <td>-<br><span class="sub">-</span></td>
      <td>-<br><span class="sub">-</span></td>
    </tr>`;
    }
    try {
        pbData = pb.time[30].sort((a, b) => b.wpm - a.wpm)[0];
        dateText = `-<br><span class="sub">-</span>`;
        const date = new Date(pbData.timestamp);
        if (pbData.timestamp) {
            dateText =
                (0, format_1.default)(date, "dd MMM yyyy") +
                    "<br><div class='sub'>" +
                    (0, format_1.default)(date, "HH:mm") +
                    "</div>";
        }
        text += `<tr>
    <td>30</td>
      <td>${Misc.roundTo2(pbData.wpm * multiplier)}<br><span class="sub">${pbData.acc === undefined ? "-" : pbData.acc + "%"}</span></td>
      <td>${Misc.roundTo2(pbData.raw * multiplier)}<br><span class="sub">${pbData.consistency === undefined ? "-" : pbData.consistency + "%"}</span></td>
      <td>${dateText}</td>
    </tr>`;
    }
    catch (e) {
        text += `<tr>
      <td>30</td>
      <td>-<br><span class="sub">-</span></td>
      <td>-<br><span class="sub">-</span></td>
      <td>-<br><span class="sub">-</span></td>
    </tr>`;
    }
    try {
        pbData = pb.time[60].sort((a, b) => b.wpm - a.wpm)[0];
        dateText = `-<br><span class="sub">-</span>`;
        const date = new Date(pbData.timestamp);
        if (pbData.timestamp) {
            dateText =
                (0, format_1.default)(date, "dd MMM yyyy") +
                    "<br><div class='sub'>" +
                    (0, format_1.default)(date, "HH:mm") +
                    "</div>";
        }
        text += `<tr>
      <td>60</td>
      <td>${Misc.roundTo2(pbData.wpm * multiplier)}<br><span class="sub">${pbData.acc === undefined ? "-" : pbData.acc + "%"}</span></td>
      <td>${Misc.roundTo2(pbData.raw * multiplier)}<br><span class="sub">${pbData.consistency === undefined ? "-" : pbData.consistency + "%"}</span></td>
      <td>${dateText}</td>
    </tr>`;
    }
    catch (e) {
        text += `<tr>
      <td>60</td>
      <td>-<br><span class="sub">-</span></td>
      <td>-<br><span class="sub">-</span></td>
      <td>-<br><span class="sub">-</span></td>
    </tr>`;
    }
    try {
        pbData = pb.time[120].sort((a, b) => b.wpm - a.wpm)[0];
        dateText = `-<br><span class="sub">-</span>`;
        const date = new Date(pbData.timestamp);
        if (pbData.timestamp) {
            dateText =
                (0, format_1.default)(date, "dd MMM yyyy") +
                    "<br><div class='sub'>" +
                    (0, format_1.default)(date, "HH:mm") +
                    "</div>";
        }
        text += `<tr>
      <td>120</td>
      <td>${Misc.roundTo2(pbData.wpm * multiplier)}<br><span class="sub">${pbData.acc === undefined ? "-" : pbData.acc + "%"}</span></td>
      <td>${Misc.roundTo2(pbData.raw * multiplier)}<br><span class="sub">${pbData.consistency === undefined ? "-" : pbData.consistency + "%"}</span></td>
      <td>${dateText}</td>
    </tr>`;
    }
    catch (e) {
        text += `<tr>
      <td>120</td>
      <td>-<br><span class="sub">-</span></td>
      <td>-<br><span class="sub">-</span></td>
      <td>-<br><span class="sub">-</span></td>
    </tr>`;
    }
    $(".pageAccount .timePbTable tbody").html(text);
    text = "";
    try {
        pbData = pb.words[10].sort((a, b) => b.wpm - a.wpm)[0];
        dateText = `-<br><span class="sub">-</span>`;
        const date = new Date(pbData.timestamp);
        if (pbData.timestamp) {
            dateText =
                (0, format_1.default)(date, "dd MMM yyyy") +
                    "<br><div class='sub'>" +
                    (0, format_1.default)(date, "HH:mm") +
                    "</div>";
        }
        text += `<tr>
      <td>10</td>
      <td>${Misc.roundTo2(pbData.wpm * multiplier)}<br><span class="sub">${pbData.acc === undefined ? "-" : pbData.acc + "%"}</span></td>
      <td>${Misc.roundTo2(pbData.raw * multiplier)}<br><span class="sub">${pbData.consistency === undefined ? "-" : pbData.consistency + "%"}</span></td>
      <td>${dateText}</td>
    </tr>`;
    }
    catch (e) {
        text += `<tr>
      <td>10</td>
      <td>-<br><span class="sub">-</span></td>
      <td>-<br><span class="sub">-</span></td>
      <td>-<br><span class="sub">-</span></td>
    </tr>`;
    }
    try {
        pbData = pb.words[25].sort((a, b) => b.wpm - a.wpm)[0];
        dateText = `-<br><span class="sub">-</span>`;
        const date = new Date(pbData.timestamp);
        if (pbData.timestamp) {
            dateText =
                (0, format_1.default)(date, "dd MMM yyyy") +
                    "<br><div class='sub'>" +
                    (0, format_1.default)(date, "HH:mm") +
                    "</div>";
        }
        text += `<tr>
      <td>25</td>
      <td>${Misc.roundTo2(pbData.wpm * multiplier)}<br><span class="sub">${pbData.acc === undefined ? "-" : pbData.acc + "%"}</span></td>
      <td>${Misc.roundTo2(pbData.raw * multiplier)}<br><span class="sub">${pbData.consistency === undefined ? "-" : pbData.consistency + "%"}</span></td>
      <td>${dateText}</td>
    </tr>`;
    }
    catch (e) {
        text += `<tr>
      <td>25</td>
      <td>-<br><span class="sub">-</span></td>
      <td>-<br><span class="sub">-</span></td>
      <td>-<br><span class="sub">-</span></td>
    </tr>`;
    }
    try {
        pbData = pb.words[50].sort((a, b) => b.wpm - a.wpm)[0];
        dateText = `-<br><span class="sub">-</span>`;
        const date = new Date(pbData.timestamp);
        if (pbData.timestamp) {
            dateText =
                (0, format_1.default)(date, "dd MMM yyyy") +
                    "<br><div class='sub'>" +
                    (0, format_1.default)(date, "HH:mm") +
                    "</div>";
        }
        text += `<tr>
      <td>50</td>
      <td>${Misc.roundTo2(pbData.wpm * multiplier)}<br><span class="sub">${pbData.acc === undefined ? "-" : pbData.acc + "%"}</span></td>
      <td>${Misc.roundTo2(pbData.raw * multiplier)}<br><span class="sub">${pbData.consistency === undefined ? "-" : pbData.consistency + "%"}</span></td>
      <td>${dateText}</td>
    </tr>`;
    }
    catch (e) {
        text += `<tr>
      <td>50</td>
      <td>-<br><span class="sub">-</span></td>
      <td>-<br><span class="sub">-</span></td>
      <td>-<br><span class="sub">-</span></td>
    </tr>`;
    }
    try {
        pbData = pb.words[100].sort((a, b) => b.wpm - a.wpm)[0];
        dateText = `-<br><span class="sub">-</span>`;
        const date = new Date(pbData.timestamp);
        if (pbData.timestamp) {
            dateText =
                (0, format_1.default)(date, "dd MMM yyyy") +
                    "<br><div class='sub'>" +
                    (0, format_1.default)(date, "HH:mm") +
                    "</div>";
        }
        text += `<tr>
      <td>100</td>
      <td>${Misc.roundTo2(pbData.wpm * multiplier)}<br><span class="sub">${pbData.acc === undefined ? "-" : pbData.acc + "%"}</span></td>
      <td>${Misc.roundTo2(pbData.raw * multiplier)}<br><span class="sub">${pbData.consistency === undefined ? "-" : pbData.consistency + "%"}</span></td>
      <td>${dateText}</td>
    </tr>`;
    }
    catch (e) {
        text += `<tr>
      <td>100</td>
      <td>-<br><span class="sub">-</span></td>
      <td>-<br><span class="sub">-</span></td>
      <td>-<br><span class="sub">-</span></td>
    </tr>`;
    }
    $(".pageAccount .wordsPbTable tbody").html(text);
}
exports.update = update;


/***/ }),

/***/ "./src/scripts/account/result-filters.ts":
/*!***********************************************!*\
  !*** ./src/scripts/account/result-filters.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.updateTags = exports.toggle = exports.updateActive = exports.reset = exports.loadTags = exports.getFilter = exports.getGroup = exports.getFilters = exports.load = exports.filters = exports.defaultResultFilters = void 0;
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
exports.defaultResultFilters = {
    difficulty: {
        normal: true,
        expert: true,
        master: true,
    },
    mode: {
        words: true,
        time: true,
        quote: true,
        zen: true,
        custom: true,
    },
    words: {
        10: true,
        25: true,
        50: true,
        100: true,
        custom: true,
    },
    time: {
        15: true,
        30: true,
        60: true,
        120: true,
        custom: true,
    },
    quoteLength: {
        short: true,
        medium: true,
        long: true,
        thicc: true,
    },
    punctuation: {
        on: true,
        off: true,
    },
    numbers: {
        on: true,
        off: true,
    },
    date: {
        last_day: false,
        last_week: false,
        last_month: false,
        last_3months: false,
        all: true,
    },
    tags: {
        none: true,
    },
    language: {},
    funbox: {
        none: true,
    },
};
exports.filters = exports.defaultResultFilters;
function save() {
    window.localStorage.setItem("resultFilters", JSON.stringify(exports.filters));
}
function load() {
    console.log("loading filters");
    try {
        const newResultFilters = window.localStorage.getItem("resultFilters");
        if (newResultFilters != undefined &&
            newResultFilters !== "" &&
            Object.keys(JSON.parse(newResultFilters)).length >=
                Object.keys(exports.defaultResultFilters).length) {
            exports.filters = JSON.parse(newResultFilters);
            // save();
        }
        else {
            exports.filters = exports.defaultResultFilters;
            // save();
        }
        const newTags = { none: false };
        Object.keys(exports.defaultResultFilters.tags).forEach((tag) => {
            if (exports.filters.tags[tag] !== undefined) {
                newTags[tag] = exports.filters.tags[tag];
            }
            else {
                newTags[tag] = true;
            }
        });
        exports.filters.tags = newTags;
        save();
    }
    catch (_a) {
        console.log("error in loading result filters");
        exports.filters = exports.defaultResultFilters;
        save();
    }
}
exports.load = load;
function getFilters() {
    return exports.filters;
}
exports.getFilters = getFilters;
function getGroup(group) {
    return exports.filters[group];
}
exports.getGroup = getGroup;
// export function setFilter(group, filter, value) {
//   filters[group][filter] = value;
// }
function getFilter(group, filter) {
    return exports.filters[group][filter];
}
exports.getFilter = getFilter;
// export function toggleFilter(group, filter) {
//   filters[group][filter] = !filters[group][filter];
// }
function loadTags(tags) {
    console.log("loading tags");
    tags.forEach((tag) => {
        exports.defaultResultFilters.tags[tag._id] = true;
    });
}
exports.loadTags = loadTags;
function reset() {
    exports.filters = exports.defaultResultFilters;
    save();
}
exports.reset = reset;
function updateActive() {
    var _a, _b, _c, _d;
    const aboveChartDisplay = {};
    Object.keys(getFilters()).forEach((group) => {
        aboveChartDisplay[group] = {
            all: true,
            array: [],
        };
        Object.keys(getGroup(group)).forEach((filter) => {
            var _a;
            const groupAboveChartDisplay = aboveChartDisplay[group];
            if (groupAboveChartDisplay === undefined)
                return;
            if (getFilter(group, filter)) {
                (_a = groupAboveChartDisplay["array"]) === null || _a === void 0 ? void 0 : _a.push(filter);
            }
            else {
                if (groupAboveChartDisplay["all"] !== undefined) {
                    groupAboveChartDisplay["all"] = false;
                }
            }
            let buttonEl;
            if (group === "date") {
                buttonEl = $(`.pageAccount .group.topFilters .filterGroup[group="${group}"] .button[filter="${filter}"]`);
            }
            else {
                buttonEl = $(`.pageAccount .group.filterButtons .filterGroup[group="${group}"] .button[filter="${filter}"]`);
            }
            if (getFilter(group, filter)) {
                buttonEl.addClass("active");
            }
            else {
                buttonEl.removeClass("active");
            }
        });
    });
    function addText(group) {
        var _a, _b, _c, _d, _e;
        let ret = "";
        ret += "<div class='group'>";
        if (group == "difficulty") {
            ret += `<span aria-label="Difficulty" data-balloon-pos="up"><i class="fas fa-fw fa-star"></i>`;
        }
        else if (group == "mode") {
            ret += `<span aria-label="Mode" data-balloon-pos="up"><i class="fas fa-fw fa-bars"></i>`;
        }
        else if (group == "punctuation") {
            ret += `<span aria-label="Punctuation" data-balloon-pos="up"><span class="punc" style="font-weight: 900;
      width: 1.25rem;
      text-align: center;
      display: inline-block;
      letter-spacing: -.1rem;">!?</span>`;
        }
        else if (group == "numbers") {
            ret += `<span aria-label="Numbers" data-balloon-pos="up"><span class="numbers" style="font-weight: 900;
        width: 1.25rem;
        text-align: center;
        margin-right: .1rem;
        display: inline-block;
        letter-spacing: -.1rem;">15</span>`;
        }
        else if (group == "words") {
            ret += `<span aria-label="Words" data-balloon-pos="up"><i class="fas fa-fw fa-font"></i>`;
        }
        else if (group == "time") {
            ret += `<span aria-label="Time" data-balloon-pos="up"><i class="fas fa-fw fa-clock"></i>`;
        }
        else if (group == "date") {
            ret += `<span aria-label="Date" data-balloon-pos="up"><i class="fas fa-fw fa-calendar"></i>`;
        }
        else if (group == "tags") {
            ret += `<span aria-label="Tags" data-balloon-pos="up"><i class="fas fa-fw fa-tags"></i>`;
        }
        else if (group == "language") {
            ret += `<span aria-label="Language" data-balloon-pos="up"><i class="fas fa-fw fa-globe-americas"></i>`;
        }
        else if (group == "funbox") {
            ret += `<span aria-label="Funbox" data-balloon-pos="up"><i class="fas fa-fw fa-gamepad"></i>`;
        }
        if ((_a = aboveChartDisplay[group]) === null || _a === void 0 ? void 0 : _a.all) {
            ret += "all";
        }
        else {
            if (group === "tags") {
                ret += (_c = (_b = aboveChartDisplay.tags) === null || _b === void 0 ? void 0 : _b.array) === null || _c === void 0 ? void 0 : _c.map((id) => {
                    var _a, _b;
                    if (id == "none")
                        return id;
                    const snapshot = DB.getSnapshot();
                    const name = (_a = snapshot.tags) === null || _a === void 0 ? void 0 : _a.filter((t) => t._id == id)[0];
                    if (name !== undefined) {
                        return (_b = snapshot.tags) === null || _b === void 0 ? void 0 : _b.filter((t) => t._id == id)[0].name;
                    }
                    return name;
                }).join(", ");
            }
            else {
                ret += (_e = (_d = aboveChartDisplay[group]) === null || _d === void 0 ? void 0 : _d.array) === null || _e === void 0 ? void 0 : _e.join(", ").replace(/_/g, " ");
            }
        }
        ret += "</span></div>";
        return ret;
    }
    let chartString = "";
    //date
    chartString += addText("date");
    chartString += `<div class="spacer"></div>`;
    //mode
    chartString += addText("mode");
    chartString += `<div class="spacer"></div>`;
    //time
    if ((_b = (_a = aboveChartDisplay.mode) === null || _a === void 0 ? void 0 : _a.array) === null || _b === void 0 ? void 0 : _b.includes("time")) {
        chartString += addText("time");
        chartString += `<div class="spacer"></div>`;
    }
    //words
    if ((_d = (_c = aboveChartDisplay.mode) === null || _c === void 0 ? void 0 : _c.array) === null || _d === void 0 ? void 0 : _d.includes("words")) {
        chartString += addText("words");
        chartString += `<div class="spacer"></div>`;
    }
    //diff
    chartString += addText("difficulty");
    chartString += `<div class="spacer"></div>`;
    //punc
    chartString += addText("punctuation");
    chartString += `<div class="spacer"></div>`;
    //numbers
    chartString += addText("numbers");
    chartString += `<div class="spacer"></div>`;
    //language
    chartString += addText("language");
    chartString += `<div class="spacer"></div>`;
    //funbox
    chartString += addText("funbox");
    chartString += `<div class="spacer"></div>`;
    //tags
    chartString += addText("tags");
    setTimeout(() => {
        $(".pageAccount .group.chart .above").html(chartString);
    }, 0);
}
exports.updateActive = updateActive;
function toggle(group, filter) {
    try {
        if (group === "date") {
            Object.keys(getGroup("date")).forEach((date) => {
                exports.filters["date"][date] = false;
            });
        }
        exports.filters[group][filter] = !exports.filters[group][filter];
        save();
    }
    catch (e) {
        Notifications.add("Something went wrong toggling filter. Reverting to defaults.", 0);
        console.log("toggling filter error");
        console.error(e);
        reset();
        updateActive();
    }
}
exports.toggle = toggle;
function updateTags() {
    var _a, _b;
    $(".pageAccount .content .filterButtons .buttonsAndTitle.tags .buttons").empty();
    const snapshot = DB.getSnapshot();
    if (((_a = snapshot.tags) === null || _a === void 0 ? void 0 : _a.length) || 0 > 0) {
        $(".pageAccount .content .filterButtons .buttonsAndTitle.tags").removeClass("hidden");
        $(".pageAccount .content .filterButtons .buttonsAndTitle.tags .buttons").append(`<div class="button" filter="none">no tag</div>`);
        (_b = snapshot.tags) === null || _b === void 0 ? void 0 : _b.forEach((tag) => {
            $(".pageAccount .content .filterButtons .buttonsAndTitle.tags .buttons").append(`<div class="button" filter="${tag._id}">${tag.name}</div>`);
        });
    }
    else {
        $(".pageAccount .content .filterButtons .buttonsAndTitle.tags").addClass("hidden");
    }
}
exports.updateTags = updateTags;
$(".pageAccount .filterButtons .buttonsAndTitle .buttons, .pageAccount .group.topFilters .buttonsAndTitle.testDate .buttons").on("click", ".button", (e) => {
    const group = $(e.target)
        .parents(".buttons")
        .attr("group");
    const filter = $(e.target).attr("filter");
    if ($(e.target).hasClass("allFilters")) {
        Object.keys(getFilters()).forEach((group) => {
            Object.keys(getGroup(group)).forEach((filter) => {
                if (group === "date") {
                    // TODO figure out why "filter" is never
                    // @ts-ignore
                    exports.filters[group][filter] = false;
                }
                else if (exports.filters[group] !== undefined) {
                    // @ts-ignore
                    exports.filters[group][filter] = true;
                }
            });
        });
        exports.filters.date.all = true;
    }
    else if ($(e.target).hasClass("noFilters")) {
        Object.keys(getFilters()).forEach((group) => {
            if (group !== "date") {
                Object.keys(getGroup(group)).forEach((filter) => {
                    // TODO figure out why "filter" is never
                    // @ts-ignore
                    exports.filters[group][filter] = false;
                });
            }
        });
    }
    else if ($(e.target).hasClass("button")) {
        if (e.shiftKey) {
            Object.keys(getGroup(group)).forEach((filter) => {
                // TODO figure out why "filter" is never
                // @ts-ignore
                exports.filters[group][filter] = false;
            });
            // TODO figure out why "filter" is never
            // @ts-ignore
            exports.filters[group][filter] = true;
        }
        else {
            toggle(group, filter);
            // filters[group][filter] = !filters[group][filter];
        }
    }
    updateActive();
    save();
});
$(".pageAccount .topFilters .button.allFilters").on("click", () => {
    Object.keys(getFilters()).forEach((group) => {
        Object.keys(getGroup(group)).forEach((filter) => {
            if (group === "date") {
                // TODO figure out why "filter" is never
                // @ts-ignore
                exports.filters[group][filter] = false;
            }
            else {
                // TODO figure out why "filter" is never
                // @ts-ignore
                exports.filters[group][filter] = true;
            }
        });
    });
    exports.filters.date.all = true;
    updateActive();
    save();
});
$(".pageAccount .topFilters .button.currentConfigFilter").on("click", () => {
    var _a;
    Object.keys(getFilters()).forEach((group) => {
        Object.keys(getGroup(group)).forEach((filter) => {
            // TODO figure out why "filter" is never
            // @ts-ignore
            exports.filters[group][filter] = false;
        });
    });
    exports.filters["difficulty"][config_1.default.difficulty] = true;
    exports.filters["mode"][config_1.default.mode] = true;
    if (config_1.default.mode === "time") {
        if ([15, 30, 60, 120].includes(config_1.default.time)) {
            const configTime = config_1.default.time;
            exports.filters["time"][configTime] = true;
        }
        else {
            exports.filters.time.custom = true;
        }
    }
    else if (config_1.default.mode === "words") {
        if ([10, 25, 50, 100, 200].includes(config_1.default.words)) {
            const configWords = config_1.default.words;
            exports.filters["words"][configWords] = true;
        }
        else {
            exports.filters.words.custom = true;
        }
    }
    else if (config_1.default.mode === "quote") {
        const filterName = [
            "short",
            "medium",
            "long",
            "thicc",
        ];
        filterName.forEach((ql, index) => {
            if (config_1.default.quoteLength.includes(index)) {
                exports.filters["quoteLength"][ql] = true;
            }
            else {
                exports.filters["quoteLength"][ql] = false;
            }
        });
    }
    if (config_1.default.punctuation) {
        exports.filters.punctuation.on = true;
    }
    else {
        exports.filters.punctuation.off = true;
    }
    if (config_1.default.numbers) {
        exports.filters.numbers.on = true;
    }
    else {
        exports.filters.numbers.off = true;
    }
    if (config_1.default.mode === "quote" && /english.*/.test(config_1.default.language)) {
        exports.filters.language.english = true;
    }
    else {
        exports.filters["language"][config_1.default.language] = true;
    }
    if (config_1.default.funbox === "none") {
        exports.filters.funbox.none = true;
    }
    else {
        exports.filters.funbox[config_1.default.funbox] = true;
    }
    exports.filters.tags.none = true;
    (_a = DB.getSnapshot().tags) === null || _a === void 0 ? void 0 : _a.forEach((tag) => {
        if (tag.active === true) {
            exports.filters.tags.none = false;
            exports.filters["tags"][tag._id] = true;
        }
    });
    exports.filters.date.all = true;
    updateActive();
    save();
});
$(".pageAccount .topFilters .button.toggleAdvancedFilters").on("click", () => {
    $(".pageAccount .filterButtons").slideToggle(250);
    $(".pageAccount .topFilters .button.toggleAdvancedFilters").toggleClass("active");
});
Misc.getLanguageList().then((languages) => {
    languages.forEach((language) => {
        $(".pageAccount .content .filterButtons .buttonsAndTitle.languages .buttons").append(`<div class="button" filter="${language}">${language.replace("_", " ")}</div>`);
    });
});
$(".pageAccount .content .filterButtons .buttonsAndTitle.funbox .buttons").append(`<div class="button" filter="none">none</div>`);
Misc.getFunboxList().then((funboxModes) => {
    funboxModes.forEach((funbox) => {
        $(".pageAccount .content .filterButtons .buttonsAndTitle.funbox .buttons").append(`<div class="button" filter="${funbox.name}">${funbox.name.replace(/_/g, " ")}</div>`);
    });
});


/***/ }),

/***/ "./src/scripts/account/sign-out-button.ts":
/*!************************************************!*\
  !*** ./src/scripts/account/sign-out-button.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hide = exports.show = void 0;
function show() {
    // $(".signOut").removeClass("hidden").css("opacity", 1);
    $(".signOut")
        .stop(true, true)
        .removeClass("hidden")
        .css({
        opacity: 0,
        transition: "0s",
    })
        .animate({
        opacity: 1,
    }, 125, () => {
        $(".signOut").css({ transition: "0.25s" });
    });
}
exports.show = show;
function hide() {
    $(".signOut")
        .stop(true, true)
        .css({
        opacity: 1,
        transition: "0s",
    })
        .animate({
        opacity: 0,
    }, 125, () => {
        $(".signOut").css({ transition: "0.25s" });
        $(".signOut").addClass("hidden");
    });
    // $(".signOut").css("opacity", 0).addClass("hidden");
}
exports.hide = hide;
// $("#liveWpm").removeClass("hidden").css("opacity", 0).animate(
//   {
//     opacity: Config.timerOpacity,
//   },
//   125
// );


/***/ }),

/***/ "./src/scripts/ape/endpoints/ape-keys.ts":
/*!***********************************************!*\
  !*** ./src/scripts/ape/endpoints/ape-keys.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const BASE_PATH = "/ape-keys";
function getApeKeysEndpoints(apeClient) {
    function get() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.get(BASE_PATH);
        });
    }
    function generate(name, enabled) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = { name, enabled };
            return yield apeClient.post(BASE_PATH, { payload });
        });
    }
    function update(apeKeyId, updates) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = Object.assign({}, updates);
            return yield apeClient.patch(`${BASE_PATH}/${apeKeyId}`, { payload });
        });
    }
    function _delete(apeKeyId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.delete(`${BASE_PATH}/${apeKeyId}`);
        });
    }
    return {
        get,
        generate,
        update,
        delete: _delete,
    };
}
exports["default"] = getApeKeysEndpoints;


/***/ }),

/***/ "./src/scripts/ape/endpoints/configs.ts":
/*!**********************************************!*\
  !*** ./src/scripts/ape/endpoints/configs.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const BASE_PATH = "/configs";
function getConfigsEndpoints(apeClient) {
    function get() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.get(BASE_PATH);
        });
    }
    function save(config) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.patch(BASE_PATH, { payload: { config } });
        });
    }
    return {
        get,
        save,
    };
}
exports["default"] = getConfigsEndpoints;


/***/ }),

/***/ "./src/scripts/ape/endpoints/index.ts":
/*!********************************************!*\
  !*** ./src/scripts/ape/endpoints/index.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const configs_1 = __importDefault(__webpack_require__(/*! ./configs */ "./src/scripts/ape/endpoints/configs.ts"));
const leaderboards_1 = __importDefault(__webpack_require__(/*! ./leaderboards */ "./src/scripts/ape/endpoints/leaderboards.ts"));
const presets_1 = __importDefault(__webpack_require__(/*! ./presets */ "./src/scripts/ape/endpoints/presets.ts"));
const psas_1 = __importDefault(__webpack_require__(/*! ./psas */ "./src/scripts/ape/endpoints/psas.ts"));
const quotes_1 = __importDefault(__webpack_require__(/*! ./quotes */ "./src/scripts/ape/endpoints/quotes.ts"));
const results_1 = __importDefault(__webpack_require__(/*! ./results */ "./src/scripts/ape/endpoints/results.ts"));
const users_1 = __importDefault(__webpack_require__(/*! ./users */ "./src/scripts/ape/endpoints/users.ts"));
const ape_keys_1 = __importDefault(__webpack_require__(/*! ./ape-keys */ "./src/scripts/ape/endpoints/ape-keys.ts"));
exports["default"] = {
    getConfigsEndpoints: configs_1.default,
    getLeaderboardsEndpoints: leaderboards_1.default,
    getPresetsEndpoints: presets_1.default,
    getPsasEndpoints: psas_1.default,
    getQuotesEndpoints: quotes_1.default,
    getResultsEndpoints: results_1.default,
    getUsersEndpoints: users_1.default,
    getApeKeysEndpoints: ape_keys_1.default,
};


/***/ }),

/***/ "./src/scripts/ape/endpoints/leaderboards.ts":
/*!***************************************************!*\
  !*** ./src/scripts/ape/endpoints/leaderboards.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const BASE_PATH = "/leaderboards";
function getLeaderboardsEndpoints(apeClient) {
    function get(language, mode, mode2, skip = 0, limit = 50) {
        return __awaiter(this, void 0, void 0, function* () {
            const searchQuery = {
                language,
                mode,
                mode2,
                skip,
                limit: Math.max(Math.min(limit, 50), 0),
            };
            return yield apeClient.get(BASE_PATH, { searchQuery });
        });
    }
    function getRank(language, mode, mode2) {
        return __awaiter(this, void 0, void 0, function* () {
            const searchQuery = {
                language,
                mode,
                mode2,
            };
            return yield apeClient.get(`${BASE_PATH}/rank`, { searchQuery });
        });
    }
    return { get, getRank };
}
exports["default"] = getLeaderboardsEndpoints;


/***/ }),

/***/ "./src/scripts/ape/endpoints/presets.ts":
/*!**********************************************!*\
  !*** ./src/scripts/ape/endpoints/presets.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const BASE_PATH = "/presets";
function getPresetsEndpoints(apeClient) {
    function get() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.get(BASE_PATH);
        });
    }
    function add(presetName, configChanges) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                name: presetName,
                config: configChanges,
            };
            return yield apeClient.post(BASE_PATH, { payload });
        });
    }
    function edit(presetId, presetName, configChanges) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                _id: presetId,
                name: presetName,
                config: configChanges,
            };
            return yield apeClient.patch(BASE_PATH, { payload });
        });
    }
    function _delete(presetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.delete(`${BASE_PATH}/${presetId}`);
        });
    }
    return { get, add, edit, delete: _delete };
}
exports["default"] = getPresetsEndpoints;


/***/ }),

/***/ "./src/scripts/ape/endpoints/psas.ts":
/*!*******************************************!*\
  !*** ./src/scripts/ape/endpoints/psas.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const version_1 = __webpack_require__(/*! ../../version */ "./src/scripts/version.ts");
const BASE_PATH = "/psas";
function getPsasEndpoints(apeClient) {
    function get() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.get(BASE_PATH, {
                headers: {
                    "Client-Version": version_1.CLIENT_VERSION,
                },
            });
        });
    }
    return { get };
}
exports["default"] = getPsasEndpoints;


/***/ }),

/***/ "./src/scripts/ape/endpoints/quotes.ts":
/*!*********************************************!*\
  !*** ./src/scripts/ape/endpoints/quotes.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const BASE_PATH = "/quotes";
function getQuotesEndpoints(apeClient) {
    function get() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.get(BASE_PATH);
        });
    }
    function submit(text, source, language, captcha) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                text,
                source,
                language,
                captcha,
            };
            return yield apeClient.post(BASE_PATH, { payload });
        });
    }
    function approveSubmission(quoteSubmissionId, editText, editSource) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                quoteId: quoteSubmissionId,
                editText,
                editSource,
            };
            return yield apeClient.post(`${BASE_PATH}/approve`, { payload });
        });
    }
    function rejectSubmission(quoteSubmissionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.post(`${BASE_PATH}/reject`, {
                payload: { quoteId: quoteSubmissionId },
            });
        });
    }
    function getRating(quote) {
        return __awaiter(this, void 0, void 0, function* () {
            const searchQuery = {
                quoteId: quote.id,
                language: quote.language,
            };
            return yield apeClient.get(`${BASE_PATH}/rating`, { searchQuery });
        });
    }
    function addRating(quote, rating) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                quoteId: quote.id,
                rating,
                language: quote.language,
            };
            return yield apeClient.post(`${BASE_PATH}/rating`, { payload });
        });
    }
    function report(quoteId, quoteLanguage, reason, comment, captcha) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                quoteId,
                quoteLanguage,
                reason,
                comment,
                captcha,
            };
            return yield apeClient.post(`${BASE_PATH}/report`, { payload });
        });
    }
    return {
        get,
        submit,
        approveSubmission,
        rejectSubmission,
        getRating,
        addRating,
        report,
    };
}
exports["default"] = getQuotesEndpoints;


/***/ }),

/***/ "./src/scripts/ape/endpoints/results.ts":
/*!**********************************************!*\
  !*** ./src/scripts/ape/endpoints/results.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const version_1 = __webpack_require__(/*! ../../version */ "./src/scripts/version.ts");
const BASE_PATH = "/results";
function getResultsEndpoints(apeClient) {
    function get() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.get(BASE_PATH);
        });
    }
    function save(result) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.post(BASE_PATH, {
                payload: { result },
                headers: { "Client-Version": version_1.CLIENT_VERSION },
            });
        });
    }
    function updateTags(resultId, tagIds) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.patch(`${BASE_PATH}/tags`, {
                payload: { resultId, tagIds },
            });
        });
    }
    function deleteAll() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.delete(BASE_PATH);
        });
    }
    return { get, save, updateTags, deleteAll };
}
exports["default"] = getResultsEndpoints;


/***/ }),

/***/ "./src/scripts/ape/endpoints/users.ts":
/*!********************************************!*\
  !*** ./src/scripts/ape/endpoints/users.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const BASE_PATH = "/users";
function getUsersEndpoints(apeClient) {
    function getData() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.get(BASE_PATH);
        });
    }
    function create(name, email, uid) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                email,
                name,
                uid,
            };
            return yield apeClient.post(`${BASE_PATH}/signup`, { payload });
        });
    }
    function getNameAvailability(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.get(`${BASE_PATH}/checkName/${name}`);
        });
    }
    function _delete() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.delete(BASE_PATH);
        });
    }
    function updateName(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.patch(`${BASE_PATH}/name`, { payload: { name } });
        });
    }
    function updateLeaderboardMemory(mode, mode2, language, rank) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                mode,
                mode2,
                language,
                rank,
            };
            return yield apeClient.patch(`${BASE_PATH}/leaderboardMemory`, { payload });
        });
    }
    function updateEmail(newEmail, previousEmail) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                newEmail,
                previousEmail,
            };
            return yield apeClient.patch(`${BASE_PATH}/email`, { payload });
        });
    }
    function deletePersonalBests() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.delete(`${BASE_PATH}/personalBests`);
        });
    }
    function getTags() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.get(`${BASE_PATH}/tags`);
        });
    }
    function createTag(tagName) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.post(`${BASE_PATH}/tags`, { payload: { tagName } });
        });
    }
    function editTag(tagId, newName) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                tagId,
                newName,
            };
            return yield apeClient.patch(`${BASE_PATH}/tags`, { payload });
        });
    }
    function deleteTag(tagId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.delete(`${BASE_PATH}/tags/${tagId}`);
        });
    }
    function deleteTagPersonalBest(tagId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.delete(`${BASE_PATH}/tags/${tagId}/personalBest`);
        });
    }
    function getCustomThemes() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.get(`${BASE_PATH}/customThemes`);
        });
    }
    function editCustomTheme(themeId, newTheme) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                themeId: themeId,
                theme: {
                    name: newTheme.name,
                    colors: newTheme.colors,
                },
            };
            return yield apeClient.patch(`${BASE_PATH}/customThemes`, { payload });
        });
    }
    function deleteCustomTheme(themeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                themeId: themeId,
            };
            return yield apeClient.delete(`${BASE_PATH}/customThemes`, { payload });
        });
    }
    function addCustomTheme(newTheme) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = { name: newTheme.name, colors: newTheme.colors };
            return yield apeClient.post(`${BASE_PATH}/customThemes`, { payload });
        });
    }
    function linkDiscord(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.post(`${BASE_PATH}/discord/link`, {
                payload: { data },
            });
        });
    }
    function unlinkDiscord() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield apeClient.post(`${BASE_PATH}/discord/unlink`);
        });
    }
    return {
        getData,
        create,
        getNameAvailability,
        delete: _delete,
        updateName,
        updateLeaderboardMemory,
        updateEmail,
        deletePersonalBests,
        getTags,
        createTag,
        editTag,
        deleteTag,
        deleteTagPersonalBest,
        linkDiscord,
        unlinkDiscord,
        getCustomThemes,
        addCustomTheme,
        editCustomTheme,
        deleteCustomTheme,
    };
}
exports["default"] = getUsersEndpoints;


/***/ }),

/***/ "./src/scripts/ape/index.ts":
/*!**********************************!*\
  !*** ./src/scripts/ape/index.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const axios_1 = __importDefault(__webpack_require__(/*! axios */ "./node_modules/axios/index.js"));
const endpoints_1 = __importDefault(__webpack_require__(/*! ./endpoints */ "./src/scripts/ape/endpoints/index.ts"));
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
const auth_1 = __webpack_require__(/*! firebase/auth */ "./node_modules/firebase/auth/dist/index.esm.js");
const DEV_SERVER_HOST = "http://localhost:5005";
const PROD_SERVER_HOST = "https://api.monkeytype.com";
const API_PATH = "";
const BASE_URL = window.location.hostname === "localhost" ? DEV_SERVER_HOST : PROD_SERVER_HOST;
const API_URL = `${BASE_URL}${API_PATH}`;
// Adapts the ape client's view of request options to the underlying HTTP client.
function adaptRequestOptions(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const currentUser = firebase_1.Auth.currentUser;
        const idToken = currentUser && (yield (0, auth_1.getIdToken)(currentUser));
        return {
            params: options.searchQuery,
            data: options.payload,
            headers: Object.assign(Object.assign(Object.assign({}, options.headers), { Accept: "application/json", "Content-Type": "application/json" }), (idToken && { Authorization: `Bearer ${idToken}` })),
        };
    });
}
// Wrap the underlying HTTP client's method with our own.
function apeifyClientMethod(clientMethod, methodType) {
    return (endpoint, options = {}) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c;
        let errorMessage = "";
        try {
            const requestOptions = yield adaptRequestOptions(options);
            let response;
            if (methodType === "get" || methodType === "delete") {
                response = yield clientMethod(endpoint, requestOptions);
            }
            else {
                response = yield clientMethod(endpoint, requestOptions.data, requestOptions);
            }
            const { message, data } = response.data;
            return {
                status: response.status,
                message,
                data,
            };
        }
        catch (error) {
            console.error(error);
            const typedError = error;
            errorMessage = typedError.message;
            if (axios_1.default.isAxiosError(typedError)) {
                return Object.assign({ status: (_b = (_a = typedError.response) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : 500, message: typedError.message }, (_c = typedError.response) === null || _c === void 0 ? void 0 : _c.data);
            }
        }
        return {
            status: 500,
            message: errorMessage,
        };
    });
}
const axiosClient = axios_1.default.create({
    baseURL: API_URL,
    timeout: 10000,
});
const apeClient = {
    get: apeifyClientMethod(axiosClient.get, "get"),
    post: apeifyClientMethod(axiosClient.post, "post"),
    put: apeifyClientMethod(axiosClient.put, "put"),
    patch: apeifyClientMethod(axiosClient.patch, "patch"),
    delete: apeifyClientMethod(axiosClient.delete, "delete"),
};
// API Endpoints
const Ape = {
    users: endpoints_1.default.getUsersEndpoints(apeClient),
    configs: endpoints_1.default.getConfigsEndpoints(apeClient),
    results: endpoints_1.default.getResultsEndpoints(apeClient),
    psas: endpoints_1.default.getPsasEndpoints(apeClient),
    quotes: endpoints_1.default.getQuotesEndpoints(apeClient),
    leaderboards: endpoints_1.default.getLeaderboardsEndpoints(apeClient),
    presets: endpoints_1.default.getPresetsEndpoints(apeClient),
    apeKeys: endpoints_1.default.getApeKeysEndpoints(apeClient),
};
exports["default"] = Ape;


/***/ }),

/***/ "./src/scripts/config-validation.ts":
/*!******************************************!*\
  !*** ./src/scripts/config-validation.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isConfigValueValidAsync = exports.isConfigValueValid = exports.isConfigKeyValid = void 0;
const Misc = __importStar(__webpack_require__(/*! ./utils/misc */ "./src/scripts/utils/misc.ts"));
const Notifications = __importStar(__webpack_require__(/*! ./elements/notifications */ "./src/scripts/elements/notifications.ts"));
function isConfigKeyValid(name) {
    if (name === null || name === undefined || name === "")
        return false;
    if (name.length > 30)
        return false;
    return /^[0-9a-zA-Z_.\-#+]+$/.test(name);
}
exports.isConfigKeyValid = isConfigKeyValid;
function invalid(key, val, customMessage) {
    if (customMessage === undefined) {
        Notifications.add(`Invalid value for ${key} (${val}). Please try to change this setting again.`, -1);
    }
    else {
        Notifications.add(`Invalid value for ${key} (${val}). ${customMessage}`, -1);
    }
    console.error(`Invalid value key ${key} value ${val} type ${typeof val}`);
}
function isArray(val) {
    return val instanceof Array;
}
function isConfigValueValid(key, val, possibleTypes) {
    let isValid = false;
    // might be used in the future
    // eslint-disable-next-line
    let customMessage = undefined;
    for (const possibleType of possibleTypes) {
        switch (possibleType) {
            case "boolean":
                if (typeof val === "boolean")
                    isValid = true;
                break;
            case "null":
                if (val === null)
                    isValid = true;
                break;
            case "number":
                if (typeof val === "number")
                    isValid = true;
                break;
            case "numberArray":
                if (isArray(val) && val.every((v) => typeof v === "number")) {
                    isValid = true;
                }
                break;
            case "string":
                if (typeof val === "string")
                    isValid = true;
                break;
            case "stringArray":
                if (isArray(val) && val.every((v) => typeof v === "string")) {
                    isValid = true;
                }
                break;
            case "undefined":
                if (typeof val === "undefined" || val === undefined)
                    isValid = true;
                break;
            default:
                if (isArray(possibleType)) {
                    if (possibleType.includes(val))
                        isValid = true;
                }
                break;
        }
    }
    if (!isValid)
        invalid(key, val, customMessage);
    return isValid;
}
exports.isConfigValueValid = isConfigValueValid;
function isConfigValueValidAsync(key, val, possibleTypes) {
    return __awaiter(this, void 0, void 0, function* () {
        let isValid = false;
        let customMessage = undefined;
        for (const possibleType of possibleTypes) {
            switch (possibleType) {
                case "layoutfluid": {
                    if (typeof val !== "string")
                        break;
                    const layoutNames = val.split(/[# ]+/);
                    if (layoutNames.length < 2 || layoutNames.length > 5)
                        break;
                    // convert the layout names to layouts
                    const layouts = yield Promise.all(layoutNames.map((layoutName) => Misc.getLayout(layoutName)));
                    // check if all layouts exist
                    if (!layouts.every((layout) => layout !== undefined)) {
                        const invalidLayoutNames = layoutNames.map((layoutName, index) => [
                            layoutName,
                            layouts[index],
                        ]);
                        const invalidLayouts = invalidLayoutNames
                            .filter(([_, layout]) => layout === undefined)
                            .map(([layoutName]) => layoutName);
                        customMessage = `The following inputted layouts do not exist: ${invalidLayouts.join(", ")}`;
                        break;
                    }
                    isValid = true;
                    break;
                }
            }
        }
        if (!isValid)
            invalid(key, val, customMessage);
        return isValid;
    });
}
exports.isConfigValueValidAsync = isConfigValueValidAsync;


/***/ }),

/***/ "./src/scripts/config.ts":
/*!*******************************!*\
  !*** ./src/scripts/config.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setShowLiveAcc = exports.setShowLiveWpm = exports.setShowTimerProgress = exports.setPaceCaretStyle = exports.setCaretStyle = exports.setPageWidth = exports.setOppositeShiftMode = exports.setStrictSpace = exports.setColorfulMode = exports.setFlipTestColors = exports.setRepeatQuotes = exports.setEnableAds = exports.setQuickEnd = exports.setShowAllLines = exports.setCapsLockWarning = exports.setSingleListCommandLine = exports.setAlwaysShowWordsHistory = exports.setMinBurstCustomSpeed = exports.setMinBurst = exports.setMinAccCustom = exports.setMinAcc = exports.setMinWpmCustomSpeed = exports.setMinWpm = exports.setRepeatedPace = exports.setPaceCaretCustomSpeed = exports.setPaceCaret = exports.setSwapEscAndTab = exports.setShowOutOfFocusWarning = exports.setAlwaysShowCPM = exports.setAlwaysShowDecimalPlaces = exports.setStopOnError = exports.setChartStyle = exports.setChartAccuracy = exports.setBlindMode = exports.setFunbox = exports.setFavThemes = exports.setDifficulty = exports.setSoundVolume = exports.setPlaySoundOnClick = exports.setPlaySoundOnError = exports.setMode = exports.setPunctuation = exports.setNumbers = exports.saveFullConfigToLocalStorage = exports.setChangedBeforeDb = exports.setDbConfigLoaded = exports.setLocalStorageConfig = exports.changedBeforeDb = exports.dbConfigLoaded = exports.localStorageConfig = void 0;
exports.loadPromise = exports.setConfig = exports.getConfigChanges = exports.loadFromLocalStorage = exports.reset = exports.apply = exports.setBurstHeatmap = exports.setMonkeyPowerLevel = exports.setCustomBackgroundFilter = exports.setCustomBackgroundSize = exports.setCustomLayoutfluid = exports.setCustomBackground = exports.setFontSize = exports.setLayout = exports.setKeymapLayout = exports.setKeymapStyle = exports.setKeymapLegendStyle = exports.setKeymapMode = exports.setMonkey = exports.setLanguage = exports.setCustomThemeColors = exports.setLazyMode = exports.setBritishEnglish = exports.setRandomTheme = exports.setThemeDark = exports.setThemeLight = exports.setTheme = exports.setCustomTheme = exports.setAutoSwitchTheme = exports.setIndicateTypos = exports.setConfidenceMode = exports.setFreedomMode = exports.setFontFamily = exports.previewFontFamily = exports.setQuickTabMode = exports.setSmoothLineScroll = exports.setStartGraphsAtZero = exports.setSmoothCaret = exports.setWordCount = exports.setQuoteLength = exports.setTimeConfig = exports.setKeyTips = exports.setTimerOpacity = exports.setTimerColor = exports.setTimerStyle = exports.setHideExtraLetters = exports.setHighlightMode = exports.setShowAverage = exports.setShowLiveBurst = void 0;
const DB = __importStar(__webpack_require__(/*! ./db */ "./src/scripts/db.ts"));
const OutOfFocus = __importStar(__webpack_require__(/*! ./test/out-of-focus */ "./src/scripts/test/out-of-focus.ts"));
const Notifications = __importStar(__webpack_require__(/*! ./elements/notifications */ "./src/scripts/elements/notifications.ts"));
const config_validation_1 = __webpack_require__(/*! ./config-validation */ "./src/scripts/config-validation.ts");
const ConfigEvent = __importStar(__webpack_require__(/*! ./observables/config-event */ "./src/scripts/observables/config-event.ts"));
const default_config_1 = __importDefault(__webpack_require__(/*! ./constants/default-config */ "./src/scripts/constants/default-config.ts"));
const firebase_1 = __webpack_require__(/*! ./firebase */ "./src/scripts/firebase.ts");
const AnalyticsController = __importStar(__webpack_require__(/*! ./controllers/analytics-controller */ "./src/scripts/controllers/analytics-controller.ts"));
exports.dbConfigLoaded = false;
exports.changedBeforeDb = false;
function setLocalStorageConfig(val) {
    exports.localStorageConfig = val;
}
exports.setLocalStorageConfig = setLocalStorageConfig;
function setDbConfigLoaded(val) {
    exports.dbConfigLoaded = val;
}
exports.setDbConfigLoaded = setDbConfigLoaded;
function setChangedBeforeDb(val) {
    exports.changedBeforeDb = val;
}
exports.setChangedBeforeDb = setChangedBeforeDb;
let loadDone;
let config = Object.assign({}, default_config_1.default);
function saveToLocalStorage(key, nosave = false, noDbCheck = false) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!exports.dbConfigLoaded && !noDbCheck && !nosave) {
            setChangedBeforeDb(true);
        }
        if (nosave)
            return;
        const localToSave = config;
        delete localToSave.resultFilters;
        const localToSaveStringified = JSON.stringify(localToSave);
        window.localStorage.setItem("config", localToSaveStringified);
        if (!noDbCheck) {
            // await DB.saveConfig(dbToSave);
            yield saveToDatabase(key);
        }
        ConfigEvent.dispatch("saveToLocalStorage", localToSaveStringified);
    });
}
let configToSend = {};
let saveTimeout = null;
function saveToDatabase(key) {
    return __awaiter(this, void 0, void 0, function* () {
        configToSend[key] = config[key];
        if (saveTimeout === null) {
            saveTimeout = setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                delete configToSend.resultFilters;
                if (Object.keys(configToSend).length > 0)
                    DB.saveConfig(configToSend);
                configToSend = {};
                clearTimeout(saveTimeout);
                saveTimeout = null;
            }), window.location.hostname === "localhost" ? 0 : 1000);
        }
    });
}
function saveFullConfigToLocalStorage(noDbCheck = false) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!exports.dbConfigLoaded && !noDbCheck) {
            setChangedBeforeDb(true);
        }
        const save = config;
        delete save.resultFilters;
        const stringified = JSON.stringify(save);
        window.localStorage.setItem("config", stringified);
        if (!noDbCheck)
            yield DB.saveConfig(save);
        ConfigEvent.dispatch("saveToLocalStorage", stringified);
    });
}
exports.saveFullConfigToLocalStorage = saveFullConfigToLocalStorage;
//numbers
function setNumbers(numb, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("numbers", numb, ["boolean"]))
        return false;
    if (config.mode === "quote") {
        numb = false;
    }
    config.numbers = numb;
    if (!config.numbers) {
        $("#top .config .numbersMode .text-button").removeClass("active");
    }
    else {
        $("#top .config .numbersMode .text-button").addClass("active");
    }
    saveToLocalStorage("numbers", nosave);
    ConfigEvent.dispatch("numbers", config.numbers);
    return true;
}
exports.setNumbers = setNumbers;
//punctuation
function setPunctuation(punc, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("punctuation", punc, ["boolean"]))
        return false;
    if (config.mode === "quote") {
        punc = false;
    }
    config.punctuation = punc;
    if (!config.punctuation) {
        $("#top .config .punctuationMode .text-button").removeClass("active");
    }
    else {
        $("#top .config .punctuationMode .text-button").addClass("active");
    }
    saveToLocalStorage("punctuation", nosave);
    ConfigEvent.dispatch("punctuation", config.punctuation);
    return true;
}
exports.setPunctuation = setPunctuation;
function setMode(mode, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("mode", mode, [
        ["time", "words", "quote", "zen", "custom"],
    ])) {
        return false;
    }
    if (mode !== "words" && config.funbox === "memory") {
        Notifications.add("Memory funbox can only be used with words mode.", 0);
        return false;
    }
    const previous = config.mode;
    config.mode = mode;
    if (config.mode == "custom") {
        setPunctuation(false, true);
        setNumbers(false, true);
    }
    else if (config.mode == "quote") {
        setPunctuation(false, true);
        setNumbers(false, true);
    }
    else if (config.mode == "zen") {
        if (config.paceCaret != "off") {
            Notifications.add(`Pace caret will not work with zen mode.`, 0);
        }
    }
    saveToLocalStorage("mode", nosave);
    ConfigEvent.dispatch("mode", config.mode, nosave, previous);
    return true;
}
exports.setMode = setMode;
function setPlaySoundOnError(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("play sound on error", val, ["boolean"])) {
        return false;
    }
    config.playSoundOnError = val;
    saveToLocalStorage("playSoundOnError", nosave);
    ConfigEvent.dispatch("playSoundOnError", config.playSoundOnError);
    return true;
}
exports.setPlaySoundOnError = setPlaySoundOnError;
function setPlaySoundOnClick(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("play sound on click", val, [
        ["off", "1", "2", "3", "4", "5", "6", "7"],
    ])) {
        return false;
    }
    config.playSoundOnClick = val;
    saveToLocalStorage("playSoundOnClick", nosave);
    ConfigEvent.dispatch("playSoundOnClick", config.playSoundOnClick);
    return true;
}
exports.setPlaySoundOnClick = setPlaySoundOnClick;
function setSoundVolume(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("sound volume", val, [["0.1", "0.5", "1.0"]])) {
        return false;
    }
    config.soundVolume = val;
    saveToLocalStorage("soundVolume", nosave);
    ConfigEvent.dispatch("soundVolume", config.soundVolume);
    return true;
}
exports.setSoundVolume = setSoundVolume;
//difficulty
function setDifficulty(diff, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("difficulty", diff, [["normal", "expert", "master"]])) {
        return false;
    }
    config.difficulty = diff;
    saveToLocalStorage("difficulty", nosave);
    ConfigEvent.dispatch("difficulty", config.difficulty, nosave);
    return true;
}
exports.setDifficulty = setDifficulty;
//set fav themes
function setFavThemes(themes, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("favorite themes", themes, ["stringArray"])) {
        return false;
    }
    config.favThemes = themes;
    saveToLocalStorage("favThemes", nosave);
    ConfigEvent.dispatch("favThemes", config.favThemes);
    return true;
}
exports.setFavThemes = setFavThemes;
function setFunbox(funbox, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("funbox", funbox, ["string"]))
        return false;
    const val = funbox ? funbox : "none";
    config.funbox = val;
    saveToLocalStorage("funbox", nosave);
    ConfigEvent.dispatch("funbox", config.funbox);
    return true;
}
exports.setFunbox = setFunbox;
function setBlindMode(blind, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("blind mode", blind, ["boolean"]))
        return false;
    config.blindMode = blind;
    saveToLocalStorage("blindMode", nosave);
    ConfigEvent.dispatch("blindMode", config.blindMode, nosave);
    return true;
}
exports.setBlindMode = setBlindMode;
function setChartAccuracy(chartAccuracy, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("chart accuracy", chartAccuracy, ["boolean"])) {
        return false;
    }
    config.chartAccuracy = chartAccuracy;
    saveToLocalStorage("chartAccuracy", nosave);
    ConfigEvent.dispatch("chartAccuracy", config.chartAccuracy);
    return true;
}
exports.setChartAccuracy = setChartAccuracy;
function setChartStyle(chartStyle, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("chart style", chartStyle, [["line", "scatter"]])) {
        return false;
    }
    config.chartStyle = chartStyle;
    saveToLocalStorage("chartStyle", nosave);
    ConfigEvent.dispatch("chartStyle", config.chartStyle);
    return true;
}
exports.setChartStyle = setChartStyle;
function setStopOnError(soe, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("stop on error", soe, [["off", "word", "letter"]])) {
        return false;
    }
    config.stopOnError = soe;
    if (config.stopOnError !== "off") {
        config.confidenceMode = "off";
    }
    saveToLocalStorage("stopOnError", nosave);
    ConfigEvent.dispatch("stopOnError", config.stopOnError, nosave);
    return true;
}
exports.setStopOnError = setStopOnError;
function setAlwaysShowDecimalPlaces(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("always show decimal places", val, ["boolean"])) {
        return false;
    }
    config.alwaysShowDecimalPlaces = val;
    saveToLocalStorage("alwaysShowDecimalPlaces", nosave);
    ConfigEvent.dispatch("alwaysShowDecimalPlaces", config.alwaysShowDecimalPlaces);
    return true;
}
exports.setAlwaysShowDecimalPlaces = setAlwaysShowDecimalPlaces;
function setAlwaysShowCPM(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("always show CPM", val, ["boolean"]))
        return false;
    config.alwaysShowCPM = val;
    saveToLocalStorage("alwaysShowCPM", nosave);
    ConfigEvent.dispatch("alwaysShowCPM", config.alwaysShowCPM);
    return true;
}
exports.setAlwaysShowCPM = setAlwaysShowCPM;
function setShowOutOfFocusWarning(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("show out of focus warning", val, ["boolean"])) {
        return false;
    }
    config.showOutOfFocusWarning = val;
    if (!config.showOutOfFocusWarning) {
        OutOfFocus.hide();
    }
    saveToLocalStorage("showOutOfFocusWarning", nosave);
    ConfigEvent.dispatch("showOutOfFocusWarning", config.showOutOfFocusWarning);
    return true;
}
exports.setShowOutOfFocusWarning = setShowOutOfFocusWarning;
function setSwapEscAndTab(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("swap esc and tab", val, ["boolean"]))
        return false;
    config.swapEscAndTab = val;
    saveToLocalStorage("swapEscAndTab", nosave);
    ConfigEvent.dispatch("swapEscAndTab", config.swapEscAndTab);
    return true;
}
exports.setSwapEscAndTab = setSwapEscAndTab;
//pace caret
function setPaceCaret(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("pace caret", val, [["custom", "off", "average", "pb"]])) {
        return false;
    }
    if (document.readyState === "complete") {
        if (val == "pb" && firebase_1.Auth.currentUser === null) {
            Notifications.add("PB pace caret is unavailable without an account", 0);
            return false;
        }
    }
    // if (config.mode === "zen" && val != "off") {
    //   Notifications.add(`Can't use pace caret with zen mode.`, 0);
    //   val = "off";
    // }
    config.paceCaret = val;
    saveToLocalStorage("paceCaret", nosave);
    ConfigEvent.dispatch("paceCaret", config.paceCaret, nosave);
    return true;
}
exports.setPaceCaret = setPaceCaret;
function setPaceCaretCustomSpeed(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("pace caret custom speed", val, ["number"])) {
        return false;
    }
    config.paceCaretCustomSpeed = val;
    saveToLocalStorage("paceCaretCustomSpeed", nosave);
    ConfigEvent.dispatch("paceCaretCustomSpeed", config.paceCaretCustomSpeed);
    return true;
}
exports.setPaceCaretCustomSpeed = setPaceCaretCustomSpeed;
function setRepeatedPace(pace, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("repeated pace", pace, ["boolean"]))
        return false;
    config.repeatedPace = pace;
    saveToLocalStorage("repeatedPace", nosave);
    ConfigEvent.dispatch("repeatedPace", config.repeatedPace);
    return true;
}
exports.setRepeatedPace = setRepeatedPace;
//min wpm
function setMinWpm(minwpm, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("min WPM", minwpm, [["off", "custom"]]))
        return false;
    config.minWpm = minwpm;
    saveToLocalStorage("minWpm", nosave);
    ConfigEvent.dispatch("minWpm", config.minWpm, nosave);
    return true;
}
exports.setMinWpm = setMinWpm;
function setMinWpmCustomSpeed(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("min WPM custom speed", val, ["number"])) {
        return false;
    }
    config.minWpmCustomSpeed = val;
    saveToLocalStorage("minWpmCustomSpeed", nosave);
    ConfigEvent.dispatch("minWpmCustomSpeed", config.minWpmCustomSpeed);
    return true;
}
exports.setMinWpmCustomSpeed = setMinWpmCustomSpeed;
//min acc
function setMinAcc(min, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("min acc", min, [["off", "custom"]]))
        return false;
    config.minAcc = min;
    saveToLocalStorage("minAcc", nosave);
    ConfigEvent.dispatch("minAcc", config.minAcc, nosave);
    return true;
}
exports.setMinAcc = setMinAcc;
function setMinAccCustom(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("min acc custom", val, ["number"]))
        return false;
    config.minAccCustom = val;
    saveToLocalStorage("minAccCustom", nosave);
    ConfigEvent.dispatch("minAccCustom", config.minAccCustom);
    return true;
}
exports.setMinAccCustom = setMinAccCustom;
//min burst
function setMinBurst(min, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("min burst", min, [["off", "fixed", "flex"]])) {
        return false;
    }
    config.minBurst = min;
    saveToLocalStorage("minBurst", nosave);
    ConfigEvent.dispatch("minBurst", config.minBurst, nosave);
    return true;
}
exports.setMinBurst = setMinBurst;
function setMinBurstCustomSpeed(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("min burst custom speed", val, ["number"])) {
        return false;
    }
    config.minBurstCustomSpeed = val;
    saveToLocalStorage("minBurstCustomSpeed", nosave);
    ConfigEvent.dispatch("minBurstCustomSpeed", config.minBurstCustomSpeed);
    return true;
}
exports.setMinBurstCustomSpeed = setMinBurstCustomSpeed;
//always show words history
function setAlwaysShowWordsHistory(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("always show words history", val, ["boolean"])) {
        return false;
    }
    config.alwaysShowWordsHistory = val;
    saveToLocalStorage("alwaysShowWordsHistory", nosave);
    ConfigEvent.dispatch("alwaysShowWordsHistory", config.alwaysShowWordsHistory);
    return true;
}
exports.setAlwaysShowWordsHistory = setAlwaysShowWordsHistory;
//single list command line
function setSingleListCommandLine(option, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("single list command line", option, [["manual", "on"]])) {
        return false;
    }
    config.singleListCommandLine = option;
    saveToLocalStorage("singleListCommandLine", nosave);
    ConfigEvent.dispatch("singleListCommandLine", config.singleListCommandLine);
    return true;
}
exports.setSingleListCommandLine = setSingleListCommandLine;
//caps lock warning
function setCapsLockWarning(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("caps lock warning", val, ["boolean"]))
        return false;
    config.capsLockWarning = val;
    saveToLocalStorage("capsLockWarning", nosave);
    ConfigEvent.dispatch("capsLockWarning", config.capsLockWarning);
    return true;
}
exports.setCapsLockWarning = setCapsLockWarning;
function setShowAllLines(sal, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("show all lines", sal, ["boolean"]))
        return false;
    config.showAllLines = sal;
    saveToLocalStorage("showAllLines", nosave);
    ConfigEvent.dispatch("showAllLines", config.showAllLines, nosave);
    return true;
}
exports.setShowAllLines = setShowAllLines;
function setQuickEnd(qe, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("quick end", qe, ["boolean"]))
        return false;
    config.quickEnd = qe;
    saveToLocalStorage("quickEnd", nosave);
    ConfigEvent.dispatch("quickEnd", config.quickEnd);
    return true;
}
exports.setQuickEnd = setQuickEnd;
function setEnableAds(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("enable ads", val, [["on", "off", "max"]])) {
        return false;
    }
    config.enableAds = val;
    if (!nosave) {
        saveToLocalStorage("enableAds", nosave);
        setTimeout(() => {
            location.reload();
        }, 3000);
        Notifications.add("Ad settings changed. Refreshing...", 0);
    }
    return true;
}
exports.setEnableAds = setEnableAds;
function setRepeatQuotes(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("repeat quotes", val, [["off", "typing"]])) {
        return false;
    }
    config.repeatQuotes = val;
    saveToLocalStorage("repeatQuotes", nosave);
    ConfigEvent.dispatch("repeatQuotes", config.repeatQuotes);
    return true;
}
exports.setRepeatQuotes = setRepeatQuotes;
//flip colors
function setFlipTestColors(flip, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("flip test colors", flip, ["boolean"]))
        return false;
    config.flipTestColors = flip;
    saveToLocalStorage("flipTestColors", nosave);
    ConfigEvent.dispatch("flipTestColors", config.flipTestColors);
    return true;
}
exports.setFlipTestColors = setFlipTestColors;
//extra color
function setColorfulMode(extra, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("colorful mode", extra, ["boolean"]))
        return false;
    config.colorfulMode = extra;
    saveToLocalStorage("colorfulMode", nosave);
    ConfigEvent.dispatch("colorfulMode", config.colorfulMode);
    return true;
}
exports.setColorfulMode = setColorfulMode;
//strict space
function setStrictSpace(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("strict space", val, ["boolean"]))
        return false;
    config.strictSpace = val;
    saveToLocalStorage("strictSpace", nosave);
    ConfigEvent.dispatch("strictSpace", config.strictSpace);
    return true;
}
exports.setStrictSpace = setStrictSpace;
//opposite shift space
function setOppositeShiftMode(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("opposite shift mode", val, [["off", "on", "keymap"]])) {
        return false;
    }
    config.oppositeShiftMode = val;
    saveToLocalStorage("oppositeShiftMode", nosave);
    ConfigEvent.dispatch("oppositeShiftMode", config.oppositeShiftMode);
    return true;
}
exports.setOppositeShiftMode = setOppositeShiftMode;
function setPageWidth(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("page width", val, [
        ["max", "100", "125", "150", "200"],
    ])) {
        return false;
    }
    config.pageWidth = val;
    $("#centerContent").removeClass("wide125");
    $("#centerContent").removeClass("wide150");
    $("#centerContent").removeClass("wide200");
    $("#centerContent").removeClass("widemax");
    if (val !== "100") {
        $("#centerContent").addClass("wide" + val);
    }
    saveToLocalStorage("pageWidth", nosave);
    ConfigEvent.dispatch("pageWidth", config.pageWidth);
    return true;
}
exports.setPageWidth = setPageWidth;
function setCaretStyle(caretStyle, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("caret style", caretStyle, [
        ["off", "default", "block", "outline", "underline", "carrot", "banana"],
    ])) {
        return false;
    }
    config.caretStyle = caretStyle;
    $("#caret").removeClass("off");
    $("#caret").removeClass("default");
    $("#caret").removeClass("underline");
    $("#caret").removeClass("outline");
    $("#caret").removeClass("block");
    $("#caret").removeClass("carrot");
    $("#caret").removeClass("banana");
    if (caretStyle == "off") {
        $("#caret").addClass("off");
    }
    else if (caretStyle == "default") {
        $("#caret").addClass("default");
    }
    else if (caretStyle == "block") {
        $("#caret").addClass("block");
    }
    else if (caretStyle == "outline") {
        $("#caret").addClass("outline");
    }
    else if (caretStyle == "underline") {
        $("#caret").addClass("underline");
    }
    else if (caretStyle == "carrot") {
        $("#caret").addClass("carrot");
    }
    else if (caretStyle == "banana") {
        $("#caret").addClass("banana");
    }
    saveToLocalStorage("caretStyle", nosave);
    ConfigEvent.dispatch("caretStyle", config.caretStyle);
    return true;
}
exports.setCaretStyle = setCaretStyle;
function setPaceCaretStyle(caretStyle, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("pace caret style", caretStyle, [
        ["off", "default", "block", "outline", "underline", "carrot", "banana"],
    ])) {
        return false;
    }
    config.paceCaretStyle = caretStyle;
    $("#paceCaret").removeClass("off");
    $("#paceCaret").removeClass("default");
    $("#paceCaret").removeClass("underline");
    $("#paceCaret").removeClass("outline");
    $("#paceCaret").removeClass("block");
    $("#paceCaret").removeClass("carrot");
    $("#paceCaret").removeClass("banana");
    if (caretStyle == "default") {
        $("#paceCaret").addClass("default");
    }
    else if (caretStyle == "block") {
        $("#paceCaret").addClass("block");
    }
    else if (caretStyle == "outline") {
        $("#paceCaret").addClass("outline");
    }
    else if (caretStyle == "underline") {
        $("#paceCaret").addClass("underline");
    }
    else if (caretStyle == "carrot") {
        $("#paceCaret").addClass("carrot");
    }
    else if (caretStyle == "banana") {
        $("#paceCaret").addClass("banana");
    }
    saveToLocalStorage("paceCaretStyle", nosave);
    ConfigEvent.dispatch("paceCaretStyle", config.paceCaretStyle);
    return true;
}
exports.setPaceCaretStyle = setPaceCaretStyle;
function setShowTimerProgress(timer, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("show timer progress", timer, ["boolean"])) {
        return false;
    }
    config.showTimerProgress = timer;
    saveToLocalStorage("showTimerProgress", nosave);
    ConfigEvent.dispatch("showTimerProgress", config.showTimerProgress);
    return true;
}
exports.setShowTimerProgress = setShowTimerProgress;
function setShowLiveWpm(live, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("show live WPM", live, ["boolean"]))
        return false;
    config.showLiveWpm = live;
    saveToLocalStorage("showLiveWpm", nosave);
    ConfigEvent.dispatch("showLiveWpm", config.showLiveWpm);
    return true;
}
exports.setShowLiveWpm = setShowLiveWpm;
function setShowLiveAcc(live, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("show live acc", live, ["boolean"]))
        return false;
    config.showLiveAcc = live;
    saveToLocalStorage("showLiveAcc", nosave);
    ConfigEvent.dispatch("showLiveAcc", config.showLiveAcc);
    return true;
}
exports.setShowLiveAcc = setShowLiveAcc;
function setShowLiveBurst(live, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("show live burst", live, ["boolean"]))
        return false;
    config.showLiveBurst = live;
    saveToLocalStorage("showLiveBurst", nosave);
    ConfigEvent.dispatch("showLiveBurst", config.showLiveBurst);
    return true;
}
exports.setShowLiveBurst = setShowLiveBurst;
function setShowAverage(value, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("show average", value, [["off", "wpm", "acc", "both"]])) {
        return false;
    }
    config.showAverage = value;
    saveToLocalStorage("showAverage", nosave);
    ConfigEvent.dispatch("showAverage", config.showAverage, nosave);
    return true;
}
exports.setShowAverage = setShowAverage;
function setHighlightMode(mode, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("highlight mode", mode, [["off", "letter", "word"]])) {
        return false;
    }
    if (mode === "word" &&
        (config.funbox === "nospace" ||
            config.funbox === "read_ahead" ||
            config.funbox === "read_ahead_easy" ||
            config.funbox === "read_ahead_hard" ||
            config.funbox === "tts" ||
            config.funbox === "arrows")) {
        Notifications.add("Can't use word highlight with this funbox", 0);
        return false;
    }
    config.highlightMode = mode;
    saveToLocalStorage("highlightMode", nosave);
    ConfigEvent.dispatch("highlightMode", config.highlightMode);
    return true;
}
exports.setHighlightMode = setHighlightMode;
function setHideExtraLetters(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("hide extra letters", val, ["boolean"]))
        return false;
    config.hideExtraLetters = val;
    saveToLocalStorage("hideExtraLetters", nosave);
    ConfigEvent.dispatch("hideExtraLetters", config.hideExtraLetters);
    return true;
}
exports.setHideExtraLetters = setHideExtraLetters;
function setTimerStyle(style, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("timer style", style, [["bar", "text", "mini"]])) {
        return false;
    }
    config.timerStyle = style;
    saveToLocalStorage("timerStyle", nosave);
    ConfigEvent.dispatch("timerStyle", config.timerStyle);
    return true;
}
exports.setTimerStyle = setTimerStyle;
function setTimerColor(color, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("timer color", color, [
        ["black", "sub", "text", "main"],
    ])) {
        return false;
    }
    config.timerColor = color;
    $("#timer").removeClass("timerSub");
    $("#timer").removeClass("timerText");
    $("#timer").removeClass("timerMain");
    $("#timerNumber").removeClass("timerSub");
    $("#timerNumber").removeClass("timerText");
    $("#timerNumber").removeClass("timerMain");
    $("#largeLiveWpmAndAcc").removeClass("timerSub");
    $("#largeLiveWpmAndAcc").removeClass("timerText");
    $("#largeLiveWpmAndAcc").removeClass("timerMain");
    $("#miniTimerAndLiveWpm").removeClass("timerSub");
    $("#miniTimerAndLiveWpm").removeClass("timerText");
    $("#miniTimerAndLiveWpm").removeClass("timerMain");
    if (color === "main") {
        $("#timer").addClass("timerMain");
        $("#timerNumber").addClass("timerMain");
        $("#largeLiveWpmAndAcc").addClass("timerMain");
        $("#miniTimerAndLiveWpm").addClass("timerMain");
    }
    else if (color === "sub") {
        $("#timer").addClass("timerSub");
        $("#timerNumber").addClass("timerSub");
        $("#largeLiveWpmAndAcc").addClass("timerSub");
        $("#miniTimerAndLiveWpm").addClass("timerSub");
    }
    else if (color === "text") {
        $("#timer").addClass("timerText");
        $("#timerNumber").addClass("timerText");
        $("#largeLiveWpmAndAcc").addClass("timerText");
        $("#miniTimerAndLiveWpm").addClass("timerText");
    }
    saveToLocalStorage("timerColor", nosave);
    ConfigEvent.dispatch("timerColor", config.timerColor);
    return true;
}
exports.setTimerColor = setTimerColor;
function setTimerOpacity(opacity, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("timer opacity", opacity, [
        ["0.25", "0.5", "0.75", "1"],
    ])) {
        return false;
    }
    config.timerOpacity = opacity;
    saveToLocalStorage("timerOpacity", nosave);
    ConfigEvent.dispatch("timerOpacity", config.timerOpacity);
    return true;
}
exports.setTimerOpacity = setTimerOpacity;
//key tips
function setKeyTips(keyTips, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("key tips", keyTips, ["boolean"]))
        return false;
    config.showKeyTips = keyTips;
    if (config.showKeyTips) {
        $("#bottom .keyTips").removeClass("hidden");
    }
    else {
        $("#bottom .keyTips").addClass("hidden");
    }
    saveToLocalStorage("showKeyTips", nosave);
    ConfigEvent.dispatch("showKeyTips", config.showKeyTips);
    return true;
}
exports.setKeyTips = setKeyTips;
//mode
function setTimeConfig(time, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("time", time, ["number"]))
        return false;
    const newTime = isNaN(time) || time < 0 ? default_config_1.default.time : time;
    $("#top .config .time .text-button").removeClass("active");
    const timeCustom = ![15, 30, 60, 120].includes(newTime) ? "custom" : newTime;
    config.time = newTime;
    $("#top .config .time .text-button[timeConfig='" + timeCustom + "']").addClass("active");
    saveToLocalStorage("time", nosave);
    ConfigEvent.dispatch("time", config.time);
    return true;
}
exports.setTimeConfig = setTimeConfig;
//quote length
function setQuoteLength(len, nosave, multipleMode) {
    if (!(0, config_validation_1.isConfigValueValid)("quote length", len, [
        [-2, -1, 0, 1, 2, 3],
        "numberArray",
    ])) {
        return false;
    }
    if (Array.isArray(len)) {
        //config load
        if (len.length === 1 && len[0] === -1)
            len = [1];
        config.quoteLength = len;
    }
    else {
        if (!Array.isArray(config.quoteLength))
            config.quoteLength = [];
        if (len === null || isNaN(len) || len < -2 || len > 3) {
            len = 1;
        }
        len = parseInt(len.toString());
        if (multipleMode) {
            if (!config.quoteLength.includes(len)) {
                config.quoteLength.push(len);
            }
            else {
                if (config.quoteLength.length > 1) {
                    config.quoteLength = config.quoteLength.filter((ql) => ql !== len);
                }
            }
        }
        else {
            config.quoteLength = [len];
        }
    }
    // if (!nosave) setMode("quote", nosave);
    $("#top .config .quoteLength .text-button").removeClass("active");
    config.quoteLength.forEach((ql) => {
        $("#top .config .quoteLength .text-button[quoteLength='" + ql + "']").addClass("active");
    });
    saveToLocalStorage("quoteLength", nosave);
    ConfigEvent.dispatch("quoteLength", config.quoteLength);
    return true;
}
exports.setQuoteLength = setQuoteLength;
function setWordCount(wordCount, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("words", wordCount, ["number"]))
        return false;
    const newWordCount = wordCount < 0 || wordCount > 100000 ? default_config_1.default.words : wordCount;
    $("#top .config .wordCount .text-button").removeClass("active");
    const wordCustom = ![10, 25, 50, 100, 200].includes(newWordCount)
        ? "custom"
        : newWordCount;
    config.words = newWordCount;
    $("#top .config .wordCount .text-button[wordCount='" + wordCustom + "']").addClass("active");
    saveToLocalStorage("words", nosave);
    ConfigEvent.dispatch("words", config.words);
    return true;
}
exports.setWordCount = setWordCount;
//caret
function setSmoothCaret(mode, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("smooth caret", mode, ["boolean"]))
        return false;
    config.smoothCaret = mode;
    if (mode) {
        $("#caret").css("animation-name", "caretFlashSmooth");
    }
    else {
        $("#caret").css("animation-name", "caretFlashHard");
    }
    saveToLocalStorage("smoothCaret", nosave);
    ConfigEvent.dispatch("smoothCaret", config.smoothCaret);
    return true;
}
exports.setSmoothCaret = setSmoothCaret;
function setStartGraphsAtZero(mode, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("start graphs at zero", mode, ["boolean"])) {
        return false;
    }
    config.startGraphsAtZero = mode;
    saveToLocalStorage("startGraphsAtZero", nosave);
    ConfigEvent.dispatch("startGraphsAtZero", config.startGraphsAtZero);
    return true;
}
exports.setStartGraphsAtZero = setStartGraphsAtZero;
//linescroll
function setSmoothLineScroll(mode, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("smooth line scroll", mode, ["boolean"])) {
        return false;
    }
    config.smoothLineScroll = mode;
    saveToLocalStorage("smoothLineScroll", nosave);
    ConfigEvent.dispatch("smoothLineScroll", config.smoothLineScroll);
    return true;
}
exports.setSmoothLineScroll = setSmoothLineScroll;
//quick tab
function setQuickTabMode(mode, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("quick tab mode", mode, ["boolean"]))
        return false;
    config.quickTab = mode;
    if (!config.quickTab) {
        $("#restartTestButton").removeClass("hidden");
        $("#restartTestButton").css("opacity", 1);
        $("#bottom .keyTips")
            .html(`<key>tab</key> and <key>enter</key> / <key>space</key> - restart test<br>
      <key>ctrl/cmd</key>+<key>shift</key>+<key>p</key> or <key>esc</key> - command line`);
    }
    else {
        $("#restartTestButton").addClass("hidden");
        $("#bottom .keyTips").html(`<key>tab</key> - restart test<br>
    <key>ctrl/cmd</key>+<key>shift</key>+<key>p</key> or <key>esc</key> - command line`);
    }
    saveToLocalStorage("quickTab", nosave);
    ConfigEvent.dispatch("quickTab", config.quickTab);
    return true;
}
exports.setQuickTabMode = setQuickTabMode;
function previewFontFamily(font) {
    if (!(0, config_validation_1.isConfigValueValid)("preview font family", font, ["string"])) {
        return false;
    }
    document.documentElement.style.setProperty("--font", '"' + font.replace(/_/g, " ") + '", "Roboto Mono"');
    return true;
}
exports.previewFontFamily = previewFontFamily;
//font family
function setFontFamily(font, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("font family", font, ["string"]))
        return false;
    if (font === "") {
        font = "roboto_mono";
        Notifications.add("Empty input received, reverted to the default font.", 0, 3, "Custom font");
    }
    if (!(0, config_validation_1.isConfigKeyValid)(font)) {
        Notifications.add(`Invalid font name value: "${font}".`, -1, 3, "Custom font");
        return false;
    }
    config.fontFamily = font;
    document.documentElement.style.setProperty("--font", `"${font.replace(/_/g, " ")}", "Roboto Mono"`);
    saveToLocalStorage("fontFamily", nosave);
    ConfigEvent.dispatch("fontFamily", config.fontFamily);
    return true;
}
exports.setFontFamily = setFontFamily;
//freedom
function setFreedomMode(freedom, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("freedom mode", freedom, ["boolean"]))
        return false;
    if (freedom == null) {
        freedom = false;
    }
    config.freedomMode = freedom;
    if (config.freedomMode && config.confidenceMode !== "off") {
        config.confidenceMode = "off";
    }
    saveToLocalStorage("freedomMode", nosave);
    ConfigEvent.dispatch("freedomMode", config.freedomMode);
    return true;
}
exports.setFreedomMode = setFreedomMode;
function setConfidenceMode(cm, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("confidence mode", cm, [["off", "on", "max"]])) {
        return false;
    }
    config.confidenceMode = cm;
    if (config.confidenceMode !== "off") {
        config.freedomMode = false;
        config.stopOnError = "off";
    }
    saveToLocalStorage("confidenceMode", nosave);
    ConfigEvent.dispatch("confidenceMode", config.confidenceMode, nosave);
    return true;
}
exports.setConfidenceMode = setConfidenceMode;
function setIndicateTypos(value, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("indicate typos", value, [["off", "below", "replace"]])) {
        return false;
    }
    config.indicateTypos = value;
    saveToLocalStorage("indicateTypos", nosave);
    ConfigEvent.dispatch("indicateTypos", config.indicateTypos);
    return true;
}
exports.setIndicateTypos = setIndicateTypos;
function setAutoSwitchTheme(boolean, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("auto switch theme", boolean, ["boolean"])) {
        return false;
    }
    boolean = boolean !== null && boolean !== void 0 ? boolean : default_config_1.default.autoSwitchTheme;
    config.autoSwitchTheme = boolean;
    saveToLocalStorage("autoSwitchTheme", nosave);
    ConfigEvent.dispatch("autoSwitchTheme", config.autoSwitchTheme);
    return true;
}
exports.setAutoSwitchTheme = setAutoSwitchTheme;
function setCustomTheme(boolean, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("custom theme", boolean, ["boolean"]))
        return false;
    config.customTheme = boolean;
    saveToLocalStorage("customTheme", nosave);
    ConfigEvent.dispatch("customTheme", config.customTheme);
    return true;
}
exports.setCustomTheme = setCustomTheme;
function setTheme(name, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("theme", name, ["string"]))
        return false;
    config.theme = name;
    setCustomTheme(false);
    saveToLocalStorage("theme", nosave);
    ConfigEvent.dispatch("theme", config.theme);
    return true;
}
exports.setTheme = setTheme;
function setThemeLight(name, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("theme light", name, ["string"]))
        return false;
    config.themeLight = name;
    saveToLocalStorage("themeLight", nosave);
    ConfigEvent.dispatch("themeLight", config.themeLight, nosave);
    return true;
}
exports.setThemeLight = setThemeLight;
function setThemeDark(name, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("theme dark", name, ["string"]))
        return false;
    config.themeDark = name;
    saveToLocalStorage("themeDark", nosave);
    ConfigEvent.dispatch("themeDark", config.themeDark, nosave);
    return true;
}
exports.setThemeDark = setThemeDark;
function setThemes(theme, customState, customThemeColors, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("themes", theme, ["string"]))
        return false;
    config.customThemeColors = customThemeColors;
    config.theme = theme;
    config.customTheme = customState;
    saveToLocalStorage("theme", nosave);
    ConfigEvent.dispatch("setThemes", customState);
    return true;
}
function setRandomTheme(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("random theme", val, [
        ["off", "on", "fav", "light", "dark", "custom"],
    ])) {
        return false;
    }
    if (val === "custom") {
        if (firebase_1.Auth.currentUser === null) {
            config.randomTheme = val;
            return false;
        }
        if (!DB.getSnapshot())
            return true;
        if (DB.getSnapshot().customThemes.length === 0) {
            Notifications.add("You need to create a custom theme first", 0);
            config.randomTheme = "off";
            return false;
        }
    }
    config.randomTheme = val;
    saveToLocalStorage("randomTheme", nosave);
    ConfigEvent.dispatch("randomTheme", config.randomTheme);
    return true;
}
exports.setRandomTheme = setRandomTheme;
function setBritishEnglish(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("british english", val, ["boolean"]))
        return false;
    if (!val) {
        val = false;
    }
    config.britishEnglish = val;
    saveToLocalStorage("britishEnglish", nosave);
    ConfigEvent.dispatch("britishEnglish", config.britishEnglish);
    return true;
}
exports.setBritishEnglish = setBritishEnglish;
function setLazyMode(val, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("lazy mode", val, ["boolean"]))
        return false;
    if (!val) {
        val = false;
    }
    config.lazyMode = val;
    saveToLocalStorage("lazyMode", nosave);
    ConfigEvent.dispatch("lazyMode", config.lazyMode, nosave);
    return true;
}
exports.setLazyMode = setLazyMode;
function setCustomThemeColors(colors, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("custom theme colors", colors, ["stringArray"])) {
        return false;
    }
    if (colors !== undefined) {
        config.customThemeColors = colors;
        // ThemeController.set("custom");
        // applyCustomThemeColors();
    }
    saveToLocalStorage("customThemeColors", nosave);
    ConfigEvent.dispatch("customThemeColors", config.customThemeColors, nosave);
    return true;
}
exports.setCustomThemeColors = setCustomThemeColors;
function setLanguage(language, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("language", language, ["string"]))
        return false;
    config.language = language;
    AnalyticsController.log("changedLanguage", { language });
    saveToLocalStorage("language", nosave);
    ConfigEvent.dispatch("language", config.language);
    return true;
}
exports.setLanguage = setLanguage;
function setMonkey(monkey, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("monkey", monkey, ["boolean"]))
        return false;
    config.monkey = monkey;
    saveToLocalStorage("monkey", nosave);
    ConfigEvent.dispatch("monkey", config.monkey);
    return true;
}
exports.setMonkey = setMonkey;
function setKeymapMode(mode, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("keymap mode", mode, [
        ["off", "static", "react", "next"],
    ])) {
        return false;
    }
    $(".active-key").removeClass("active-key");
    $(".keymap-key").attr("style", "");
    config.keymapMode = mode;
    saveToLocalStorage("keymapMode", nosave);
    ConfigEvent.dispatch("keymapMode", config.keymapMode, nosave);
    return true;
}
exports.setKeymapMode = setKeymapMode;
function setKeymapLegendStyle(style, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("keymap legend style", style, [
        ["lowercase", "uppercase", "blank", "dynamic"],
    ])) {
        return false;
    }
    // Remove existing styles
    const keymapLegendStyles = ["lowercase", "uppercase", "blank", "dynamic"];
    keymapLegendStyles.forEach((name) => {
        $(".keymapLegendStyle").removeClass(name);
    });
    style = style || "lowercase";
    // Mutate the keymap in the DOM, if it exists.
    // 1. Remove everything
    $(".keymap-key > .letter").css("display", "");
    $(".keymap-key > .letter").css("text-transform", "");
    // 2. Append special styles onto the DOM elements
    if (style === "uppercase") {
        $(".keymap-key > .letter").css("text-transform", "capitalize");
    }
    if (style === "blank") {
        $(".keymap-key > .letter").css("display", "none");
    }
    // Update and save to cookie for persistence
    $(".keymapLegendStyle").addClass(style);
    config.keymapLegendStyle = style;
    saveToLocalStorage("keymapLegendStyle", nosave);
    ConfigEvent.dispatch("keymapLegendStyle", config.keymapLegendStyle);
    return true;
}
exports.setKeymapLegendStyle = setKeymapLegendStyle;
function setKeymapStyle(style, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("keymap style", style, [
        ["staggered", "alice", "matrix", "split", "split_matrix"],
    ])) {
        return false;
    }
    style = style || "staggered";
    config.keymapStyle = style;
    saveToLocalStorage("keymapStyle", nosave);
    ConfigEvent.dispatch("keymapStyle", config.keymapStyle);
    return true;
}
exports.setKeymapStyle = setKeymapStyle;
function setKeymapLayout(layout, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("keymap layout", layout, ["string"]))
        return false;
    config.keymapLayout = layout;
    saveToLocalStorage("keymapLayout", nosave);
    ConfigEvent.dispatch("keymapLayout", config.keymapLayout);
    return true;
}
exports.setKeymapLayout = setKeymapLayout;
function setLayout(layout, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("layout", layout, ["string"]))
        return false;
    config.layout = layout;
    saveToLocalStorage("layout", nosave);
    ConfigEvent.dispatch("layout", config.layout, nosave);
    return true;
}
exports.setLayout = setLayout;
// export function setSavedLayout(layout: string, nosave?: boolean): boolean {
//   if (layout == null || layout == undefined) {
//     layout = "qwerty";
//   }
//   config.savedLayout = layout;
//   setLayout(layout, nosave);
//   return true;
// }
function setFontSize(fontSize, nosave) {
    fontSize = fontSize.toString(); //todo remove after around a week
    if (!(0, config_validation_1.isConfigValueValid)("font size", fontSize, [
        ["1", "125", "15", "2", "3", "4"],
    ])) {
        return false;
    }
    config.fontSize = fontSize;
    $("#words").removeClass("size125");
    $("#caret, #paceCaret").removeClass("size125");
    $("#words").removeClass("size15");
    $("#caret, #paceCaret").removeClass("size15");
    $("#words").removeClass("size2");
    $("#caret, #paceCaret").removeClass("size2");
    $("#words").removeClass("size3");
    $("#caret, #paceCaret").removeClass("size3");
    $("#words").removeClass("size35");
    $("#caret, #paceCaret").removeClass("size35");
    $("#words").removeClass("size4");
    $("#caret, #paceCaret").removeClass("size4");
    $("#miniTimerAndLiveWpm").removeClass("size125");
    $("#miniTimerAndLiveWpm").removeClass("size15");
    $("#miniTimerAndLiveWpm").removeClass("size2");
    $("#miniTimerAndLiveWpm").removeClass("size3");
    $("#miniTimerAndLiveWpm").removeClass("size35");
    $("#miniTimerAndLiveWpm").removeClass("size4");
    if (fontSize == "125") {
        $("#words").addClass("size125");
        $("#caret, #paceCaret").addClass("size125");
        $("#miniTimerAndLiveWpm").addClass("size125");
    }
    else if (fontSize == "15") {
        $("#words").addClass("size15");
        $("#caret, #paceCaret").addClass("size15");
        $("#miniTimerAndLiveWpm").addClass("size15");
    }
    else if (fontSize == "2") {
        $("#words").addClass("size2");
        $("#caret, #paceCaret").addClass("size2");
        $("#miniTimerAndLiveWpm").addClass("size2");
    }
    else if (fontSize == "3") {
        $("#words").addClass("size3");
        $("#caret, #paceCaret").addClass("size3");
        $("#miniTimerAndLiveWpm").addClass("size3");
    }
    else if (fontSize == "4") {
        $("#words").addClass("size4");
        $("#caret, #paceCaret").addClass("size4");
        $("#miniTimerAndLiveWpm").addClass("size4");
    }
    saveToLocalStorage("fontSize", nosave);
    ConfigEvent.dispatch("fontSize", config.fontSize);
    return true;
}
exports.setFontSize = setFontSize;
function setCustomBackground(value, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("custom background", value, ["string"]))
        return false;
    value = value.trim();
    if ((/(https|http):\/\/(www\.|).+\..+\/.+(\.png|\.gif|\.jpeg|\.jpg)/gi.test(value) &&
        !/[<>]/.test(value)) ||
        value == "") {
        config.customBackground = value;
        saveToLocalStorage("customBackground", nosave);
        ConfigEvent.dispatch("customBackground", config.customBackground);
    }
    else {
        Notifications.add("Invalid custom background URL", 0);
    }
    return true;
}
exports.setCustomBackground = setCustomBackground;
function setCustomLayoutfluid(value, nosave) {
    return __awaiter(this, void 0, void 0, function* () {
        const trimmed = value.trim();
        if (!(yield (0, config_validation_1.isConfigValueValidAsync)("layoutfluid", trimmed, ["layoutfluid"]))) {
            return false;
        }
        const customLayoutfluid = trimmed.replace(/ /g, "#");
        config.customLayoutfluid = customLayoutfluid;
        $(".pageSettings .section.customLayoutfluid input").val(customLayoutfluid.replace(/#/g, " "));
        saveToLocalStorage("customLayoutfluid", nosave);
        ConfigEvent.dispatch("customLayoutFluid", config.customLayoutfluid);
        return true;
    });
}
exports.setCustomLayoutfluid = setCustomLayoutfluid;
function setCustomBackgroundSize(value, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("custom background size", value, [
        ["max", "cover", "contain"],
    ])) {
        return false;
    }
    if (value != "cover" && value != "contain" && value != "max") {
        value = "cover";
    }
    config.customBackgroundSize = value;
    saveToLocalStorage("customBackgroundSize", nosave);
    ConfigEvent.dispatch("customBackgroundSize", config.customBackgroundSize);
    return true;
}
exports.setCustomBackgroundSize = setCustomBackgroundSize;
function setCustomBackgroundFilter(array, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("custom background filter", array, ["numberArray"])) {
        return false;
    }
    config.customBackgroundFilter = array;
    saveToLocalStorage("customBackgroundFilter", nosave);
    ConfigEvent.dispatch("customBackgroundFilter", config.customBackgroundFilter);
    return true;
}
exports.setCustomBackgroundFilter = setCustomBackgroundFilter;
function setMonkeyPowerLevel(level, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("monkey power level", level, [
        ["off", "1", "2", "3", "4"],
    ])) {
        return false;
    }
    if (!["off", "1", "2", "3", "4"].includes(level))
        level = "off";
    config.monkeyPowerLevel = level;
    saveToLocalStorage("monkeyPowerLevel", nosave);
    ConfigEvent.dispatch("monkeyPowerLevel", config.monkeyPowerLevel);
    return true;
}
exports.setMonkeyPowerLevel = setMonkeyPowerLevel;
function setBurstHeatmap(value, nosave) {
    if (!(0, config_validation_1.isConfigValueValid)("burst heatmap", value, ["boolean"]))
        return false;
    if (!value) {
        value = false;
    }
    config.burstHeatmap = value;
    saveToLocalStorage("burstHeatmap", nosave);
    ConfigEvent.dispatch("burstHeatmap", config.burstHeatmap);
    return true;
}
exports.setBurstHeatmap = setBurstHeatmap;
function apply(configToApply) {
    if (!configToApply)
        return;
    const configObj = configToApply;
    Object.keys(default_config_1.default).forEach((configKey) => {
        if (configObj[configKey] === undefined) {
            const newValue = default_config_1.default[configKey];
            configObj[configKey] = newValue;
        }
    });
    if (configObj !== undefined && configObj !== null) {
        setThemeLight(configObj.themeLight, true);
        setThemeDark(configObj.themeDark, true);
        setAutoSwitchTheme(configObj.autoSwitchTheme, true);
        setThemes(configObj.theme, configObj.customTheme, configObj.customThemeColors, true);
        setCustomLayoutfluid(configObj.customLayoutfluid, true);
        setCustomBackground(configObj.customBackground, true);
        setCustomBackgroundSize(configObj.customBackgroundSize, true);
        setCustomBackgroundFilter(configObj.customBackgroundFilter, true);
        setQuickTabMode(configObj.quickTab, true);
        setKeyTips(configObj.showKeyTips, true);
        setTimeConfig(configObj.time, true);
        setQuoteLength(configObj.quoteLength, true);
        setWordCount(configObj.words, true);
        setLanguage(configObj.language, true);
        setLayout(configObj.layout, true);
        setFontSize(configObj.fontSize, true);
        setFreedomMode(configObj.freedomMode, true);
        setCaretStyle(configObj.caretStyle, true);
        setPaceCaretStyle(configObj.paceCaretStyle, true);
        setDifficulty(configObj.difficulty, true);
        setBlindMode(configObj.blindMode, true);
        setQuickEnd(configObj.quickEnd, true);
        setFlipTestColors(configObj.flipTestColors, true);
        setColorfulMode(configObj.colorfulMode, true);
        setConfidenceMode(configObj.confidenceMode, true);
        setIndicateTypos(configObj.indicateTypos, true);
        setTimerStyle(configObj.timerStyle, true);
        setTimerColor(configObj.timerColor, true);
        setTimerOpacity(configObj.timerOpacity, true);
        setKeymapMode(configObj.keymapMode, true);
        setKeymapStyle(configObj.keymapStyle, true);
        setKeymapLegendStyle(configObj.keymapLegendStyle, true);
        setKeymapLayout(configObj.keymapLayout, true);
        setFontFamily(configObj.fontFamily, true);
        setSmoothCaret(configObj.smoothCaret, true);
        setSmoothLineScroll(configObj.smoothLineScroll, true);
        setShowLiveWpm(configObj.showLiveWpm, true);
        setShowLiveAcc(configObj.showLiveAcc, true);
        setShowLiveBurst(configObj.showLiveBurst, true);
        setShowTimerProgress(configObj.showTimerProgress, true);
        setAlwaysShowDecimalPlaces(configObj.alwaysShowDecimalPlaces, true);
        setAlwaysShowWordsHistory(configObj.alwaysShowWordsHistory, true);
        setSingleListCommandLine(configObj.singleListCommandLine, true);
        setCapsLockWarning(configObj.capsLockWarning, true);
        setPlaySoundOnError(configObj.playSoundOnError, true);
        setPlaySoundOnClick(configObj.playSoundOnClick, true);
        setSoundVolume(configObj.soundVolume, true);
        setStopOnError(configObj.stopOnError, true);
        setFavThemes(configObj.favThemes, true);
        setFunbox(configObj.funbox, true);
        setRandomTheme(configObj.randomTheme, true);
        setShowAllLines(configObj.showAllLines, true);
        setSwapEscAndTab(configObj.swapEscAndTab, true);
        setShowOutOfFocusWarning(configObj.showOutOfFocusWarning, true);
        setPaceCaret(configObj.paceCaret, true);
        setPaceCaretCustomSpeed(configObj.paceCaretCustomSpeed, true);
        setRepeatedPace(configObj.repeatedPace, true);
        setPageWidth(configObj.pageWidth, true);
        setChartAccuracy(configObj.chartAccuracy, true);
        setChartStyle(configObj.chartStyle, true);
        setMinBurst(configObj.minBurst, true);
        setMinBurstCustomSpeed(configObj.minBurstCustomSpeed, true);
        setMinWpm(configObj.minWpm, true);
        setMinWpmCustomSpeed(configObj.minWpmCustomSpeed, true);
        setMinAcc(configObj.minAcc, true);
        setMinAccCustom(configObj.minAccCustom, true);
        setNumbers(configObj.numbers, true);
        setPunctuation(configObj.punctuation, true);
        setHighlightMode(configObj.highlightMode, true);
        setAlwaysShowCPM(configObj.alwaysShowCPM, true);
        setHideExtraLetters(configObj.hideExtraLetters, true);
        setStartGraphsAtZero(configObj.startGraphsAtZero, true);
        setStrictSpace(configObj.strictSpace, true);
        setOppositeShiftMode(configObj.oppositeShiftMode, true);
        setMode(configObj.mode, true);
        setMonkey(configObj.monkey, true);
        setRepeatQuotes(configObj.repeatQuotes, true);
        setMonkeyPowerLevel(configObj.monkeyPowerLevel, true);
        setBurstHeatmap(configObj.burstHeatmap, true);
        setBritishEnglish(configObj.britishEnglish, true);
        setLazyMode(configObj.lazyMode, true);
        setShowAverage(configObj.showAverage, true);
        try {
            setEnableAds(configObj.enableAds, true);
            if (config.enableAds === "max" || config.enableAds === "on") {
                $("head").append(`
          <script
          src="https://hb.vntsm.com/v3/live/ad-manager.min.js"
          type="text/javascript"
          data-site-id="60b78af12119122b8958910f"
          data-mode="scan"
          id="adScript"
          async
          ></script>
        `);
                if (config.enableAds === "max") {
                    //
                    $("#ad_rich_media").removeClass("hidden");
                    $("#ad_rich_media").html(`<div class="vm-placement" data-id="60bf737ee04cb761c88aafb1" style="display:none"></div>`);
                }
                else {
                    $("#ad_rich_media").remove();
                }
                //<div class="vm-placement" data-id="60bf73dae04cb761c88aafb5"></div>
                $("#ad_footer").html(`<div class="vm-placement" data-id="60bf73dae04cb761c88aafb5"></div>`);
                $("#ad_footer").removeClass("hidden");
                // $("#ad_footer2").html(`<div class="vm-placement" data-id="60bf73e9e04cb761c88aafb7"></div>`);
                // $("#ad_footer2").removeClass("hidden");
                $("#ad_about1").html(`<div class="vm-placement" data-id="60bf73dae04cb761c88aafb5"></div>`);
                $("#ad_about1").removeClass("hidden");
                $("#ad_about2").html(`<div class="vm-placement" data-id="60bf73dae04cb761c88aafb5"></div>`);
                $("#ad_about2").removeClass("hidden");
                $("#ad_settings0").html(`<div class="vm-placement" data-id="60bf73dae04cb761c88aafb5"></div>`);
                $("#ad_settings0").removeClass("hidden");
                $("#ad_settings1").html(`<div class="vm-placement" data-id="60bf73dae04cb761c88aafb5"></div>`);
                $("#ad_settings1").removeClass("hidden");
                $("#ad_settings2").html(`<div class="vm-placement" data-id="60bf73dae04cb761c88aafb5"></div>`);
                $("#ad_settings2").removeClass("hidden");
                $("#ad_settings3").html(`<div class="vm-placement" data-id="60bf73dae04cb761c88aafb5"></div>`);
                $("#ad_settings3").removeClass("hidden");
                $("#ad_account").html(`<div class="vm-placement" data-id="60bf73dae04cb761c88aafb5"></div>`);
                $("#ad_account").removeClass("hidden");
                $(".footerads").removeClass("hidden");
            }
            else {
                $("#adScript").remove();
                $(".footerads").remove();
                $("#ad_left").remove();
                $("#ad_right").remove();
                $("#ad_footer").remove();
                $("#ad_footer2").remove();
                $("#ad_footer3").remove();
                $("#ad_settings0").remove();
                $("#ad_settings1").remove();
                $("#ad_settings2").remove();
                $("#ad_settings3").remove();
                $("#ad_account").remove();
                $("#ad_about1").remove();
                $("#ad_about2").remove();
            }
        }
        catch (e) {
            Notifications.add("Error initialising ads: " + e.message);
            console.log("error initialising ads " + e.message);
            $(".footerads").remove();
            $("#ad_left").remove();
            $("#ad_right").remove();
            $("#ad_footer").remove();
            $("#ad_footer2").remove();
            $("#ad_footer3").remove();
            $("#ad_settings0").remove();
            $("#ad_settings1").remove();
            $("#ad_settings2").remove();
            $("#ad_settings3").remove();
            $("#ad_account").remove();
            $("#ad_about1").remove();
            $("#ad_about2").remove();
        }
        ConfigEvent.dispatch("configApplied", undefined, undefined, undefined, config);
    }
}
exports.apply = apply;
function reset() {
    ConfigEvent.dispatch("fullConfigChange");
    apply(default_config_1.default);
    saveFullConfigToLocalStorage();
}
exports.reset = reset;
function loadFromLocalStorage() {
    console.log("loading localStorage config");
    const newConfigString = window.localStorage.getItem("config");
    let newConfig;
    if (newConfigString !== undefined &&
        newConfigString !== null &&
        newConfigString !== "") {
        try {
            newConfig = JSON.parse(newConfigString);
        }
        catch (e) {
            newConfig = {};
        }
        apply(newConfig);
        console.log("applying localStorage config");
        exports.localStorageConfig = newConfig;
        saveFullConfigToLocalStorage(true);
        console.log("saving localStorage config");
    }
    // TestLogic.restart(false, true);
    loadDone();
}
exports.loadFromLocalStorage = loadFromLocalStorage;
function getConfigChanges() {
    const configChanges = {};
    Object.keys(config)
        .filter((key) => {
        return config[key] != default_config_1.default[key];
    })
        .forEach((key) => {
        configChanges[key] = config[key];
    });
    return configChanges;
}
exports.getConfigChanges = getConfigChanges;
function setConfig(newConfig) {
    config = newConfig;
}
exports.setConfig = setConfig;
exports.loadPromise = new Promise((v) => {
    loadDone = v;
});
exports["default"] = config;


/***/ }),

/***/ "./src/scripts/constants/default-config.ts":
/*!*************************************************!*\
  !*** ./src/scripts/constants/default-config.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = {
    theme: "serika_dark",
    themeLight: "serika",
    themeDark: "serika_dark",
    autoSwitchTheme: false,
    customTheme: false,
    customThemeColors: [
        "#323437",
        "#e2b714",
        "#e2b714",
        "#646669",
        "#d1d0c5",
        "#ca4754",
        "#7e2a33",
        "#ca4754",
        "#7e2a33",
    ],
    favThemes: [],
    showKeyTips: true,
    showLiveWpm: false,
    showTimerProgress: true,
    smoothCaret: true,
    quickTab: false,
    punctuation: false,
    numbers: false,
    words: 50,
    time: 30,
    mode: "time",
    quoteLength: [1],
    language: "english",
    fontSize: "15",
    freedomMode: false,
    resultFilters: null,
    difficulty: "normal",
    blindMode: false,
    quickEnd: false,
    caretStyle: "default",
    paceCaretStyle: "default",
    flipTestColors: false,
    layout: "default",
    funbox: "none",
    confidenceMode: "off",
    indicateTypos: "off",
    timerStyle: "mini",
    colorfulMode: false,
    randomTheme: "off",
    timerColor: "main",
    timerOpacity: "1",
    stopOnError: "off",
    showAllLines: false,
    keymapMode: "off",
    keymapStyle: "staggered",
    keymapLegendStyle: "lowercase",
    keymapLayout: "overrideSync",
    fontFamily: "Roboto_Mono",
    smoothLineScroll: false,
    alwaysShowDecimalPlaces: false,
    alwaysShowWordsHistory: false,
    singleListCommandLine: "manual",
    capsLockWarning: true,
    playSoundOnError: false,
    playSoundOnClick: "off",
    soundVolume: "0.5",
    startGraphsAtZero: true,
    swapEscAndTab: false,
    showOutOfFocusWarning: true,
    paceCaret: "off",
    paceCaretCustomSpeed: 100,
    repeatedPace: true,
    pageWidth: "100",
    chartAccuracy: true,
    chartStyle: "line",
    minWpm: "off",
    minWpmCustomSpeed: 100,
    highlightMode: "letter",
    alwaysShowCPM: false,
    enableAds: "off",
    hideExtraLetters: false,
    strictSpace: false,
    minAcc: "off",
    minAccCustom: 90,
    showLiveAcc: false,
    showLiveBurst: false,
    monkey: false,
    repeatQuotes: "off",
    oppositeShiftMode: "off",
    customBackground: "",
    customBackgroundSize: "cover",
    customBackgroundFilter: [0, 1, 1, 1, 1],
    customLayoutfluid: "qwerty#dvorak#colemak",
    monkeyPowerLevel: "off",
    minBurst: "off",
    minBurstCustomSpeed: 100,
    burstHeatmap: false,
    britishEnglish: false,
    lazyMode: false,
    showAverage: "off",
};


/***/ }),

/***/ "./src/scripts/constants/default-snapshot.ts":
/*!***************************************************!*\
  !*** ./src/scripts/constants/default-snapshot.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defaultSnap = void 0;
exports.defaultSnap = {
    results: undefined,
    personalBests: {
        time: {},
        words: {},
        zen: { zen: [] },
        quote: { custom: [] },
        custom: { custom: [] },
    },
    name: "",
    customThemes: [],
    presets: [],
    tags: [],
    favouriteThemes: [],
    banned: undefined,
    verified: undefined,
    emailVerified: undefined,
    lbMemory: { time: { 15: { english: 0 }, 60: { english: 0 } } },
    globalStats: {
        time: 0,
        started: 0,
        completed: 0,
    },
    quoteRatings: undefined,
    quoteMod: false,
};


/***/ }),

/***/ "./src/scripts/constants/firebase-config.ts":
/*!**************************************************!*\
  !*** ./src/scripts/constants/firebase-config.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {


// To find your config, go to https://console.firebase.google.com/ and select your project
// Go to (top left) Settings > Project Settings > General
// scroll down to Your apps > Web Apps (if it doesnt exist, create one) > SDK setup and configuration > select npm
// your config should be visible there
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.firebaseConfig = void 0;
exports.firebaseConfig = {
    apiKey: "AIzaSyC8ZGlCnaYJYsz5bsMtmJGbu8QqtCVpM4g",
    authDomain: "monkeytype-d440a.firebaseapp.com",
    projectId: "monkeytype-d440a",
    storageBucket: "monkeytype-d440a.appspot.com",
    messagingSenderId: "409798745430",
    appId: "1:409798745430:web:6843557b36a25156370af7"
};


/***/ }),

/***/ "./src/scripts/controllers/account-controller.ts":
/*!*******************************************************!*\
  !*** ./src/scripts/controllers/account-controller.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.signOut = exports.addPasswordAuth = exports.removeGoogleAuth = exports.addGoogleAuth = exports.signInWithGoogle = exports.signIn = exports.getDataAndInit = exports.sendVerificationEmail = exports.gmailProvider = void 0;
const ape_1 = __importDefault(__webpack_require__(/*! ../ape */ "./src/scripts/ape/index.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const AccountButton = __importStar(__webpack_require__(/*! ../elements/account-button */ "./src/scripts/elements/account-button.ts"));
const Account = __importStar(__webpack_require__(/*! ../pages/account */ "./src/scripts/pages/account.ts"));
const VerificationController = __importStar(__webpack_require__(/*! ./verification-controller */ "./src/scripts/controllers/verification-controller.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const Settings = __importStar(__webpack_require__(/*! ../pages/settings */ "./src/scripts/pages/settings.ts"));
const AllTimeStats = __importStar(__webpack_require__(/*! ../account/all-time-stats */ "./src/scripts/account/all-time-stats.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const TestLogic = __importStar(__webpack_require__(/*! ../test/test-logic */ "./src/scripts/test/test-logic.ts"));
const PageController = __importStar(__webpack_require__(/*! ./page-controller */ "./src/scripts/controllers/page-controller.ts"));
const PSA = __importStar(__webpack_require__(/*! ../elements/psa */ "./src/scripts/elements/psa.ts"));
const Focus = __importStar(__webpack_require__(/*! ../test/focus */ "./src/scripts/test/focus.ts"));
const Loader = __importStar(__webpack_require__(/*! ../elements/loader */ "./src/scripts/elements/loader.ts"));
const PageTransition = __importStar(__webpack_require__(/*! ../states/page-transition */ "./src/scripts/states/page-transition.ts"));
const ActivePage = __importStar(__webpack_require__(/*! ../states/active-page */ "./src/scripts/states/active-page.ts"));
const TestActive = __importStar(__webpack_require__(/*! ../states/test-active */ "./src/scripts/states/test-active.ts"));
const LoadingPage = __importStar(__webpack_require__(/*! ../pages/loading */ "./src/scripts/pages/loading.ts"));
const ResultFilters = __importStar(__webpack_require__(/*! ../account/result-filters */ "./src/scripts/account/result-filters.ts"));
const PaceCaret = __importStar(__webpack_require__(/*! ../test/pace-caret */ "./src/scripts/test/pace-caret.ts"));
const CommandlineLists = __importStar(__webpack_require__(/*! ../elements/commandline-lists */ "./src/scripts/elements/commandline-lists.ts"));
const TagController = __importStar(__webpack_require__(/*! ./tag-controller */ "./src/scripts/controllers/tag-controller.ts"));
const ResultTagsPopup = __importStar(__webpack_require__(/*! ../popups/result-tags-popup */ "./src/scripts/popups/result-tags-popup.ts"));
const URLHandler = __importStar(__webpack_require__(/*! ../utils/url-handler */ "./src/scripts/utils/url-handler.ts"));
const auth_1 = __webpack_require__(/*! firebase/auth */ "./node_modules/firebase/auth/dist/index.esm.js");
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
const differenceInDays_1 = __importDefault(__webpack_require__(/*! date-fns/differenceInDays */ "./node_modules/date-fns/esm/differenceInDays/index.js"));
const default_snapshot_1 = __webpack_require__(/*! ../constants/default-snapshot */ "./src/scripts/constants/default-snapshot.ts");
exports.gmailProvider = new auth_1.GoogleAuthProvider();
function sendVerificationEmail() {
    Loader.show();
    const user = firebase_1.Auth.currentUser;
    if (user === null)
        return;
    (0, auth_1.sendEmailVerification)(user)
        .then(() => {
        Loader.hide();
        Notifications.add("Email sent to " + user.email, 4000);
    })
        .catch((e) => {
        Loader.hide();
        Notifications.add("Error: " + e.message, 3000);
        console.error(e.message);
    });
}
exports.sendVerificationEmail = sendVerificationEmail;
function getDataAndInit() {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            console.log("getting account data");
            if (ActivePage.get() === "loading") {
                LoadingPage.updateBar(90);
            }
            else {
                LoadingPage.updateBar(45);
            }
            LoadingPage.updateText("Downloading user data...");
            yield LoadingPage.showBar();
            yield DB.initSnapshot();
        }
        catch (error) {
            const e = error;
            AccountButton.loading(false);
            if (e.responseCode === 429) {
                Notifications.add("Doing so will save you bandwidth, make the next test be ready faster and will not sign you out (which could mean your new personal best would not save to your account).", 0, 0);
                Notifications.add("You will run into this error if you refresh the website to restart the test. It is NOT recommended to do that. Instead, use tab + enter or just tab (with quick tab mode enabled) to restart the test.", 0, 0);
            }
            const msg = e.message || e;
            Notifications.add("Failed to get user data: " + msg, -1);
            $("#top #menu .account").css("opacity", 1);
            if (ActivePage.get() === "loading")
                PageController.change("");
            return false;
        }
        if (ActivePage.get() == "loading") {
            LoadingPage.updateBar(100);
        }
        else {
            LoadingPage.updateBar(45);
        }
        LoadingPage.updateText("Applying settings...");
        const snapshot = DB.getSnapshot();
        $("#menu .icon-button.account .text").text(snapshot.name);
        ResultFilters.loadTags(snapshot.tags);
        Promise.all([Misc.getLanguageList(), Misc.getFunboxList()]).then((values) => {
            const [languages, funboxes] = values;
            languages.forEach((language) => {
                ResultFilters.defaultResultFilters.language[language] = true;
            });
            funboxes.forEach((funbox) => {
                ResultFilters.defaultResultFilters.funbox[funbox.name] = true;
            });
            // filters = defaultResultFilters;
            ResultFilters.load();
        });
        if (!snapshot.name) {
            //verify username
            //invalid, get new
            let nameGood = false;
            let name = "";
            while (!nameGood) {
                name =
                    (_a = prompt("Please provide a new username (cannot be longer than 16 characters, can only contain letters, numbers, underscores, dots and dashes):")) !== null && _a !== void 0 ? _a : "";
                if (!name) {
                    return false;
                }
                const response = yield ape_1.default.users.updateName(name);
                if (response.status !== 200) {
                    Notifications.add("Failed to update name: " + response.message, -1);
                    return false;
                }
                nameGood = true;
                Notifications.add("Name updated", 1);
                snapshot.name = name;
                DB.setSnapshot(snapshot);
                $("#menu .icon-button.account .text").text(name);
            }
        }
        if (!UpdateConfig.changedBeforeDb) {
            //config didnt change before db loaded
            if (UpdateConfig.localStorageConfig === null && snapshot.config) {
                console.log("no local config, applying db");
                AccountButton.loading(false);
                UpdateConfig.apply(snapshot.config);
                Settings.update();
                UpdateConfig.saveFullConfigToLocalStorage(true);
                TestLogic.restart(false, true);
            }
            else if (snapshot.config !== undefined) {
                //loading db config, keep for now
                let configsDifferent = false;
                Object.keys(config_1.default).forEach((ke) => {
                    var _a, _b;
                    const key = ke;
                    if (configsDifferent)
                        return;
                    try {
                        if (key !== "resultFilters") {
                            if (Array.isArray(config_1.default[key])) {
                                config_1.default[key].forEach((arrval, index) => {
                                    var _a;
                                    const arrayValue = ((_a = snapshot === null || snapshot === void 0 ? void 0 : snapshot.config) === null || _a === void 0 ? void 0 : _a[key])[index];
                                    if (arrval != arrayValue) {
                                        configsDifferent = true;
                                        console.log(`.config is different: ${arrval} != ${arrayValue}`);
                                    }
                                });
                            }
                            else {
                                if (config_1.default[key] != ((_a = snapshot === null || snapshot === void 0 ? void 0 : snapshot.config) === null || _a === void 0 ? void 0 : _a[key])) {
                                    configsDifferent = true;
                                    console.log(`..config is different ${key}: ${config_1.default[key]} != ${(_b = snapshot === null || snapshot === void 0 ? void 0 : snapshot.config) === null || _b === void 0 ? void 0 : _b[key]}`);
                                }
                            }
                        }
                    }
                    catch (e) {
                        console.log(e);
                        configsDifferent = true;
                        console.log(`...config is different`);
                    }
                });
                if (configsDifferent) {
                    console.log("configs are different, applying config from db");
                    AccountButton.loading(false);
                    UpdateConfig.apply(snapshot.config);
                    Settings.update();
                    UpdateConfig.saveFullConfigToLocalStorage(true);
                    if (ActivePage.get() == "test") {
                        TestLogic.restart(false, true);
                    }
                    DB.saveConfig(config_1.default);
                }
            }
            UpdateConfig.setDbConfigLoaded(true);
        }
        else {
            console.log("config changed before db");
            AccountButton.loading(false);
        }
        if (config_1.default.paceCaret === "pb" || config_1.default.paceCaret === "average") {
            if (!TestActive.get()) {
                PaceCaret.init();
            }
        }
        AccountButton.loading(false);
        ResultFilters.updateTags();
        CommandlineLists.updateTagCommands();
        TagController.loadActiveFromLocalStorage();
        ResultTagsPopup.updateButtons();
        Settings.showAccountSection();
        PageTransition.set(false);
        console.log("account loading finished");
        return true;
    });
}
exports.getDataAndInit = getDataAndInit;
function loadUser(user) {
    return __awaiter(this, void 0, void 0, function* () {
        // User is signed in.
        $(".pageAccount .content p.accountVerificatinNotice").remove();
        if (user.emailVerified === false) {
            $(".pageAccount .content").prepend(`<p class="accountVerificatinNotice" style="text-align:center">Your account is not verified. <a class="sendVerificationEmail">Send the verification email again</a>.`);
        }
        PageTransition.set(false);
        AccountButton.update();
        AccountButton.loading(true);
        if ((yield getDataAndInit()) === false) {
            signOut();
        }
        // var displayName = user.displayName;
        // var email = user.email;
        // var emailVerified = user.emailVerified;
        // var photoURL = user.photoURL;
        // var isAnonymous = user.isAnonymous;
        // var uid = user.uid;
        // var providerData = user.providerData;
        $(".pageLogin .preloader").addClass("hidden");
        // showFavouriteThemesAtTheTop();
        let text = "Account created on " + user.metadata.creationTime;
        const creationDate = new Date(user.metadata.creationTime);
        const diffDays = (0, differenceInDays_1.default)(new Date(), creationDate);
        text += ` (${diffDays} day${diffDays != 1 ? "s" : ""} ago)`;
        $(".pageAccount .group.createdDate").text(text);
        if (VerificationController.data !== null) {
            VerificationController.verify(user.uid);
        }
    });
}
const authListener = firebase_1.Auth.onAuthStateChanged(function (user) {
    return __awaiter(this, void 0, void 0, function* () {
        // await UpdateConfig.loadPromise;
        console.log(`auth state changed, user ${user ? true : false}`);
        if (user) {
            yield loadUser(user);
        }
        else {
            if (window.location.pathname == "/account") {
                window.history.replaceState("", "", "/login");
            }
            PageTransition.set(false);
        }
        if (user) {
            if (window.location.pathname == "/login") {
                PageController.change("account");
            }
            else if (window.location.pathname != "/account") {
                PageController.change();
                setTimeout(() => {
                    Focus.set(false);
                }, 125 / 2);
            }
            else {
                Account.update();
                // SignOutButton.show();
            }
        }
        else {
            PageController.change();
            setTimeout(() => {
                Focus.set(false);
            }, 125 / 2);
        }
        URLHandler.loadCustomThemeFromUrl();
        if (/challenge_.+/g.test(window.location.pathname)) {
            Notifications.add("Challenge links temporarily disabled. Please use the command line to load the challenge manually", 0, 7);
            return;
            // Notifications.add("Loading challenge", 0);
            // let challengeName = window.location.pathname.split("_")[1];
            // setTimeout(() => {
            //   ChallengeController.setup(challengeName);
            // }, 1000);
        }
        PSA.show();
    });
});
function signIn() {
    UpdateConfig.setChangedBeforeDb(false);
    authListener();
    $(".pageLogin .preloader").removeClass("hidden");
    $(".pageLogin .button").addClass("disabled");
    const email = $(".pageLogin .login input")[0].value;
    const password = $(".pageLogin .login input")[1].value;
    const persistence = $(".pageLogin .login #rememberMe input").prop("checked")
        ? auth_1.browserLocalPersistence
        : auth_1.browserSessionPersistence;
    (0, auth_1.setPersistence)(firebase_1.Auth, persistence).then(function () {
        return (0, auth_1.signInWithEmailAndPassword)(firebase_1.Auth, email, password)
            .then((e) => __awaiter(this, void 0, void 0, function* () {
            yield loadUser(e.user);
            PageController.change("account");
            if (TestLogic.notSignedInLastResult !== null) {
                TestLogic.setNotSignedInUid(e.user.uid);
                const response = yield ape_1.default.results.save(TestLogic.notSignedInLastResult);
                if (response.status !== 200) {
                    return Notifications.add("Failed to save last result: " + response.message, -1);
                }
                TestLogic.clearNotSignedInResult();
                Notifications.add("Last test result saved", 1);
            }
            //TODO: redirect user to relevant page
        }))
            .catch(function (error) {
            let message = error.message;
            if (error.code === "auth/wrong-password") {
                message = "Incorrect password.";
            }
            else if (error.code === "auth/user-not-found") {
                message = "User not found.";
            }
            Notifications.add(message, -1);
            $(".pageLogin .preloader").addClass("hidden");
            $(".pageLogin .button").removeClass("disabled");
        });
    });
}
exports.signIn = signIn;
function signInWithGoogle() {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        UpdateConfig.setChangedBeforeDb(false);
        $(".pageLogin .preloader").removeClass("hidden");
        $(".pageLogin .button").addClass("disabled");
        authListener();
        let signedInUser;
        try {
            const persistence = $(".pageLogin .login #rememberMe input").prop("checked")
                ? auth_1.browserLocalPersistence
                : auth_1.browserSessionPersistence;
            yield (0, auth_1.setPersistence)(firebase_1.Auth, persistence);
            signedInUser = yield (0, auth_1.signInWithPopup)(firebase_1.Auth, exports.gmailProvider);
            if ((_a = (0, auth_1.getAdditionalUserInfo)(signedInUser)) === null || _a === void 0 ? void 0 : _a.isNewUser) {
                //ask for username
                let nameGood = false;
                let name = "";
                while (!nameGood) {
                    name =
                        prompt("Please provide a new username (cannot be longer than 16 characters, can only contain letters, numbers, underscores, dots and dashes):") || "";
                    if (!name) {
                        signOut();
                        $(".pageLogin .preloader").addClass("hidden");
                        return;
                    }
                    const response = yield ape_1.default.users.getNameAvailability(name);
                    if (response.status !== 200) {
                        return Notifications.add("Failed to check name: " + response.message, -1);
                    }
                    nameGood = true;
                }
                //create database object for the new user
                // try {
                const response = yield ape_1.default.users.create(name);
                if (response.status !== 200) {
                    throw response;
                }
                // } catch (e) {
                //   let msg = e?.response?.data?.message ?? e.message;
                //   Notifications.add("Failed to create account: " + msg, -1);
                //   return;
                // }
                if (response.status === 200) {
                    yield (0, auth_1.updateProfile)(signedInUser.user, { displayName: name });
                    yield (0, auth_1.sendEmailVerification)(signedInUser.user);
                    AllTimeStats.clear();
                    Notifications.add("Account created", 1, 3);
                    $("#menu .icon-button.account .text").text(name);
                    $(".pageLogin .button").removeClass("disabled");
                    $(".pageLogin .preloader").addClass("hidden");
                    yield loadUser(signedInUser.user);
                    PageController.change("account");
                    if (TestLogic.notSignedInLastResult !== null) {
                        TestLogic.setNotSignedInUid(signedInUser.user.uid);
                        const resultsSaveResponse = yield ape_1.default.results.save(TestLogic.notSignedInLastResult);
                        if (resultsSaveResponse.status === 200) {
                            const result = TestLogic.notSignedInLastResult;
                            DB.saveLocalResult(result);
                            DB.updateLocalStats({
                                time: result.testDuration +
                                    result.incompleteTestSeconds -
                                    result.afkDuration,
                                started: 1,
                            });
                        }
                    }
                }
            }
            else {
                yield loadUser(signedInUser.user);
                PageController.change("account");
            }
        }
        catch (e) {
            console.log(e);
            const message = Misc.createErrorMessage(e, "Failed to sign in with Google");
            Notifications.add(message, -1);
            $(".pageLogin .preloader").addClass("hidden");
            $(".pageLogin .button").removeClass("disabled");
            if (signedInUser && ((_b = (0, auth_1.getAdditionalUserInfo)(signedInUser)) === null || _b === void 0 ? void 0 : _b.isNewUser)) {
                yield ape_1.default.users.delete();
                yield signedInUser.user.delete();
            }
            signOut();
            return;
        }
    });
}
exports.signInWithGoogle = signInWithGoogle;
function addGoogleAuth() {
    return __awaiter(this, void 0, void 0, function* () {
        Loader.show();
        if (firebase_1.Auth.currentUser === null)
            return;
        (0, auth_1.linkWithPopup)(firebase_1.Auth.currentUser, exports.gmailProvider)
            .then(function () {
            Loader.hide();
            Notifications.add("Google authentication added", 1);
            Settings.updateAuthSections();
        })
            .catch(function (error) {
            Loader.hide();
            Notifications.add("Failed to add Google authenication: " + error.message, -1);
        });
    });
}
exports.addGoogleAuth = addGoogleAuth;
function removeGoogleAuth() {
    return __awaiter(this, void 0, void 0, function* () {
        const user = firebase_1.Auth.currentUser;
        if (user === null)
            return;
        if (user.providerData.find((provider) => provider.providerId === "password")) {
            Loader.show();
            try {
                yield (0, auth_1.reauthenticateWithPopup)(user, exports.gmailProvider);
            }
            catch (e) {
                Loader.hide();
                const message = Misc.createErrorMessage(e, "Failed to reauthenticate");
                return Notifications.add(message, -1);
            }
            (0, auth_1.unlink)(user, "google.com")
                .then(() => {
                Notifications.add("Google authentication removed", 1);
                Loader.hide();
                Settings.updateAuthSections();
            })
                .catch((error) => {
                Loader.hide();
                Notifications.add("Failed to remove Google authentication: " + error.message, -1);
            });
        }
        else {
            Notifications.add("Password authentication needs to be enabled to remove Google authentication", -1);
        }
    });
}
exports.removeGoogleAuth = removeGoogleAuth;
function addPasswordAuth(email, password) {
    return __awaiter(this, void 0, void 0, function* () {
        Loader.show();
        const user = firebase_1.Auth.currentUser;
        if (user === null)
            return;
        if (user.providerData.find((provider) => provider.providerId === "google.com")) {
            try {
                yield (0, auth_1.reauthenticateWithPopup)(user, exports.gmailProvider);
            }
            catch (e) {
                Loader.hide();
                const message = Misc.createErrorMessage(e, "Failed to reauthenticate");
                return Notifications.add(message, -1);
            }
        }
        const credential = auth_1.EmailAuthProvider.credential(email, password);
        (0, auth_1.linkWithCredential)(user, credential)
            .then(function () {
            Loader.hide();
            Notifications.add("Password authenication added", 1);
            Settings.updateAuthSections();
        })
            .catch(function (error) {
            Loader.hide();
            Notifications.add("Failed to add password authenication: " + error.message, -1);
        });
    });
}
exports.addPasswordAuth = addPasswordAuth;
function signOut() {
    firebase_1.Auth.signOut()
        .then(function () {
        Notifications.add("Signed out", 0, 2);
        AllTimeStats.clear();
        Settings.hideAccountSection();
        AccountButton.update();
        PageController.change("login");
        DB.setSnapshot(default_snapshot_1.defaultSnap);
        $(".pageLogin .button").removeClass("disabled");
    })
        .catch(function (error) {
        Notifications.add(error.message, -1);
    });
}
exports.signOut = signOut;
function signUp() {
    return __awaiter(this, void 0, void 0, function* () {
        $(".pageLogin .button").addClass("disabled");
        $(".pageLogin .preloader").removeClass("hidden");
        const nname = $(".pageLogin .register input")[0].value;
        const email = $(".pageLogin .register input")[1].value;
        const emailVerify = $(".pageLogin .register input")[2]
            .value;
        const password = $(".pageLogin .register input")[3]
            .value;
        const passwordVerify = $(".pageLogin .register input")[4].value;
        if (email !== emailVerify) {
            Notifications.add("Emails do not match", 0, 3);
            $(".pageLogin .preloader").addClass("hidden");
            $(".pageLogin .button").removeClass("disabled");
            return;
        }
        if (password !== passwordVerify) {
            Notifications.add("Passwords do not match", 0, 3);
            $(".pageLogin .preloader").addClass("hidden");
            $(".pageLogin .button").removeClass("disabled");
            return;
        }
        const response = yield ape_1.default.users.getNameAvailability(nname);
        if (response.status !== 200) {
            Notifications.add(response.message, -1);
            $(".pageLogin .preloader").addClass("hidden");
            $(".pageLogin .button").removeClass("disabled");
            return;
        }
        authListener();
        let createdAuthUser;
        try {
            createdAuthUser = yield (0, auth_1.createUserWithEmailAndPassword)(firebase_1.Auth, email, password);
            const signInResponse = yield ape_1.default.users.create(nname, email, createdAuthUser.user.uid);
            if (signInResponse.status !== 200) {
                throw signInResponse;
            }
            yield (0, auth_1.updateProfile)(createdAuthUser.user, { displayName: nname });
            yield (0, auth_1.sendEmailVerification)(createdAuthUser.user);
            AllTimeStats.clear();
            $("#menu .icon-button.account .text").text(nname);
            $(".pageLogin .button").removeClass("disabled");
            $(".pageLogin .preloader").addClass("hidden");
            yield loadUser(createdAuthUser.user);
            if (TestLogic.notSignedInLastResult !== null) {
                TestLogic.setNotSignedInUid(createdAuthUser.user.uid);
                const response = yield ape_1.default.results.save(TestLogic.notSignedInLastResult);
                if (response.status === 200) {
                    const result = TestLogic.notSignedInLastResult;
                    DB.saveLocalResult(result);
                    DB.updateLocalStats({
                        time: result.testDuration +
                            result.incompleteTestSeconds -
                            result.afkDuration,
                        started: 1,
                    });
                }
            }
            PageController.change("account");
            Notifications.add("Account created", 1, 3);
        }
        catch (e) {
            //make sure to do clean up here
            if (createdAuthUser) {
                yield ape_1.default.users.delete();
                yield createdAuthUser.user.delete();
            }
            console.log(e);
            const message = Misc.createErrorMessage(e, "Failed to create account");
            Notifications.add(message, -1);
            $(".pageLogin .preloader").addClass("hidden");
            $(".pageLogin .button").removeClass("disabled");
            signOut();
            return;
        }
    });
}
$(".pageLogin #forgotPasswordButton").on("click", () => {
    const emailField = $(".pageLogin .login input")[0].value || "";
    const email = prompt("Email address", emailField);
    if (email) {
        (0, auth_1.sendPasswordResetEmail)(firebase_1.Auth, email)
            .then(function () {
            // Email sent.
            Notifications.add("Email sent", 1, 2);
        })
            .catch(function (error) {
            // An error happened.
            Notifications.add(error.message, -1);
        });
    }
});
$(".pageLogin .login input").keyup((e) => {
    if (e.key === "Enter") {
        UpdateConfig.setChangedBeforeDb(false);
        signIn();
    }
});
$(".pageLogin .login .button.signIn").on("click", () => {
    UpdateConfig.setChangedBeforeDb(false);
    signIn();
});
$(".pageLogin .login .button.signInWithGoogle").on("click", () => {
    UpdateConfig.setChangedBeforeDb(false);
    signInWithGoogle();
});
// $(".pageLogin .login .button.signInWithGitHub").on("click",(e) => {
// UpdateConfig.setChangedBeforeDb(false);
// signInWithGitHub();
// });
$(".signOut").on("click", () => {
    signOut();
});
$(".pageLogin .register input").keyup((e) => {
    if ($(".pageLogin .register .button").hasClass("disabled"))
        return;
    if (e.key === "Enter") {
        signUp();
    }
});
$(".pageLogin .register .button").on("click", () => {
    if ($(".pageLogin .register .button").hasClass("disabled"))
        return;
    signUp();
});
$(".pageSettings #addGoogleAuth").on("click", () => __awaiter(void 0, void 0, void 0, function* () {
    addGoogleAuth();
}));
$(".pageSettings #removeGoogleAuth").on("click", () => {
    removeGoogleAuth();
});
$(document).on("click", ".pageAccount .sendVerificationEmail", () => {
    sendVerificationEmail();
});


/***/ }),

/***/ "./src/scripts/controllers/analytics-controller.ts":
/*!*********************************************************!*\
  !*** ./src/scripts/controllers/analytics-controller.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.log = void 0;
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
const analytics_1 = __webpack_require__(/*! firebase/analytics */ "./node_modules/firebase/analytics/dist/index.esm.js");
function log(eventName, params) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            (0, analytics_1.logEvent)(firebase_1.Analytics, eventName, params);
        }
        catch (e) {
            console.log("Analytics unavailable");
        }
    });
}
exports.log = log;


/***/ }),

/***/ "./src/scripts/controllers/challenge-controller.ts":
/*!*********************************************************!*\
  !*** ./src/scripts/controllers/challenge-controller.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setup = exports.verify = exports.clearActive = void 0;
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const ManualRestart = __importStar(__webpack_require__(/*! ../test/manual-restart-tracker */ "./src/scripts/test/manual-restart-tracker.ts"));
const CustomText = __importStar(__webpack_require__(/*! ../test/custom-text */ "./src/scripts/test/custom-text.ts"));
const Funbox = __importStar(__webpack_require__(/*! ../test/funbox */ "./src/scripts/test/funbox.ts"));
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const TestUI = __importStar(__webpack_require__(/*! ../test/test-ui */ "./src/scripts/test/test-ui.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const TestState = __importStar(__webpack_require__(/*! ../test/test-state */ "./src/scripts/test/test-state.ts"));
let challengeLoading = false;
function clearActive() {
    if (TestState.activeChallenge &&
        !challengeLoading &&
        !TestUI.testRestarting) {
        Notifications.add("Challenge cleared", 0);
        TestState.setActiveChallenge(null);
    }
}
exports.clearActive = clearActive;
function verify(result) {
    try {
        if (TestState.activeChallenge) {
            const afk = (result.afkDuration / result.testDuration) * 100;
            if (afk > 10) {
                Notifications.add(`Challenge failed: AFK time is greater than 10%`, 0);
                return null;
            }
            if (!TestState.activeChallenge.requirements) {
                Notifications.add(`${TestState.activeChallenge.display} challenge passed!`, 1);
                return TestState.activeChallenge.name;
            }
            else {
                let requirementsMet = true;
                const failReasons = [];
                for (const requirementType in TestState.activeChallenge.requirements) {
                    if (requirementsMet == false)
                        return null;
                    const requirementValue = TestState.activeChallenge.requirements[requirementType];
                    if (requirementType == "wpm") {
                        const wpmMode = Object.keys(requirementValue)[0];
                        if (wpmMode == "exact") {
                            if (Math.round(result.wpm) != requirementValue["exact"]) {
                                requirementsMet = false;
                                failReasons.push(`WPM not ${requirementValue["exact"]}`);
                            }
                        }
                        else if (wpmMode == "min") {
                            if (result.wpm < requirementValue["min"]) {
                                requirementsMet = false;
                                failReasons.push(`WPM below ${requirementValue["min"]}`);
                            }
                        }
                    }
                    else if (requirementType == "acc") {
                        const accMode = Object.keys(requirementValue)[0];
                        if (accMode == "exact") {
                            if (result.acc != requirementValue["exact"]) {
                                requirementsMet = false;
                                failReasons.push(`Accuracy not ${requirementValue["exact"]}`);
                            }
                        }
                        else if (accMode == "min") {
                            if (result.acc < requirementValue["min"]) {
                                requirementsMet = false;
                                failReasons.push(`Accuracy below ${requirementValue["min"]}`);
                            }
                        }
                    }
                    else if (requirementType == "afk") {
                        const afkMode = Object.keys(requirementValue)[0];
                        if (afkMode == "max") {
                            if (Math.round(afk) > requirementValue["max"]) {
                                requirementsMet = false;
                                failReasons.push(`AFK percentage above ${requirementValue["max"]}`);
                            }
                        }
                    }
                    else if (requirementType == "time") {
                        const timeMode = Object.keys(requirementValue)[0];
                        if (timeMode == "min") {
                            if (Math.round(result.testDuration) < requirementValue["min"]) {
                                requirementsMet = false;
                                failReasons.push(`Test time below ${requirementValue["min"]}`);
                            }
                        }
                    }
                    else if (requirementType == "funbox") {
                        const funboxMode = requirementValue["exact"];
                        if (funboxMode != result.funbox) {
                            requirementsMet = false;
                            failReasons.push(`${funboxMode} funbox not active`);
                        }
                    }
                    else if (requirementType == "raw") {
                        const rawMode = Object.keys(requirementValue)[0];
                        if (rawMode == "exact") {
                            if (Math.round(result.rawWpm) != requirementValue["exact"]) {
                                requirementsMet = false;
                                failReasons.push(`Raw WPM not ${requirementValue["exact"]}`);
                            }
                        }
                    }
                    else if (requirementType == "con") {
                        const conMode = Object.keys(requirementValue)[0];
                        if (conMode == "exact") {
                            if (Math.round(result.consistency) != requirementValue["exact"]) {
                                requirementsMet = false;
                                failReasons.push(`Consistency not ${requirementValue["exact"]}`);
                            }
                        }
                    }
                    else if (requirementType == "config") {
                        for (const configKey in requirementValue) {
                            const configValue = requirementValue[configKey];
                            if (config_1.default[configKey] != configValue) {
                                requirementsMet = false;
                                failReasons.push(`${configKey} not set to ${configValue}`);
                            }
                        }
                    }
                }
                if (requirementsMet) {
                    if (TestState.activeChallenge.autoRole) {
                        Notifications.add("You will receive a role shortly. Please don't post a screenshot in challenge submissions.", 1, 5);
                    }
                    Notifications.add(`${TestState.activeChallenge.display} challenge passed!`, 1);
                    return TestState.activeChallenge.name;
                }
                else {
                    Notifications.add(`${TestState.activeChallenge.display} challenge failed: ${failReasons.join(", ")}`, 0);
                    return null;
                }
            }
        }
        else {
            return null;
        }
    }
    catch (e) {
        console.error(e);
        Notifications.add(`Something went wrong when verifying challenge: ${e.message}`, 0);
        return null;
    }
}
exports.verify = verify;
function setup(challengeName) {
    return __awaiter(this, void 0, void 0, function* () {
        challengeLoading = true;
        UpdateConfig.setFunbox("none");
        const list = yield Misc.getChallengeList();
        const challenge = list.filter((c) => c.name === challengeName)[0];
        let notitext;
        try {
            if (challenge === undefined) {
                Notifications.add("Challenge not found", 0);
                ManualRestart.set();
                setTimeout(() => {
                    $("#top .config").removeClass("hidden");
                    $(".page.pageTest").removeClass("hidden");
                }, 250);
                return false;
            }
            if (challenge.type === "customTime") {
                UpdateConfig.setTimeConfig(challenge.parameters[0], true);
                UpdateConfig.setMode("time", true);
                UpdateConfig.setDifficulty("normal", true);
                if (challenge.name === "englishMaster") {
                    UpdateConfig.setLanguage("english_10k", true);
                    UpdateConfig.setNumbers(true, true);
                    UpdateConfig.setPunctuation(true, true);
                }
            }
            else if (challenge.type === "customWords") {
                UpdateConfig.setWordCount(challenge.parameters[0], true);
                UpdateConfig.setMode("words", true);
                UpdateConfig.setDifficulty("normal", true);
            }
            else if (challenge.type === "customText") {
                CustomText.setText(challenge.parameters[0].split(" "));
                CustomText.setIsTimeRandom(false);
                CustomText.setIsWordRandom(challenge.parameters[1]);
                CustomText.setWord(challenge.parameters[2]);
                CustomText.setTime(-1);
                UpdateConfig.setMode("custom", true);
                UpdateConfig.setDifficulty("normal", true);
            }
            else if (challenge.type === "script") {
                const response = yield fetch("/challenges/" + challenge.parameters[0]);
                const scriptdata = yield response.text();
                let text = scriptdata.trim();
                text = text.replace(/[\n\r\t ]/gm, " ");
                text = text.replace(/ +/gm, " ");
                CustomText.setText(text.split(" "));
                CustomText.setIsWordRandom(false);
                UpdateConfig.setMode("custom", true);
                UpdateConfig.setDifficulty("normal", true);
                if (challenge.parameters[1] != null) {
                    UpdateConfig.setTheme(challenge.parameters[1]);
                }
                if (challenge.parameters[2] != null) {
                    Funbox.activate(challenge.parameters[2]);
                }
            }
            else if (challenge.type === "accuracy") {
                UpdateConfig.setTimeConfig(0, true);
                UpdateConfig.setMode("time", true);
                UpdateConfig.setDifficulty("master", true);
            }
            else if (challenge.type === "funbox") {
                UpdateConfig.setFunbox(challenge.parameters[0], true);
                UpdateConfig.setDifficulty("normal", true);
                if (challenge.parameters[1] === "words") {
                    UpdateConfig.setWordCount(challenge.parameters[2], true);
                }
                else if (challenge.parameters[1] === "time") {
                    UpdateConfig.setTimeConfig(challenge.parameters[2], true);
                }
                UpdateConfig.setMode(challenge.parameters[1], true);
                if (challenge.parameters[3] !== undefined) {
                    UpdateConfig.setDifficulty(challenge.parameters[3], true);
                }
            }
            else if (challenge.type === "special") {
                if (challenge.name === "semimak") {
                    // so can you make a link that sets up 120s, 10k, punct, stop on word, and semimak as the layout?
                    UpdateConfig.setMode("time", true);
                    UpdateConfig.setTimeConfig(120, true);
                    UpdateConfig.setLanguage("english_10k", true);
                    UpdateConfig.setPunctuation(true, true);
                    UpdateConfig.setStopOnError("word", true);
                    UpdateConfig.setLayout("semimak", true);
                    UpdateConfig.setKeymapLayout("overrideSync", true);
                    UpdateConfig.setKeymapMode("static", true);
                }
            }
            ManualRestart.set();
            notitext = challenge.message;
            $("#top .config").removeClass("hidden");
            $(".page.pageTest").removeClass("hidden");
            if (notitext === undefined) {
                Notifications.add(`Challenge '${challenge.display}' loaded.`, 0);
            }
            else {
                Notifications.add("Challenge loaded. " + notitext, 0);
            }
            TestState.setActiveChallenge(challenge);
            challengeLoading = false;
            return true;
        }
        catch (e) {
            Notifications.add("Something went wrong: " + e, -1);
            return false;
        }
    });
}
exports.setup = setup;
ConfigEvent.subscribe((eventKey) => {
    if ([
        "difficulty",
        "numbers",
        "punctuation",
        "mode",
        "funbox",
        "paceCaret",
        "showAllLines",
        "showLiveWpm",
        "highlightMode",
        "time",
        "words",
        "keymapMode",
        "keymapLayout",
        "layout",
    ].includes(eventKey)) {
        clearActive();
    }
});


/***/ }),

/***/ "./src/scripts/controllers/chart-controller.ts":
/*!*****************************************************!*\
  !*** ./src/scripts/controllers/chart-controller.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.updateAllChartColors = exports.setDefaultFontFamily = exports.updateColors = exports.miniResult = exports.accountActivity = exports.accountHistory = exports.accountHistoryActiveIndex = exports.result = void 0;
const chart_js_1 = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/chart.esm.js");
const chartjs_plugin_trendline_1 = __importDefault(__webpack_require__(/*! chartjs-plugin-trendline */ "./node_modules/chartjs-plugin-trendline/src/chartjs-plugin-trendline.js"));
const chartjs_plugin_annotation_1 = __importDefault(__webpack_require__(/*! chartjs-plugin-annotation */ "./node_modules/chartjs-plugin-annotation/dist/chartjs-plugin-annotation.esm.js"));
chart_js_1.Chart.register(chart_js_1.BarController, chart_js_1.BarElement, chart_js_1.CategoryScale, chart_js_1.Filler, chart_js_1.LinearScale, chart_js_1.LineController, chart_js_1.LineElement, chart_js_1.PointElement, chart_js_1.ScatterController, chart_js_1.TimeScale, chart_js_1.TimeSeriesScale, chart_js_1.Tooltip, chartjs_plugin_trendline_1.default, chartjs_plugin_annotation_1.default);
chart_js_1.Chart.defaults.animation.duration = 0;
chart_js_1.Chart.defaults.elements.line.tension = 0.3;
chart_js_1.Chart.defaults.elements.line.fill = "origin";
const TestInput = __importStar(__webpack_require__(/*! ../test/test-input */ "./src/scripts/test/test-input.ts"));
const ThemeColors = __importStar(__webpack_require__(/*! ../elements/theme-colors */ "./src/scripts/elements/theme-colors.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const format_1 = __importDefault(__webpack_require__(/*! date-fns/format */ "./node_modules/date-fns/esm/format/index.js"));
__webpack_require__(/*! chartjs-adapter-date-fns */ "./node_modules/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.esm.js");
class ChartWithUpdateColors extends chart_js_1.Chart {
    constructor(item, config) {
        super(item, config);
    }
    updateColors() {
        updateColors(this);
    }
}
exports.result = new ChartWithUpdateColors($("#wpmChart"), {
    type: "line",
    data: {
        labels: [],
        datasets: [
            {
                label: "wpm",
                data: [],
                borderColor: "rgba(125, 125, 125, 1)",
                borderWidth: 2,
                yAxisID: "wpm",
                order: 2,
                pointRadius: 2,
            },
            {
                label: "raw",
                data: [],
                borderColor: "rgba(125, 125, 125, 1)",
                borderWidth: 2,
                yAxisID: "raw",
                order: 3,
                pointRadius: 2,
            },
            {
                label: "errors",
                data: [],
                borderColor: "rgba(255, 125, 125, 1)",
                pointBackgroundColor: "rgba(255, 125, 125, 1)",
                borderWidth: 2,
                order: 1,
                yAxisID: "error",
                type: "scatter",
                pointStyle: "crossRot",
                pointRadius: function (context) {
                    const index = context.dataIndex;
                    const value = context.dataset.data[index];
                    return (value !== null && value !== void 0 ? value : 0) <= 0 ? 0 : 3;
                },
                pointHoverRadius: function (context) {
                    const index = context.dataIndex;
                    const value = context.dataset.data[index];
                    return (value !== null && value !== void 0 ? value : 0) <= 0 ? 0 : 5;
                },
            },
        ],
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            x: {
                axis: "x",
                ticks: {
                    autoSkip: true,
                    autoSkipPadding: 20,
                },
                display: true,
                title: {
                    display: false,
                    text: "Seconds",
                },
            },
            wpm: {
                axis: "y",
                display: true,
                title: {
                    display: true,
                    text: "Words per Minute",
                },
                beginAtZero: true,
                min: 0,
                ticks: {
                    autoSkip: true,
                    autoSkipPadding: 20,
                },
                grid: {
                    display: true,
                },
            },
            raw: {
                axis: "y",
                display: false,
                title: {
                    display: true,
                    text: "Raw Words per Minute",
                },
                beginAtZero: true,
                min: 0,
                ticks: {
                    autoSkip: true,
                    autoSkipPadding: 20,
                },
                grid: {
                    display: false,
                },
            },
            error: {
                axis: "y",
                display: true,
                position: "right",
                title: {
                    display: true,
                    text: "Errors",
                },
                beginAtZero: true,
                ticks: {
                    precision: 0,
                    autoSkip: true,
                    autoSkipPadding: 20,
                },
                grid: {
                    display: false,
                },
            },
        },
        plugins: {
            annotation: {
                annotations: [],
            },
            tooltip: {
                animation: { duration: 250 },
                mode: "index",
                intersect: false,
                callbacks: {
                    afterLabel: function (ti) {
                        try {
                            $(".wordInputAfter").remove();
                            const wordsToHighlight = TestInput.keypressPerSecond[parseInt(ti.label) - 1].words;
                            const unique = [...new Set(wordsToHighlight)];
                            unique.forEach((wordIndex) => {
                                const wordEl = $($("#resultWordsHistory .words .word")[wordIndex]);
                                const input = wordEl.attr("input");
                                if (input != undefined) {
                                    wordEl.append(`<div class="wordInputAfter">${input
                                        .replace(/\t/g, "_")
                                        .replace(/\n/g, "_")
                                        .replace(/</g, "&lt")
                                        .replace(/>/g, "&gt")}</div>`);
                                }
                            });
                        }
                        catch (_a) { }
                        return "";
                    },
                },
            },
        },
    },
});
exports.accountHistory = new ChartWithUpdateColors($(".pageAccount #accountHistoryChart"), {
    type: "line",
    data: {
        labels: [],
        datasets: [
            {
                yAxisID: "wpm",
                label: "wpm",
                fill: false,
                data: [],
                borderColor: "#f44336",
                borderWidth: 2,
                trendlineLinear: {
                    style: "rgba(255,105,180, .8)",
                    lineStyle: "dotted",
                    width: 4,
                },
            },
            {
                yAxisID: "acc",
                label: "acc",
                fill: false,
                data: [],
                borderColor: "#cccccc",
                borderWidth: 2,
            },
        ],
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        hover: {
            mode: "nearest",
            intersect: false,
        },
        scales: {
            x: {
                axis: "x",
                type: "timeseries",
                bounds: "ticks",
                display: false,
                offset: true,
                title: {
                    display: false,
                    text: "Date",
                },
            },
            wpm: {
                axis: "y",
                beginAtZero: true,
                min: 0,
                ticks: {
                    stepSize: 10,
                },
                display: true,
                title: {
                    display: true,
                    text: "Words per Minute",
                },
            },
            acc: {
                axis: "y",
                beginAtZero: true,
                max: 100,
                display: true,
                position: "right",
                title: {
                    display: true,
                    text: "Error rate (100 - accuracy)",
                },
                grid: {
                    display: false,
                },
            },
        },
        plugins: {
            annotation: {
                annotations: [],
            },
            tooltip: {
                animation: { duration: 250 },
                // Disable the on-canvas tooltip
                enabled: true,
                intersect: false,
                external: function (ctx) {
                    if (!ctx)
                        return;
                    ctx.tooltip.options.displayColors = false;
                },
                callbacks: {
                    title: function () {
                        return "";
                    },
                    beforeLabel: function (tooltipItem) {
                        if (tooltipItem.datasetIndex !== 0) {
                            const resultData = tooltipItem.dataset.data[tooltipItem.dataIndex];
                            return `error rate: ${Misc.roundTo2(resultData.errorRate)}%\nacc: ${Misc.roundTo2(100 - resultData.errorRate)}%`;
                        }
                        const resultData = tooltipItem.dataset.data[tooltipItem.dataIndex];
                        let label = `${config_1.default.alwaysShowCPM ? "cpm" : "wpm"}: ${resultData.wpm}` +
                            "\n" +
                            `raw: ${resultData.raw}` +
                            "\n" +
                            `acc: ${resultData.acc}` +
                            "\n\n" +
                            `mode: ${resultData.mode} `;
                        if (resultData.mode == "time") {
                            label += resultData.mode2;
                        }
                        else if (resultData.mode == "words") {
                            label += resultData.mode2;
                        }
                        let diff = resultData.difficulty;
                        if (diff == undefined) {
                            diff = "normal";
                        }
                        label += "\n" + `difficulty: ${diff}`;
                        label +=
                            "\n" +
                                `punctuation: ${resultData.punctuation}` +
                                "\n" +
                                `language: ${resultData.language}` +
                                "\n\n" +
                                `date: ${(0, format_1.default)(new Date(resultData.timestamp), "dd MMM yyyy HH:mm")}`;
                        return label;
                    },
                    label: function () {
                        return "";
                    },
                    afterLabel: function (tooltip) {
                        exports.accountHistoryActiveIndex = tooltip.dataIndex;
                        return "";
                    },
                },
            },
        },
    },
});
exports.accountActivity = new ChartWithUpdateColors($(".pageAccount #accountActivityChart"), {
    type: "bar",
    data: {
        labels: [],
        datasets: [
            {
                yAxisID: "count",
                label: "Seconds",
                data: [],
                trendlineLinear: {
                    style: "rgba(255,105,180, .8)",
                    lineStyle: "dotted",
                    width: 2,
                },
                order: 3,
            },
            {
                yAxisID: "avgWpm",
                label: "Average Wpm",
                data: [],
                type: "line",
                order: 2,
                tension: 0,
                fill: false,
            },
        ],
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        hover: {
            mode: "nearest",
            intersect: false,
        },
        scales: {
            x: {
                axis: "x",
                ticks: {
                    autoSkip: true,
                    autoSkipPadding: 20,
                },
                type: "time",
                time: {
                    unit: "day",
                    displayFormats: {
                        day: "d MMM",
                    },
                },
                bounds: "ticks",
                display: true,
                title: {
                    display: false,
                    text: "Date",
                },
                offset: true,
            },
            count: {
                axis: "y",
                beginAtZero: true,
                min: 0,
                ticks: {
                    autoSkip: true,
                    autoSkipPadding: 20,
                    stepSize: 10,
                },
                display: true,
                title: {
                    display: true,
                    text: "Time Typing",
                },
            },
            avgWpm: {
                axis: "y",
                beginAtZero: true,
                min: 0,
                ticks: {
                    autoSkip: true,
                    autoSkipPadding: 20,
                    stepSize: 10,
                },
                display: true,
                position: "right",
                title: {
                    display: true,
                    text: "Average Wpm",
                },
                grid: {
                    display: false,
                },
            },
        },
        plugins: {
            annotation: {
                annotations: [],
            },
            tooltip: {
                animation: { duration: 250 },
                callbacks: {
                    title: function (tooltipItem) {
                        const resultData = tooltipItem[0].dataset.data[tooltipItem[0].dataIndex];
                        return (0, format_1.default)(new Date(resultData.x), "dd MMM yyyy");
                    },
                    beforeLabel: function (tooltipItem) {
                        const resultData = tooltipItem.dataset.data[tooltipItem.dataIndex];
                        switch (tooltipItem.datasetIndex) {
                            case 0:
                                return `Time Typing: ${Misc.secondsToString(Math.round(resultData.y), true, true)}\nTests Completed: ${resultData.amount}`;
                            case 1:
                                return `Average ${config_1.default.alwaysShowCPM ? "Cpm" : "Wpm"}: ${Misc.roundTo2(resultData.y)}`;
                            default:
                                return "";
                        }
                    },
                    label: function () {
                        return "";
                    },
                },
            },
        },
    },
});
exports.miniResult = new ChartWithUpdateColors($(".pageAccount #miniResultChart"), {
    type: "line",
    data: {
        labels: [],
        datasets: [
            {
                label: "wpm",
                data: [],
                borderColor: "rgba(125, 125, 125, 1)",
                borderWidth: 2,
                yAxisID: "wpm",
                order: 2,
                pointRadius: 2,
            },
            {
                label: "raw",
                data: [],
                borderColor: "rgba(125, 125, 125, 1)",
                borderWidth: 2,
                yAxisID: "raw",
                order: 3,
                pointRadius: 2,
            },
            {
                label: "errors",
                data: [],
                borderColor: "rgba(255, 125, 125, 1)",
                pointBackgroundColor: "rgba(255, 125, 125, 1)",
                borderWidth: 2,
                order: 1,
                yAxisID: "error",
                type: "scatter",
                pointStyle: "crossRot",
                pointRadius: function (context) {
                    const index = context.dataIndex;
                    const value = context.dataset.data[index];
                    return (value !== null && value !== void 0 ? value : 0) <= 0 ? 0 : 3;
                },
                pointHoverRadius: function (context) {
                    const index = context.dataIndex;
                    const value = context.dataset.data[index];
                    return (value !== null && value !== void 0 ? value : 0) <= 0 ? 0 : 5;
                },
            },
        ],
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            x: {
                axis: "x",
                ticks: {
                    autoSkip: true,
                    autoSkipPadding: 20,
                },
                display: true,
                title: {
                    display: false,
                    text: "Seconds",
                },
            },
            wpm: {
                axis: "y",
                display: true,
                title: {
                    display: true,
                    text: "Words per Minute",
                },
                beginAtZero: true,
                min: 0,
                ticks: {
                    autoSkip: true,
                    autoSkipPadding: 20,
                },
                grid: {
                    display: true,
                },
            },
            raw: {
                axis: "y",
                display: false,
                title: {
                    display: true,
                    text: "Raw Words per Minute",
                },
                beginAtZero: true,
                min: 0,
                ticks: {
                    autoSkip: true,
                    autoSkipPadding: 20,
                },
                grid: {
                    display: false,
                },
            },
            error: {
                display: true,
                position: "right",
                title: {
                    display: true,
                    text: "Errors",
                },
                beginAtZero: true,
                ticks: {
                    precision: 0,
                    autoSkip: true,
                    autoSkipPadding: 20,
                },
                grid: {
                    display: false,
                },
            },
        },
        plugins: {
            annotation: {
                annotations: [],
            },
            tooltip: {
                animation: { duration: 250 },
                mode: "index",
                intersect: false,
            },
        },
    },
});
function updateAccuracy() {
    exports.accountHistory.data.datasets[1].hidden = !config_1.default.chartAccuracy;
    exports.accountHistory.options.scales.acc.display =
        config_1.default.chartAccuracy;
    exports.accountHistory.update();
}
function updateStyle() {
    if (config_1.default.chartStyle == "scatter") {
        exports.accountHistory.data.datasets[0].showLine = false;
        exports.accountHistory.data.datasets[1].showLine = false;
    }
    else {
        exports.accountHistory.data.datasets[0].showLine = true;
        exports.accountHistory.data.datasets[1].showLine = true;
    }
    exports.accountHistory.updateColors();
}
function updateColors(chart) {
    return __awaiter(this, void 0, void 0, function* () {
        const bgcolor = yield ThemeColors.get("bg");
        const subcolor = yield ThemeColors.get("sub");
        const maincolor = yield ThemeColors.get("main");
        const errorcolor = yield ThemeColors.get("error");
        if (chart.data.datasets.every((dataset) => dataset.data.length === 0)) {
            return;
        }
        chart.data.datasets[0].borderColor = maincolor;
        chart.data.datasets[1].borderColor = subcolor;
        if (chart.data.datasets[2]) {
            chart.data.datasets[2].borderColor = errorcolor;
        }
        if (chart.data.datasets[0].type === undefined) {
            if (chart.config.type === "line") {
                chart.data.datasets[0].pointBackgroundColor = maincolor;
            }
            else if (chart.config.type === "bar") {
                chart.data.datasets[0].backgroundColor = maincolor;
            }
        }
        else if (chart.data.datasets[0].type === "bar") {
            chart.data.datasets[0].backgroundColor = maincolor;
        }
        else if (chart.data.datasets[0].type === "line") {
            chart.data.datasets[0].pointBackgroundColor = maincolor;
        }
        if (chart.data.datasets[1].type === undefined) {
            if (chart.config.type === "line") {
                chart.data.datasets[1].pointBackgroundColor = subcolor;
            }
            else if (chart.config.type === "bar") {
                chart.data.datasets[1].backgroundColor = subcolor;
            }
        }
        else if (chart.data.datasets[1].type === "bar") {
            chart.data.datasets[1].backgroundColor = subcolor;
        }
        else if (chart.data.datasets[1].type === "line") {
            chart.data.datasets[1].pointBackgroundColor = subcolor;
        }
        const chartScaleOptions = chart.options;
        Object.keys(chartScaleOptions.scales).forEach((scaleID) => {
            const axis = chartScaleOptions.scales[scaleID];
            axis.ticks.color = subcolor;
            axis.title.color = subcolor;
        });
        try {
            chart.data.datasets[0]
                .trendlineLinear.style = subcolor;
            chart.data.datasets[1]
                .trendlineLinear.style = subcolor;
        }
        catch (_a) { }
        chart.options.plugins.annotation
            .annotations.forEach((annotation) => {
            if (annotation.id !== "funbox-label") {
                annotation.borderColor = subcolor;
            }
            annotation.label.backgroundColor = subcolor;
            annotation.label.color = bgcolor;
        });
        chart.update("none");
    });
}
exports.updateColors = updateColors;
function setDefaultFontFamily(font) {
    chart_js_1.Chart.defaults.font.family = font.replace(/_/g, " ");
}
exports.setDefaultFontFamily = setDefaultFontFamily;
function updateAllChartColors() {
    ThemeColors.update();
    exports.accountHistory.updateColors();
    exports.result.updateColors();
    exports.accountActivity.updateColors();
    exports.miniResult.updateColors();
}
exports.updateAllChartColors = updateAllChartColors;
ConfigEvent.subscribe((eventKey, eventValue) => {
    if (eventKey === "chartAccuracy")
        updateAccuracy();
    if (eventKey === "chartStyle")
        updateStyle();
    if (eventKey === "fontFamily")
        setDefaultFontFamily(eventValue);
});


/***/ }),

/***/ "./src/scripts/controllers/input-controller.ts":
/*!*****************************************************!*\
  !*** ./src/scripts/controllers/input-controller.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const TestLogic = __importStar(__webpack_require__(/*! ../test/test-logic */ "./src/scripts/test/test-logic.ts"));
const TestUI = __importStar(__webpack_require__(/*! ../test/test-ui */ "./src/scripts/test/test-ui.ts"));
const TestStats = __importStar(__webpack_require__(/*! ../test/test-stats */ "./src/scripts/test/test-stats.ts"));
const Monkey = __importStar(__webpack_require__(/*! ../test/monkey */ "./src/scripts/test/monkey.ts"));
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const Keymap = __importStar(__webpack_require__(/*! ../elements/keymap */ "./src/scripts/elements/keymap.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const LiveAcc = __importStar(__webpack_require__(/*! ../test/live-acc */ "./src/scripts/test/live-acc.ts"));
const LiveBurst = __importStar(__webpack_require__(/*! ../test/live-burst */ "./src/scripts/test/live-burst.ts"));
const Funbox = __importStar(__webpack_require__(/*! ../test/funbox */ "./src/scripts/test/funbox.ts"));
const Sound = __importStar(__webpack_require__(/*! ./sound-controller */ "./src/scripts/controllers/sound-controller.ts"));
const Caret = __importStar(__webpack_require__(/*! ../test/caret */ "./src/scripts/test/caret.ts"));
const ManualRestart = __importStar(__webpack_require__(/*! ../test/manual-restart-tracker */ "./src/scripts/test/manual-restart-tracker.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const CustomText = __importStar(__webpack_require__(/*! ../test/custom-text */ "./src/scripts/test/custom-text.ts"));
const PageController = __importStar(__webpack_require__(/*! ./page-controller */ "./src/scripts/controllers/page-controller.ts"));
const Settings = __importStar(__webpack_require__(/*! ../pages/settings */ "./src/scripts/pages/settings.ts"));
const LayoutEmulator = __importStar(__webpack_require__(/*! ../test/layout-emulator */ "./src/scripts/test/layout-emulator.ts"));
const PaceCaret = __importStar(__webpack_require__(/*! ../test/pace-caret */ "./src/scripts/test/pace-caret.ts"));
const TimerProgress = __importStar(__webpack_require__(/*! ../test/timer-progress */ "./src/scripts/test/timer-progress.ts"));
const Focus = __importStar(__webpack_require__(/*! ../test/focus */ "./src/scripts/test/focus.ts"));
const ShiftTracker = __importStar(__webpack_require__(/*! ../test/shift-tracker */ "./src/scripts/test/shift-tracker.ts"));
const Replay = __importStar(__webpack_require__(/*! ../test/replay */ "./src/scripts/test/replay.ts"));
const MonkeyPower = __importStar(__webpack_require__(/*! ../elements/monkey-power */ "./src/scripts/elements/monkey-power.ts"));
const WeakSpot = __importStar(__webpack_require__(/*! ../test/weak-spot */ "./src/scripts/test/weak-spot.ts"));
const Leaderboards = __importStar(__webpack_require__(/*! ../elements/leaderboards */ "./src/scripts/elements/leaderboards.ts"));
const ActivePage = __importStar(__webpack_require__(/*! ../states/active-page */ "./src/scripts/states/active-page.ts"));
const TestActive = __importStar(__webpack_require__(/*! ../states/test-active */ "./src/scripts/states/test-active.ts"));
const TestInput = __importStar(__webpack_require__(/*! ../test/test-input */ "./src/scripts/test/test-input.ts"));
const TestWords = __importStar(__webpack_require__(/*! ../test/test-words */ "./src/scripts/test/test-words.ts"));
const WordTypedEvent = __importStar(__webpack_require__(/*! ../observables/word-typed-event */ "./src/scripts/observables/word-typed-event.ts"));
let dontInsertSpace = false;
let correctShiftUsed = true;
const wordsInput = document.getElementById("wordsInput");
function setWordsInput(value) {
    // Only change #wordsInput if it's not already the wanted value
    // Avoids Safari triggering unneeded events, causing issues with
    // dead keys.
    // console.log("settings words input to " + value);
    if (value !== wordsInput.value) {
        wordsInput.value = value;
    }
}
function updateUI() {
    const acc = Misc.roundTo2(TestStats.calculateAccuracy());
    if (!isNaN(acc))
        LiveAcc.update(acc);
    if (config_1.default.keymapMode === "next" && config_1.default.mode !== "zen") {
        Keymap.highlightKey(TestWords.words
            .getCurrent()
            .charAt(TestInput.input.current.length)
            .toString()
            .toUpperCase());
    }
}
function backspaceToPrevious() {
    if (!TestActive.get())
        return;
    if (TestInput.input.history.length == 0 ||
        TestUI.currentWordElementIndex == 0) {
        return;
    }
    if ((TestInput.input.history[TestWords.words.currentIndex - 1] ==
        TestWords.words.get(TestWords.words.currentIndex - 1) &&
        !config_1.default.freedomMode) ||
        $($(".word")[TestWords.words.currentIndex - 1]).hasClass("hidden")) {
        return;
    }
    if (config_1.default.confidenceMode === "on" || config_1.default.confidenceMode === "max") {
        return;
    }
    TestInput.input.current = TestInput.input.popHistory();
    TestInput.corrected.popHistory();
    if (config_1.default.funbox === "nospace" || config_1.default.funbox === "arrows") {
        TestInput.input.current = TestInput.input.current.slice(0, -1);
    }
    TestWords.words.decreaseCurrentIndex();
    TestUI.setCurrentWordElementIndex(TestUI.currentWordElementIndex - 1);
    TestUI.updateActiveElement(true);
    Funbox.toggleScript(TestWords.words.getCurrent());
    TestUI.updateWordElement();
    Caret.updatePosition();
    Replay.addReplayEvent("backWord");
}
function handleSpace() {
    var _a;
    if (!TestActive.get())
        return;
    if (TestInput.input.current === "")
        return;
    if (config_1.default.mode == "zen") {
        $("#words .word.active").removeClass("active");
        $("#words").append("<div class='word active'></div>");
    }
    const currentWord = TestWords.words.getCurrent();
    if (config_1.default.funbox === "layoutfluid" && config_1.default.mode !== "time") {
        // here I need to check if Config.customLayoutFluid exists because of my scuffed solution of returning whenever value is undefined in the setCustomLayoutfluid function
        const layouts = config_1.default.customLayoutfluid
            ? config_1.default.customLayoutfluid.split("#")
            : ["qwerty", "dvorak", "colemak"];
        let index = 0;
        const outof = TestWords.words.length;
        index = Math.floor((TestInput.input.history.length + 1) / (outof / layouts.length));
        if (config_1.default.layout !== layouts[index] && layouts[index] !== undefined) {
            Notifications.add(`--- !!! ${layouts[index]} !!! ---`, 0);
        }
        UpdateConfig.setLayout(layouts[index]);
        UpdateConfig.setKeymapLayout(layouts[index]);
        Keymap.highlightKey(TestWords.words
            .getCurrent()
            .charAt(TestInput.input.current.length)
            .toString()
            .toUpperCase());
        (_a = Settings.groups["layout"]) === null || _a === void 0 ? void 0 : _a.updateInput();
    }
    dontInsertSpace = true;
    const burst = TestStats.calculateBurst();
    LiveBurst.update(Math.round(burst));
    TestInput.pushBurstToHistory(burst);
    //correct word or in zen mode
    const isWordCorrect = currentWord == TestInput.input.current || config_1.default.mode == "zen";
    // This will probably break if letter mode is on or something
    const $currentTestWord = $(`#words .word.active`);
    WordTypedEvent.dispatch(currentWord, isWordCorrect, burst, $currentTestWord);
    MonkeyPower.addPower(isWordCorrect, true);
    TestInput.incrementAccuracy(isWordCorrect);
    if (isWordCorrect) {
        PaceCaret.handleSpace(true, currentWord);
        TestInput.input.pushHistory();
        TestWords.words.increaseCurrentIndex();
        TestUI.setCurrentWordElementIndex(TestUI.currentWordElementIndex + 1);
        TestUI.updateActiveElement();
        Funbox.toggleScript(TestWords.words.getCurrent());
        Caret.updatePosition();
        TestInput.incrementKeypressCount();
        TestInput.pushKeypressWord(TestWords.words.currentIndex);
        if (config_1.default.funbox !== "nospace" && config_1.default.funbox !== "arrows") {
            Sound.playClick();
        }
        Replay.addReplayEvent("submitCorrectWord");
    }
    else {
        if (config_1.default.funbox !== "nospace" && config_1.default.funbox !== "arrows") {
            if (!config_1.default.playSoundOnError || config_1.default.blindMode) {
                Sound.playClick();
            }
            else {
                Sound.playError();
            }
        }
        TestInput.pushMissedWord(TestWords.words.getCurrent());
        TestInput.incrementKeypressErrors();
        const cil = TestInput.input.current.length;
        if (cil <= TestWords.words.getCurrent().length) {
            if (cil >= TestInput.corrected.current.length) {
                TestInput.corrected.current += "_";
            }
            else {
                TestInput.corrected.current =
                    TestInput.corrected.current.substring(0, cil) +
                        "_" +
                        TestInput.corrected.current.substring(cil + 1);
            }
        }
        if (config_1.default.stopOnError != "off") {
            if (config_1.default.difficulty == "expert" || config_1.default.difficulty == "master") {
                //failed due to diff when pressing space
                TestLogic.fail("difficulty");
                return;
            }
            if (config_1.default.stopOnError == "word") {
                dontInsertSpace = false;
                Replay.addReplayEvent("incorrectLetter", "_");
                TestUI.updateWordElement(true);
                Caret.updatePosition();
            }
            return;
        }
        PaceCaret.handleSpace(false, currentWord);
        if (config_1.default.blindMode && config_1.default.highlightMode !== "off") {
            $("#words .word.active letter").addClass("correct");
        }
        TestInput.input.pushHistory();
        TestUI.highlightBadWord(TestUI.currentWordElementIndex, !config_1.default.blindMode);
        TestWords.words.increaseCurrentIndex();
        TestUI.setCurrentWordElementIndex(TestUI.currentWordElementIndex + 1);
        TestUI.updateActiveElement();
        Funbox.toggleScript(TestWords.words.getCurrent());
        Caret.updatePosition();
        TestInput.incrementKeypressCount();
        TestInput.pushKeypressWord(TestWords.words.currentIndex);
        TestInput.updateLastKeypress();
        if (config_1.default.difficulty == "expert" || config_1.default.difficulty == "master") {
            TestLogic.fail("difficulty");
            return;
        }
        else if (TestWords.words.currentIndex == TestWords.words.length) {
            //submitted last word that is incorrect
            TestLogic.finish();
            return;
        }
        Replay.addReplayEvent("submitErrorWord");
    }
    let wordLength;
    if (config_1.default.mode === "zen") {
        wordLength = TestInput.input.current.length;
    }
    else {
        wordLength = TestWords.words.getCurrent().length;
    }
    const flex = Misc.whorf(config_1.default.minBurstCustomSpeed, wordLength);
    if ((config_1.default.minBurst === "fixed" && burst < config_1.default.minBurstCustomSpeed) ||
        (config_1.default.minBurst === "flex" && burst < flex)) {
        TestLogic.fail("min burst");
        return;
    }
    TestInput.corrected.pushHistory();
    if (!config_1.default.showAllLines ||
        config_1.default.mode == "time" ||
        (CustomText.isWordRandom && CustomText.word == 0) ||
        CustomText.isTimeRandom) {
        const currentTop = Math.floor(document.querySelectorAll("#words .word")[TestUI.currentWordElementIndex - 1].offsetTop);
        let nextTop;
        try {
            nextTop = Math.floor(document.querySelectorAll("#words .word")[TestUI.currentWordElementIndex].offsetTop);
        }
        catch (e) {
            nextTop = 0;
        }
        if (nextTop > currentTop && !TestUI.lineTransition) {
            TestUI.lineJump(currentTop);
        }
    } //end of line wrap
    if (config_1.default.keymapMode === "react") {
        Keymap.flashKey(" ", true);
    }
    if (config_1.default.mode === "words" ||
        config_1.default.mode === "custom" ||
        config_1.default.mode === "quote" ||
        config_1.default.mode === "zen") {
        TimerProgress.update();
    }
    if (config_1.default.mode == "time" ||
        config_1.default.mode == "words" ||
        config_1.default.mode == "custom" ||
        config_1.default.mode == "quote") {
        TestLogic.addWord();
    }
}
function isCharCorrect(char, charIndex) {
    if (!correctShiftUsed)
        return false;
    if (config_1.default.mode == "zen") {
        return true;
    }
    const originalChar = TestWords.words.getCurrent()[charIndex];
    if (originalChar == char) {
        return true;
    }
    if (config_1.default.language.split("_")[0] == "russian") {
        if ((char === "е" || char === "e") && originalChar == "ё") {
            return true;
        }
        if (char === "ё" && (originalChar == "е" || originalChar === "e")) {
            return true;
        }
    }
    if (config_1.default.funbox === "arrows") {
        if ((char === "w" || char === "ArrowUp") && originalChar == "↑") {
            return true;
        }
        if ((char === "s" || char === "ArrowDown") && originalChar == "↓") {
            return true;
        }
        if ((char === "a" || char === "ArrowLeft") && originalChar == "←") {
            return true;
        }
        if ((char === "d" || char === "ArrowRight") && originalChar == "→") {
            return true;
        }
    }
    if ((char === `’` || char === "‘" || char === "'") &&
        (originalChar == `’` || originalChar === "‘" || originalChar === "'")) {
        return true;
    }
    if ((char === `"` || char === "”" || char == "“" || char === "„") &&
        (originalChar == `"` ||
            originalChar === "”" ||
            originalChar === "“" ||
            originalChar === "„")) {
        return true;
    }
    if ((char === "–" || char === "—" || char == "-") &&
        (originalChar == "-" || originalChar === "–" || originalChar === "—")) {
        return true;
    }
    return false;
}
function handleChar(char, charIndex) {
    var _a, _b, _c, _d;
    if (TestUI.resultCalculating || TestUI.resultVisible) {
        return;
    }
    if (char === "…") {
        for (let i = 0; i < 3; i++) {
            handleChar(".", charIndex + i);
        }
        return;
    }
    if (char === "\n" && config_1.default.funbox === "58008") {
        char = " ";
    }
    if (char !== "\n" && char !== "\t" && /\s/.test(char)) {
        if (config_1.default.funbox === "nospace" || config_1.default.funbox === "arrows")
            return;
        handleSpace();
        //insert space for expert and master or strict space,
        //or for stop on error set to word,
        //otherwise dont do anything
        if (config_1.default.difficulty !== "normal" ||
            (config_1.default.strictSpace && config_1.default.mode !== "zen") ||
            config_1.default.stopOnError === "word") {
            if (dontInsertSpace) {
                dontInsertSpace = false;
                return;
            }
        }
        else {
            return;
        }
    }
    if (config_1.default.mode !== "zen" &&
        TestWords.words.getCurrent()[charIndex] !== "\n" &&
        char === "\n") {
        return;
    }
    //start the test
    if (!TestActive.get() && !TestLogic.startTest()) {
        return;
    }
    Focus.set(true);
    Caret.stopAnimation();
    const thisCharCorrect = isCharCorrect(char, charIndex);
    if (thisCharCorrect && config_1.default.mode !== "zen") {
        char = TestWords.words.getCurrent().charAt(charIndex);
    }
    if (!thisCharCorrect && char === "\n") {
        if (TestInput.input.current === "")
            return;
        char = " ";
    }
    if (TestInput.input.current === "") {
        TestInput.setBurstStart(performance.now());
    }
    const resultingWord = TestInput.input.current.substring(0, charIndex) +
        char +
        TestInput.input.current.substring(charIndex + 1);
    if (!thisCharCorrect && Misc.trailingComposeChars.test(resultingWord)) {
        TestInput.input.current = resultingWord;
        TestUI.updateWordElement();
        Caret.updatePosition();
        return;
    }
    MonkeyPower.addPower(thisCharCorrect);
    TestInput.incrementAccuracy(thisCharCorrect);
    if (!thisCharCorrect) {
        TestInput.incrementKeypressErrors();
        TestInput.pushMissedWord(TestWords.words.getCurrent());
    }
    WeakSpot.updateScore(config_1.default.mode === "zen" ? char : TestWords.words.getCurrent()[charIndex], thisCharCorrect);
    if (thisCharCorrect) {
        Sound.playClick();
    }
    else {
        if (!config_1.default.playSoundOnError || config_1.default.blindMode) {
            Sound.playClick();
        }
        else {
            Sound.playError();
        }
    }
    if (!correctShiftUsed && config_1.default.difficulty != "master")
        return;
    //update current corrected version. if its empty then add the current char. if its not then replace the last character with the currently pressed one / add it
    if (TestInput.corrected.current === "") {
        TestInput.corrected.current += resultingWord;
    }
    else {
        if (charIndex >= TestInput.corrected.current.length) {
            TestInput.corrected.current += char;
        }
        else if (!thisCharCorrect) {
            TestInput.corrected.current =
                TestInput.corrected.current.substring(0, charIndex) +
                    char +
                    TestInput.corrected.current.substring(charIndex + 1);
        }
    }
    TestInput.incrementKeypressCount();
    TestInput.updateLastKeypress();
    TestInput.pushKeypressWord(TestWords.words.currentIndex);
    if (config_1.default.difficulty !== "master" &&
        config_1.default.stopOnError == "letter" &&
        !thisCharCorrect) {
        return;
    }
    Replay.addReplayEvent(thisCharCorrect ? "correctLetter" : "incorrectLetter", char);
    //update the active word top, but only once
    if (TestInput.input.current.length === 1 &&
        TestWords.words.currentIndex === 0) {
        TestUI.setActiveWordTop((_a = document.querySelector("#words .active")) === null || _a === void 0 ? void 0 : _a.offsetTop);
    }
    //max length of the input is 20 unless in zen mode then its 30
    if ((config_1.default.mode === "zen" && charIndex < 30) ||
        (config_1.default.mode !== "zen" &&
            charIndex < TestWords.words.getCurrent().length + 20)) {
        TestInput.input.current = resultingWord;
    }
    if (!thisCharCorrect && config_1.default.difficulty == "master") {
        TestInput.input.pushHistory();
        TestInput.corrected.pushHistory();
        TestLogic.fail("difficulty");
        return;
    }
    //keymap
    if (config_1.default.keymapMode === "react") {
        Keymap.flashKey(char, thisCharCorrect);
    }
    if (config_1.default.mode != "zen") {
        //not applicable to zen mode
        //auto stop the test if the last word is correct
        const currentWord = TestWords.words.getCurrent();
        const lastindex = TestWords.words.currentIndex;
        if ((currentWord == TestInput.input.current ||
            (config_1.default.quickEnd &&
                currentWord.length == TestInput.input.current.length &&
                config_1.default.stopOnError == "off")) &&
            lastindex == TestWords.words.length - 1) {
            TestInput.input.pushHistory();
            TestInput.corrected.pushHistory();
            TestLogic.finish();
            return;
        }
    }
    const activeWordTopBeforeJump = (_b = document.querySelector("#words .word.active")) === null || _b === void 0 ? void 0 : _b.offsetTop;
    TestUI.updateWordElement();
    if (!config_1.default.hideExtraLetters) {
        const newActiveTop = (_c = document.querySelector("#words .word.active")) === null || _c === void 0 ? void 0 : _c.offsetTop;
        //stop the word jump by slicing off the last character, update word again
        if (activeWordTopBeforeJump < newActiveTop &&
            !TestUI.lineTransition &&
            TestInput.input.current.length > 1) {
            if (config_1.default.mode == "zen") {
                const currentTop = Math.floor((_d = document.querySelectorAll("#words .word")[TestUI.currentWordElementIndex - 1]) === null || _d === void 0 ? void 0 : _d.offsetTop);
                if (!config_1.default.showAllLines)
                    TestUI.lineJump(currentTop);
            }
            else {
                TestInput.input.current = TestInput.input.current.slice(0, -1);
                TestUI.updateWordElement();
            }
        }
    }
    //simulate space press in nospace funbox
    if (((config_1.default.funbox === "nospace" || config_1.default.funbox === "arrows") &&
        TestInput.input.current.length === TestWords.words.getCurrent().length) ||
        (char === "\n" && thisCharCorrect)) {
        handleSpace();
    }
    if (char !== "\n") {
        Caret.updatePosition();
    }
}
function handleTab(event, popupVisible) {
    //todo refactor this mess
    if (TestUI.resultCalculating) {
        event.preventDefault();
    }
    if (ActivePage.get() !== "test" && popupVisible) {
        // event.preventDefault();
        return;
    }
    if ($("#customTextPopup .textarea").is(":focus")) {
        event.preventDefault();
        const area = $("#customTextPopup .textarea")[0];
        const start = area.selectionStart;
        const end = area.selectionEnd;
        // set textarea value to: text before caret + tab + text after caret
        area.value =
            area.value.substring(0, start) + "\t" + area.value.substring(end);
        // put caret at right position again
        area.selectionStart = area.selectionEnd = start + 1;
        return;
    }
    else if (!TestUI.resultCalculating &&
        $("#commandLineWrapper").hasClass("hidden") &&
        $("#simplePopupWrapper").hasClass("hidden") &&
        $("#quoteSubmitPopupWrapper").hasClass("hidden") &&
        ActivePage.get() != "login") {
        if (ActivePage.get() == "test") {
            if (config_1.default.quickTab) {
                if (!$("#leaderboardsWrapper").hasClass("hidden")) {
                    Leaderboards.hide();
                }
                if (popupVisible) {
                    event.preventDefault();
                    return;
                }
                if (TestUI.resultVisible ||
                    !((config_1.default.mode == "zen" && !event.shiftKey) ||
                        (TestWords.hasTab && !event.shiftKey))) {
                    if (event.shiftKey) {
                        ManualRestart.set();
                    }
                    else {
                        ManualRestart.reset();
                    }
                    event.preventDefault();
                    if (TestActive.get() &&
                        config_1.default.repeatQuotes === "typing" &&
                        config_1.default.mode === "quote") {
                        TestLogic.restart(true, false, event);
                    }
                    else {
                        TestLogic.restart(false, false, event);
                    }
                }
                else {
                    event.preventDefault();
                    handleChar("\t", TestInput.input.current.length);
                    setWordsInput(" " + TestInput.input.current);
                }
            }
            else if (!TestUI.resultVisible) {
                if ((TestWords.hasTab && event.shiftKey) ||
                    (!TestWords.hasTab && config_1.default.mode !== "zen") ||
                    (config_1.default.mode === "zen" && event.shiftKey)) {
                    event.preventDefault();
                    $("#restartTestButton").trigger("focus");
                }
                else {
                    event.preventDefault();
                    handleChar("\t", TestInput.input.current.length);
                    setWordsInput(" " + TestInput.input.current);
                }
            }
        }
        else if (config_1.default.quickTab) {
            event.preventDefault();
            PageController.change("test");
        }
    }
}
$(document).keydown((event) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (ActivePage.get() == "loading")
        return event.preventDefault();
    //autofocus
    const wordsFocused = $("#wordsInput").is(":focus");
    const pageTestActive = ActivePage.get() === "test";
    const commandLineVisible = !$("#commandLineWrapper").hasClass("hidden");
    const leaderboardsVisible = !$("#leaderboardsWrapper").hasClass("hidden");
    const popups = document.querySelectorAll(".popupWrapper");
    let popupVisible = false;
    for (const popup of popups) {
        if (!popup.classList.contains("hidden") === true) {
            popupVisible = true;
            break;
        }
    }
    const allowTyping = pageTestActive &&
        !commandLineVisible &&
        !leaderboardsVisible &&
        !popupVisible &&
        !TestUI.resultVisible &&
        (wordsFocused || event.key !== "Enter");
    if (allowTyping && !wordsFocused && event.key !== "Enter") {
        TestUI.focusWords();
        if (config_1.default.showOutOfFocusWarning) {
            event.preventDefault();
        }
    }
    //tab
    if ((event.key == "Tab" && !config_1.default.swapEscAndTab) ||
        (event.key == "Escape" && config_1.default.swapEscAndTab)) {
        handleTab(event, popupVisible);
    }
    if (!allowTyping)
        return;
    if (!((_a = event.originalEvent) === null || _a === void 0 ? void 0 : _a.isTrusted) || TestUI.testRestarting) {
        event.preventDefault();
        return;
    }
    if (TestInput.spacingDebug) {
        console.log("spacing debug", "keypress", event.key, "length", TestInput.keypressTimings.spacing.array.length);
    }
    TestInput.recordKeypressSpacing();
    TestInput.setKeypressDuration(performance.now());
    TestInput.setKeypressNotAfk();
    //blocking firefox from going back in history with backspace
    if (event.key === "Backspace") {
        Sound.playClick();
        const t = /INPUT|SELECT|TEXTAREA/i;
        if (!t.test(event.target.tagName)
        // if this breaks in the future, call mio and tell him to stop being lazy
        // (event.target as unknown as KeyboardEvent).disabled ||
        // (event.target as unknown as Element).readOnly
        ) {
            event.preventDefault();
        }
        if (config_1.default.confidenceMode === "max") {
            event.preventDefault();
            return;
        }
    }
    if (config_1.default.funbox !== "arrows" && /Arrow/i.test(event.key)) {
        event.preventDefault();
        return;
    }
    Monkey.type();
    if (event.key === "Backspace" && TestInput.input.current.length === 0) {
        backspaceToPrevious();
        if (TestInput.input.current) {
            setWordsInput(" " + TestInput.input.current + " ");
        }
    }
    if (event.key === "Enter") {
        if (event.shiftKey && config_1.default.mode == "zen") {
            TestLogic.finish();
        }
        else if (event.shiftKey &&
            ((config_1.default.mode == "time" && config_1.default.time === 0) ||
                (config_1.default.mode == "words" && config_1.default.words === 0))) {
            TestInput.setBailout(true);
            TestLogic.finish();
        }
        else {
            handleChar("\n", TestInput.input.current.length);
            setWordsInput(" " + TestInput.input.current);
        }
    }
    //show dead keys
    if (event.key === "Dead" &&
        !Misc.trailingComposeChars.test(TestInput.input.current)) {
        Sound.playClick();
        const word = document.querySelector("#words .word.active");
        const len = TestInput.input.current.length; // have to do this because prettier wraps the line and causes an error
        word === null || word === void 0 ? void 0 : word.querySelectorAll("letter")[len].classList.toggle("dead");
    }
    if (config_1.default.oppositeShiftMode !== "off") {
        correctShiftUsed =
            (yield ShiftTracker.isUsingOppositeShift(event)) !== false;
    }
    if (config_1.default.funbox === "arrows") {
        let char = event.key;
        if (["ArrowLeft", "ArrowUp", "ArrowRight", "ArrowDown"].includes(char)) {
            if (char === "ArrowLeft")
                char = "a";
            if (char === "ArrowRight")
                char = "d";
            if (char === "ArrowDown")
                char = "s";
            if (char === "ArrowUp")
                char = "w";
            event.preventDefault();
            handleChar(char, TestInput.input.current.length);
            updateUI();
            setWordsInput(" " + TestInput.input.current);
        }
    }
    else if (config_1.default.layout !== "default" &&
        !(event.ctrlKey ||
            (event.altKey && window.navigator.platform.search("Linux") > -1))) {
        const char = yield LayoutEmulator.getCharFromEvent(event);
        if (char !== null) {
            event.preventDefault();
            handleChar(char, TestInput.input.current.length);
            updateUI();
            setWordsInput(" " + TestInput.input.current);
        }
    }
}));
$("#wordsInput").keyup((event) => {
    var _a;
    if (!((_a = event.originalEvent) === null || _a === void 0 ? void 0 : _a.isTrusted) || TestUI.testRestarting) {
        event.preventDefault();
        return;
    }
    if (TestUI.resultVisible)
        return;
    const now = performance.now();
    if (TestInput.keypressTimings.duration.current !== -1) {
        const diff = Math.abs(TestInput.keypressTimings.duration.current - now);
        TestInput.pushKeypressDuration(diff);
    }
    TestInput.setKeypressDuration(now);
    Monkey.stop();
});
$("#wordsInput").on("beforeinput", (event) => {
    var _a;
    if (!((_a = event.originalEvent) === null || _a === void 0 ? void 0 : _a.isTrusted))
        return;
    if (event.target.value === "") {
        event.target.value = " ";
    }
});
$("#wordsInput").on("input", (event) => {
    var _a;
    if (!((_a = event.originalEvent) === null || _a === void 0 ? void 0 : _a.isTrusted) || TestUI.testRestarting) {
        event.target.value = " ";
        return;
    }
    TestInput.setKeypressNotAfk();
    const realInputValue = event.target.value.normalize();
    const inputValue = realInputValue.slice(1);
    // input will be modified even with the preventDefault() in
    // beforeinput/keydown if it's part of a compose sequence. this undoes
    // the effects of that and takes the input out of compose mode.
    if (config_1.default.layout !== "default" &&
        inputValue.length >= TestInput.input.current.length) {
        setWordsInput(" " + TestInput.input.current);
        return;
    }
    if (realInputValue.length === 0 && TestInput.input.current.length === 0) {
        // fallback for when no Backspace keydown event (mobile)
        backspaceToPrevious();
    }
    else if (inputValue.length < TestInput.input.current.length) {
        TestInput.input.current = inputValue;
        TestUI.updateWordElement();
        Caret.updatePosition();
        if (!Misc.trailingComposeChars.test(TestInput.input.current)) {
            Replay.addReplayEvent("setLetterIndex", TestInput.input.current.length);
        }
    }
    else if (inputValue !== TestInput.input.current) {
        let diffStart = 0;
        while (inputValue[diffStart] === TestInput.input.current[diffStart]) {
            diffStart++;
        }
        for (let i = diffStart; i < inputValue.length; i++) {
            handleChar(inputValue[i], i);
        }
    }
    setWordsInput(" " + TestInput.input.current);
    updateUI();
    // force caret at end of input
    // doing it on next cycle because Chromium on Android won't let me edit
    // the selection inside the input event
    setTimeout(() => {
        var _a;
        if (event.target.selectionStart !==
            event.target.value.length &&
            (!Misc.trailingComposeChars.test(event.target.value) ||
                ((_a = event.target.selectionStart) !== null && _a !== void 0 ? _a : 0) <
                    event.target.value.search(Misc.trailingComposeChars))) {
            event.target.selectionStart = event.target.selectionEnd = event.target.value.length;
        }
    }, 0);
});
$("#wordsInput").on("focus", (event) => {
    event.target.selectionStart = event.target.selectionEnd = event.target.value.length;
});
$("#wordsInput").on("copy paste", (event) => {
    event.preventDefault();
});


/***/ }),

/***/ "./src/scripts/controllers/page-controller.ts":
/*!****************************************************!*\
  !*** ./src/scripts/controllers/page-controller.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.change = void 0;
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const ActivePage = __importStar(__webpack_require__(/*! ../states/active-page */ "./src/scripts/states/active-page.ts"));
const Settings = __importStar(__webpack_require__(/*! ../pages/settings */ "./src/scripts/pages/settings.ts"));
const Account = __importStar(__webpack_require__(/*! ../pages/account */ "./src/scripts/pages/account.ts"));
const ManualRestart = __importStar(__webpack_require__(/*! ../test/manual-restart-tracker */ "./src/scripts/test/manual-restart-tracker.ts"));
const PageTest = __importStar(__webpack_require__(/*! ../pages/test */ "./src/scripts/pages/test.ts"));
const PageAbout = __importStar(__webpack_require__(/*! ../pages/about */ "./src/scripts/pages/about.ts"));
const PageChangeEvent = __importStar(__webpack_require__(/*! ../observables/page-change-event */ "./src/scripts/observables/page-change-event.ts"));
const PageLogin = __importStar(__webpack_require__(/*! ../pages/login */ "./src/scripts/pages/login.ts"));
const PageLoading = __importStar(__webpack_require__(/*! ../pages/loading */ "./src/scripts/pages/loading.ts"));
const PageTransition = __importStar(__webpack_require__(/*! ../states/page-transition */ "./src/scripts/states/page-transition.ts"));
function change(page) {
    if (PageTransition.get()) {
        console.log(`change page ${page} stopped`);
        return;
    }
    console.log(`change page ${page}`);
    if (page === "")
        page = "test";
    if (page == undefined) {
        //use window loacation
        const pages = {
            "/": "test",
            "/login": "login",
            "/settings": "settings",
            "/about": "about",
            "/account": "account",
        };
        let path = pages[window.location.pathname];
        if (!path) {
            path = "test";
        }
        page = path;
    }
    if (ActivePage.get() === page) {
        console.log(`page ${page} already active`);
        return;
    }
    const pages = {
        loading: PageLoading.page,
        test: PageTest.page,
        settings: Settings.page,
        about: PageAbout.page,
        account: Account.page,
        login: PageLogin.page,
    };
    const previousPage = pages[ActivePage.get()];
    const nextPage = pages[page];
    previousPage === null || previousPage === void 0 ? void 0 : previousPage.beforeHide();
    PageTransition.set(true);
    ActivePage.set(undefined);
    $(".page").removeClass("active");
    Misc.swapElements(previousPage.element, nextPage.element, 250, () => {
        PageTransition.set(false);
        ActivePage.set(nextPage.name);
        previousPage === null || previousPage === void 0 ? void 0 : previousPage.afterHide();
        nextPage.element.addClass("active");
        history.pushState(nextPage.pathname, "", nextPage.pathname);
        nextPage === null || nextPage === void 0 ? void 0 : nextPage.afterShow();
    }, () => __awaiter(this, void 0, void 0, function* () {
        yield (nextPage === null || nextPage === void 0 ? void 0 : nextPage.beforeShow());
    }));
    PageChangeEvent.dispatch(previousPage, nextPage);
}
exports.change = change;
$(document).on("click", "#top .logo", () => {
    change("test");
});
$(document).on("click", "#top #menu .icon-button", (e) => {
    if (!$(e.currentTarget).hasClass("leaderboards")) {
        const href = $(e.currentTarget).attr("href");
        ManualRestart.set();
        change(href.replace("/", ""));
    }
    return false;
});
$(".pageTest .loginTip .link").on("click", () => __awaiter(void 0, void 0, void 0, function* () {
    change("login");
}));


/***/ }),

/***/ "./src/scripts/controllers/preset-controller.ts":
/*!******************************************************!*\
  !*** ./src/scripts/controllers/preset-controller.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.apply = void 0;
const UpdateConfig = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const TestLogic = __importStar(__webpack_require__(/*! ../test/test-logic */ "./src/scripts/test/test-logic.ts"));
const TagController = __importStar(__webpack_require__(/*! ./tag-controller */ "./src/scripts/controllers/tag-controller.ts"));
function apply(_id) {
    var _a;
    // console.log(DB.getSnapshot().presets);
    const snapshot = DB.getSnapshot();
    (_a = snapshot.presets) === null || _a === void 0 ? void 0 : _a.forEach((preset) => {
        if (preset._id == _id) {
            UpdateConfig.apply(preset.config);
            TagController.clear(true);
            if (preset.config.tags) {
                preset.config.tags.forEach((tagid) => {
                    TagController.set(tagid, true, false);
                });
            }
            TestLogic.restart();
            Notifications.add("Preset applied", 1, 2);
            UpdateConfig.saveFullConfigToLocalStorage();
        }
    });
}
exports.apply = apply;


/***/ }),

/***/ "./src/scripts/controllers/quotes-controller.ts":
/*!******************************************************!*\
  !*** ./src/scripts/controllers/quotes-controller.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const misc_1 = __webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts");
const config_event_1 = __webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts");
const defaultQuoteCollection = {
    quotes: [],
    length: 0,
    language: null,
    groups: [],
};
class QuotesController {
    constructor() {
        this.quoteCollection = defaultQuoteCollection;
        this.quoteQueue = [];
        this.queueIndex = 0;
    }
    getQuotes(language, quoteLengths) {
        return __awaiter(this, void 0, void 0, function* () {
            const normalizedLanguage = language.replace(/_\d*k$/g, "");
            if (this.quoteCollection.language !== normalizedLanguage) {
                try {
                    const data = yield $.getJSON(`quotes/${normalizedLanguage}.json`);
                    if (data.quotes === undefined || data.quotes.length === 0) {
                        return defaultQuoteCollection;
                    }
                    this.quoteCollection = {
                        quotes: [],
                        length: data.quotes.length,
                        groups: [],
                        language: data.language,
                    };
                    // Transform JSON Quote schema to MonkeyTypes Quote schema
                    data.quotes.forEach((quote) => {
                        const monkeyTypeQuote = {
                            text: quote.text,
                            source: quote.source,
                            length: quote.length,
                            id: quote.id,
                            language: data.language,
                            group: 0,
                        };
                        this.quoteCollection.quotes.push(monkeyTypeQuote);
                    });
                    data.groups.forEach((quoteGroup, groupIndex) => {
                        const lower = quoteGroup[0];
                        const upper = quoteGroup[1];
                        this.quoteCollection.groups[groupIndex] =
                            this.quoteCollection.quotes.filter((quote) => {
                                if (quote.length >= lower && quote.length <= upper) {
                                    quote.group = groupIndex;
                                    return true;
                                }
                                return false;
                            });
                    });
                    if (quoteLengths !== undefined) {
                        this.updateQuoteQueue(quoteLengths);
                    }
                }
                catch (_a) {
                    return defaultQuoteCollection;
                }
            }
            return this.quoteCollection;
        });
    }
    getQuoteById(id) {
        const targetQuote = this.quoteCollection.quotes.find((quote) => {
            return quote.id === id;
        });
        return targetQuote;
    }
    updateQuoteQueue(quoteGroups) {
        this.quoteQueue = [];
        quoteGroups.forEach((group) => {
            var _a;
            if (group < 0) {
                return;
            }
            (_a = this.quoteCollection.groups[group]) === null || _a === void 0 ? void 0 : _a.forEach((quote) => {
                this.quoteQueue.push(quote);
            });
        });
        (0, misc_1.shuffle)(this.quoteQueue);
        this.queueIndex = 0;
    }
    getRandomQuote() {
        if (this.quoteQueue.length === 0) {
            return null;
        }
        if (this.queueIndex >= this.quoteQueue.length) {
            this.queueIndex = 0;
            (0, misc_1.shuffle)(this.quoteQueue);
        }
        const randomQuote = this.quoteQueue[this.queueIndex];
        this.queueIndex += 1;
        return randomQuote;
    }
    getCurrentQuote() {
        if (this.quoteQueue.length === 0) {
            return null;
        }
        return this.quoteQueue[this.queueIndex];
    }
}
const quoteController = new QuotesController();
(0, config_event_1.subscribe)((key, newValue) => {
    if (key === "quoteLength") {
        quoteController.updateQuoteQueue(newValue);
    }
});
exports["default"] = quoteController;


/***/ }),

/***/ "./src/scripts/controllers/route-controller.ts":
/*!*****************************************************!*\
  !*** ./src/scripts/controllers/route-controller.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.handleInitialPageClasses = void 0;
// import * as Funbox from "../test/funbox";
const PageController = __importStar(__webpack_require__(/*! ./page-controller */ "./src/scripts/controllers/page-controller.ts"));
// import Config from "../config";
const ActivePage = __importStar(__webpack_require__(/*! ../states/active-page */ "./src/scripts/states/active-page.ts"));
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
const mappedRoutes = {
    "/": "pageLoading",
    "/login": "pageLoading",
    "/settings": "pageLoading",
    "/about": "pageLoading",
    "/account": "pageAccount",
    "/verify": "pageLoading",
};
function handleInitialPageClasses(pathname) {
    if (!mappedRoutes[pathname]) {
        pathname = "/";
    }
    const el = $(".page." + mappedRoutes[pathname]);
    $(el).removeClass("hidden");
    $(el).addClass("active");
    let pageName = "loading";
    if (pathname === "/account")
        pageName = "account";
    ActivePage.set(pageName);
}
exports.handleInitialPageClasses = handleInitialPageClasses;
// honestly im not sure what this does
// (function (history): void {
//   const pushState = history.pushState;
//   history.pushState = function (state): void {
//     if (Config.funbox === "memory" && state !== "/") {
//       Funbox.resetMemoryTimer();
//     }
//     // @ts-ignore
//     return pushState.apply(history, arguments);
//   };
// })(window.history);
$(window).on("popstate", (e) => {
    const state = e.originalEvent.state;
    if (state == "" || state == "/") {
        // show test
        PageController.change("test");
    }
    else if (state == "about") {
        // show about
        PageController.change("about");
    }
    else if (state == "account" || state == "login") {
        if (firebase_1.Auth.currentUser) {
            PageController.change("account");
        }
        else {
            PageController.change("login");
        }
    }
});


/***/ }),

/***/ "./src/scripts/controllers/sound-controller.ts":
/*!*****************************************************!*\
  !*** ./src/scripts/controllers/sound-controller.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setVolume = exports.playError = exports.playClick = exports.previewClick = exports.init = exports.initErrorSound = void 0;
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const howler_1 = __importStar(__webpack_require__(/*! howler */ "./node_modules/howler/dist/howler.js"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const misc_1 = __webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts");
let errorSound = null;
let clickSounds = null;
function initErrorSound() {
    if (errorSound !== null)
        return;
    errorSound = new howler_1.Howl({ src: ["../sound/error.wav"] });
}
exports.initErrorSound = initErrorSound;
function init() {
    if (clickSounds !== null)
        return;
    clickSounds = {
        1: [
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click1/click1_1.wav" }),
                    new howler_1.Howl({ src: "../sound/click1/click1_1.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click1/click1_2.wav" }),
                    new howler_1.Howl({ src: "../sound/click1/click1_2.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click1/click1_3.wav" }),
                    new howler_1.Howl({ src: "../sound/click1/click1_3.wav" }),
                ],
                counter: 0,
            },
        ],
        2: [
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click2/click2_1.wav" }),
                    new howler_1.Howl({ src: "../sound/click2/click2_1.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click2/click2_2.wav" }),
                    new howler_1.Howl({ src: "../sound/click2/click2_2.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click2/click2_3.wav" }),
                    new howler_1.Howl({ src: "../sound/click2/click2_3.wav" }),
                ],
                counter: 0,
            },
        ],
        3: [
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click3/click3_1.wav" }),
                    new howler_1.Howl({ src: "../sound/click3/click3_1.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click3/click3_2.wav" }),
                    new howler_1.Howl({ src: "../sound/click3/click3_2.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click3/click3_3.wav" }),
                    new howler_1.Howl({ src: "../sound/click3/click3_3.wav" }),
                ],
                counter: 0,
            },
        ],
        4: [
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click4/click4_1.wav" }),
                    new howler_1.Howl({ src: "../sound/click4/click4_11.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click4/click4_2.wav" }),
                    new howler_1.Howl({ src: "../sound/click4/click4_22.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click4/click4_3.wav" }),
                    new howler_1.Howl({ src: "../sound/click4/click4_33.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click4/click4_4.wav" }),
                    new howler_1.Howl({ src: "../sound/click4/click4_44.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click4/click4_5.wav" }),
                    new howler_1.Howl({ src: "../sound/click4/click4_55.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click4/click4_6.wav" }),
                    new howler_1.Howl({ src: "../sound/click4/click4_66.wav" }),
                ],
                counter: 0,
            },
        ],
        5: [
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click5/click5_1.wav" }),
                    new howler_1.Howl({ src: "../sound/click5/click5_11.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click5/click5_2.wav" }),
                    new howler_1.Howl({ src: "../sound/click5/click5_22.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click5/click5_3.wav" }),
                    new howler_1.Howl({ src: "../sound/click5/click5_33.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click5/click5_4.wav" }),
                    new howler_1.Howl({ src: "../sound/click5/click5_44.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click5/click5_5.wav" }),
                    new howler_1.Howl({ src: "../sound/click5/click5_55.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click5/click5_6.wav" }),
                    new howler_1.Howl({ src: "../sound/click5/click5_66.wav" }),
                ],
                counter: 0,
            },
        ],
        6: [
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click6/click6_1.wav" }),
                    new howler_1.Howl({ src: "../sound/click6/click6_11.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click6/click6_2.wav" }),
                    new howler_1.Howl({ src: "../sound/click6/click6_22.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click6/click6_3.wav" }),
                    new howler_1.Howl({ src: "../sound/click6/click6_33.wav" }),
                ],
                counter: 0,
            },
        ],
        7: [
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click7/click7_1.wav" }),
                    new howler_1.Howl({ src: "../sound/click7/click7_11.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click7/click7_2.wav" }),
                    new howler_1.Howl({ src: "../sound/click7/click7_22.wav" }),
                ],
                counter: 0,
            },
            {
                sounds: [
                    new howler_1.Howl({ src: "../sound/click7/click7_3.wav" }),
                    new howler_1.Howl({ src: "../sound/click7/click7_33.wav" }),
                ],
                counter: 0,
            },
        ],
    };
}
exports.init = init;
function previewClick(val) {
    if (clickSounds === null)
        init();
    clickSounds[val][0].sounds[0].seek(0);
    clickSounds[val][0].sounds[0].play();
}
exports.previewClick = previewClick;
function playClick() {
    if (config_1.default.playSoundOnClick === "off")
        return;
    if (clickSounds === null)
        init();
    const randomSound = (0, misc_1.randomElementFromArray)(clickSounds[config_1.default.playSoundOnClick]);
    randomSound.counter++;
    if (randomSound.counter === 2)
        randomSound.counter = 0;
    randomSound.sounds[randomSound.counter].seek(0);
    randomSound.sounds[randomSound.counter].play();
}
exports.playClick = playClick;
function playError() {
    if (!config_1.default.playSoundOnError)
        return;
    if (errorSound === null)
        initErrorSound();
    errorSound.seek(0);
    errorSound.play();
}
exports.playError = playError;
function setVolume(val) {
    // not sure why it complains but it works
    // @ts-ignore
    howler_1.default.Howler.volume(val);
}
exports.setVolume = setVolume;
ConfigEvent.subscribe((eventKey, eventValue) => {
    if (eventKey === "playSoundOnClick" && eventValue !== "off")
        init();
    if (eventKey === "soundVolume")
        setVolume(eventValue);
});


/***/ }),

/***/ "./src/scripts/controllers/tag-controller.ts":
/*!***************************************************!*\
  !*** ./src/scripts/controllers/tag-controller.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadActiveFromLocalStorage = exports.toggle = exports.set = exports.clear = exports.saveActiveToLocalStorage = void 0;
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const ModesNotice = __importStar(__webpack_require__(/*! ../elements/modes-notice */ "./src/scripts/elements/modes-notice.ts"));
function saveActiveToLocalStorage() {
    var _a;
    const tags = [];
    try {
        (_a = DB.getSnapshot().tags) === null || _a === void 0 ? void 0 : _a.forEach((tag) => {
            if (tag.active === true) {
                tags.push(tag._id);
            }
        });
        window.localStorage.setItem("activeTags", JSON.stringify(tags));
    }
    catch (e) { }
}
exports.saveActiveToLocalStorage = saveActiveToLocalStorage;
function clear(nosave = false) {
    var _a;
    const snapshot = DB.getSnapshot();
    snapshot.tags = (_a = snapshot.tags) === null || _a === void 0 ? void 0 : _a.map((tag) => {
        tag.active = false;
        return tag;
    });
    DB.setSnapshot(snapshot);
    ModesNotice.update();
    if (!nosave)
        saveActiveToLocalStorage();
}
exports.clear = clear;
function set(tagid, state, nosave = false) {
    var _a;
    const snapshot = DB.getSnapshot();
    snapshot.tags = (_a = snapshot.tags) === null || _a === void 0 ? void 0 : _a.map((tag) => {
        if (tag._id === tagid) {
            tag.active = state;
        }
        return tag;
    });
    DB.setSnapshot(snapshot);
    ModesNotice.update();
    if (!nosave)
        saveActiveToLocalStorage();
}
exports.set = set;
function toggle(tagid, nosave = false) {
    var _a;
    (_a = DB.getSnapshot().tags) === null || _a === void 0 ? void 0 : _a.forEach((tag) => {
        if (tag._id === tagid) {
            if (tag.active === undefined) {
                tag.active = true;
            }
            else {
                tag.active = !tag.active;
            }
        }
    });
    ModesNotice.update();
    if (!nosave)
        saveActiveToLocalStorage();
}
exports.toggle = toggle;
function loadActiveFromLocalStorage() {
    var _a;
    let newTags = window.localStorage.getItem("activeTags");
    if (newTags != undefined && newTags !== "") {
        try {
            newTags = (_a = JSON.parse(newTags)) !== null && _a !== void 0 ? _a : [];
        }
        catch (e) {
            newTags = [];
        }
        newTags.forEach((ntag) => {
            toggle(ntag, true);
        });
        saveActiveToLocalStorage();
    }
}
exports.loadActiveFromLocalStorage = loadActiveFromLocalStorage;


/***/ }),

/***/ "./src/scripts/controllers/theme-controller.ts":
/*!*****************************************************!*\
  !*** ./src/scripts/controllers/theme-controller.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a, _b;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.applyCustomBackground = exports.applyCustomBackgroundSize = exports.clearRandom = exports.randomizeTheme = exports.clearPreview = exports.set = exports.preview = exports.colorVars = exports.randomTheme = void 0;
const ThemeColors = __importStar(__webpack_require__(/*! ../elements/theme-colors */ "./src/scripts/elements/theme-colors.ts"));
const ChartController = __importStar(__webpack_require__(/*! ./chart-controller */ "./src/scripts/controllers/chart-controller.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const BackgroundFilter = __importStar(__webpack_require__(/*! ../elements/custom-background-filter */ "./src/scripts/elements/custom-background-filter.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const AnalyticsController = __importStar(__webpack_require__(/*! ../controllers/analytics-controller */ "./src/scripts/controllers/analytics-controller.ts"));
let isPreviewingTheme = false;
exports.randomTheme = null;
exports.colorVars = [
    "--bg-color",
    "--main-color",
    "--caret-color",
    "--sub-color",
    "--text-color",
    "--error-color",
    "--error-extra-color",
    "--colorful-error-color",
    "--colorful-error-extra-color",
];
function updateFavicon(size, curveSize) {
    return __awaiter(this, void 0, void 0, function* () {
        setTimeout(() => __awaiter(this, void 0, void 0, function* () {
            let maincolor, bgcolor;
            bgcolor = yield ThemeColors.get("bg");
            maincolor = yield ThemeColors.get("main");
            if (window.location.hostname === "localhost") {
                const swap = maincolor;
                maincolor = bgcolor;
                bgcolor = swap;
            }
            if (bgcolor == maincolor) {
                bgcolor = "#111";
                maincolor = "#eee";
            }
            const canvas = document.createElement("canvas");
            canvas.width = size;
            canvas.height = size;
            const ctx = canvas.getContext("2d");
            ctx.beginPath();
            ctx.moveTo(0, curveSize);
            //top left
            ctx.quadraticCurveTo(0, 0, curveSize, 0);
            ctx.lineTo(size - curveSize, 0);
            //top right
            ctx.quadraticCurveTo(size, 0, size, curveSize);
            ctx.lineTo(size, size - curveSize);
            ctx.quadraticCurveTo(size, size, size - curveSize, size);
            ctx.lineTo(curveSize, size);
            ctx.quadraticCurveTo(0, size, 0, size - curveSize);
            ctx.fillStyle = bgcolor;
            ctx.fill();
            ctx.font = "900 " + (size / 2) * 1.2 + "px Lexend Deca";
            ctx.textAlign = "center";
            ctx.fillStyle = maincolor;
            ctx.fillText("mt", size / 2 + 1, (size / 3) * 2.1);
            // $("body").prepend(canvas);
            $("#favicon").attr("href", canvas.toDataURL("image/png"));
        }), 125);
    });
}
function clearCustomTheme() {
    exports.colorVars.forEach((e) => {
        document.documentElement.style.setProperty(e, "");
    });
}
const loadStyle = function (name) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve) => {
            const link = document.createElement("link");
            link.type = "text/css";
            link.rel = "stylesheet";
            link.id = "currentTheme";
            link.onload = () => {
                resolve();
            };
            if (name === "custom") {
                link.href = `themes/serika_dark.css`;
            }
            else {
                link.href = `themes/${name}.css`;
            }
            const headScript = document.querySelector("#currentTheme");
            headScript.replaceWith(link);
        });
    });
};
// export function changeCustomTheme(themeId: string, nosave = false): void {
//   const customThemes = DB.getSnapshot().customThemes;
//   const colors = customThemes.find((e) => e._id === themeId)
//     ?.colors as string[];
//   UpdateConfig.setCustomThemeColors(colors, nosave);
// }
function apply(themeName, isCustom, isPreview = false) {
    clearCustomTheme();
    let name = "serika_dark";
    if (!isCustom) {
        name = themeName;
    }
    else {
        name = "custom";
    }
    ThemeColors.reset();
    $(".keymap-key").attr("style", "");
    // $("#currentTheme").attr("href", `themes/${name}.css`);
    loadStyle(name).then(() => {
        var _a, _b;
        ThemeColors.update();
        if (isCustom) {
            let colorValues = config_1.default.customThemeColors;
            const snapshot = DB.getSnapshot();
            if (isCustom && !isPreview && snapshot) {
                const customColors = (_b = (_a = snapshot.customThemes.find((e) => e._id === themeName)) === null || _a === void 0 ? void 0 : _a.colors) !== null && _b !== void 0 ? _b : [];
                if (customColors.length > 0) {
                    UpdateConfig.setCustomThemeColors(customColors);
                }
            }
            if (themeName !== "custom" && snapshot) {
                const customThemes = snapshot.customThemes;
                const customThemeById = customThemes.find((e) => e._id === themeName);
                colorValues = customThemeById === null || customThemeById === void 0 ? void 0 : customThemeById.colors;
            }
            exports.colorVars.forEach((e, index) => {
                document.documentElement.style.setProperty(e, colorValues[index]);
            });
        }
        AnalyticsController.log("changedTheme", { theme: themeName });
        if (!isPreview) {
            ThemeColors.getAll().then((colors) => {
                $(".keymap-key").attr("style", "");
                ChartController.updateAllChartColors();
                updateFavicon(128, 32);
                $("#metaThemeColor").attr("content", colors.bg);
            });
        }
        $(".current-theme .text").text(isCustom ? "custom" : themeName.replace(/_/g, " "));
    });
}
function preview(themeIdentifier, isCustom, randomTheme = false) {
    isPreviewingTheme = true;
    apply(themeIdentifier, isCustom, !randomTheme);
}
exports.preview = preview;
function set(themeIdentifier, isCustom) {
    apply(themeIdentifier, isCustom);
}
exports.set = set;
function clearPreview() {
    if (isPreviewingTheme) {
        isPreviewingTheme = false;
        exports.randomTheme = null;
        if (config_1.default.customTheme) {
            apply("custom", true);
        }
        else {
            apply(config_1.default.theme, false);
        }
    }
}
exports.clearPreview = clearPreview;
function randomizeTheme() {
    let randomList;
    Misc.getThemesList().then((themes) => {
        var _a, _b;
        if (config_1.default.randomTheme === "fav" && config_1.default.favThemes.length > 0) {
            randomList = config_1.default.favThemes;
        }
        else if (config_1.default.randomTheme === "light") {
            randomList = themes
                .filter((t) => Misc.isColorLight(t.bgColor))
                .map((t) => t.name);
        }
        else if (config_1.default.randomTheme === "dark") {
            randomList = themes
                .filter((t) => Misc.isColorDark(t.bgColor))
                .map((t) => t.name);
        }
        else if (config_1.default.randomTheme === "on") {
            randomList = themes.map((t) => {
                return t.name;
            });
        }
        else {
            randomList = DB.getSnapshot().customThemes.map((ct) => ct._id);
        }
        const previousTheme = exports.randomTheme;
        exports.randomTheme = Misc.randomElementFromArray(randomList);
        // if (Config.randomTheme === "custom") {
        // changeCustomTheme(randomTheme, true);
        // } else {
        preview(exports.randomTheme, config_1.default.randomTheme === "custom");
        // }
        if (previousTheme != exports.randomTheme) {
            let name = exports.randomTheme.replace(/_/g, " ");
            if (config_1.default.randomTheme === "custom") {
                name = ((_b = (_a = DB.getSnapshot().customThemes.find((ct) => ct._id === exports.randomTheme)) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : "custom").replace(/_/g, " ");
            }
            Notifications.add(name, 0);
        }
    });
}
exports.randomizeTheme = randomizeTheme;
function clearRandom() {
    if (exports.randomTheme === null)
        return;
    exports.randomTheme = null;
    if (config_1.default.customTheme) {
        apply("custom", true);
    }
    else {
        apply(config_1.default.theme, false);
    }
}
exports.clearRandom = clearRandom;
function applyCustomBackgroundSize() {
    if (config_1.default.customBackgroundSize == "max") {
        $(".customBackground img").css({
            // width: "calc(100%)",
            // height: "calc(100%)",
            objectFit: "",
        });
    }
    else {
        $(".customBackground img").css({
            objectFit: config_1.default.customBackgroundSize,
        });
    }
}
exports.applyCustomBackgroundSize = applyCustomBackgroundSize;
function applyCustomBackground() {
    // $(".customBackground").css({
    //   backgroundImage: `url(${Config.customBackground})`,
    //   backgroundAttachment: "fixed",
    // });
    if (config_1.default.customBackground === "") {
        $("#words").removeClass("noErrorBorder");
        $("#resultWordsHistory").removeClass("noErrorBorder");
        $(".customBackground img").remove();
    }
    else {
        $("#words").addClass("noErrorBorder");
        $("#resultWordsHistory").addClass("noErrorBorder");
        $(".customBackground").html(`<img src="${config_1.default.customBackground}" />`);
        BackgroundFilter.apply();
        applyCustomBackgroundSize();
    }
}
exports.applyCustomBackground = applyCustomBackground;
(_b = (_a = window
    .matchMedia) === null || _a === void 0 ? void 0 : _a.call(window, "(prefers-color-scheme: dark)")) === null || _b === void 0 ? void 0 : _b.addEventListener("change", (event) => {
    if (!config_1.default.autoSwitchTheme || config_1.default.customTheme)
        return;
    if (event.matches) {
        set(config_1.default.themeDark, false);
    }
    else {
        set(config_1.default.themeLight, false);
    }
});
ConfigEvent.subscribe((eventKey, eventValue, nosave) => {
    if (eventKey === "customTheme") {
        eventValue ? set("custom", true) : set(config_1.default.theme, false);
    }
    if (eventKey === "customThemeColors") {
        nosave ? preview("custom", true) : set("custom", true);
    }
    if (eventKey === "theme") {
        clearPreview();
        set(eventValue, false);
    }
    if (eventKey === "setThemes") {
        clearPreview();
        if (eventValue) {
            set("custom", true);
        }
        else {
            if (config_1.default.autoSwitchTheme) {
                if (window.matchMedia &&
                    window.matchMedia("(prefers-color-scheme: dark)").matches) {
                    set(config_1.default.themeDark, false);
                }
                else {
                    set(config_1.default.themeLight, false);
                }
            }
            else {
                set(config_1.default.theme, false);
            }
        }
    }
    if (eventKey === "randomTheme" && eventValue === "off")
        clearRandom();
    if (eventKey === "customBackground")
        applyCustomBackground();
    if (eventKey === "customBackgroundSize")
        applyCustomBackgroundSize();
    if (eventKey === "autoSwitchTheme") {
        if (eventValue) {
            if (window.matchMedia &&
                window.matchMedia("(prefers-color-scheme: dark)").matches) {
                set(config_1.default.themeDark, false);
            }
            else {
                set(config_1.default.themeLight, false);
            }
        }
        else {
            set(config_1.default.theme, false);
        }
    }
    if (eventKey === "themeLight" &&
        config_1.default.autoSwitchTheme &&
        !(window.matchMedia &&
            window.matchMedia("(prefers-color-scheme: dark)").matches) &&
        !nosave) {
        set(config_1.default.themeLight, false);
    }
    if (eventKey === "themeDark" &&
        config_1.default.autoSwitchTheme &&
        window.matchMedia &&
        window.matchMedia("(prefers-color-scheme: dark)").matches &&
        !nosave) {
        set(config_1.default.themeDark, false);
    }
});


/***/ }),

/***/ "./src/scripts/controllers/verification-controller.ts":
/*!************************************************************!*\
  !*** ./src/scripts/controllers/verification-controller.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.verify = exports.set = exports.data = void 0;
const ape_1 = __importDefault(__webpack_require__(/*! ../ape */ "./src/scripts/ape/index.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const Settings = __importStar(__webpack_require__(/*! ../pages/settings */ "./src/scripts/pages/settings.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const Loader = __importStar(__webpack_require__(/*! ../elements/loader */ "./src/scripts/elements/loader.ts"));
exports.data = null;
function set(val) {
    exports.data = val;
}
exports.set = set;
function verify(uid) {
    return __awaiter(this, void 0, void 0, function* () {
        if (exports.data === null)
            return;
        Notifications.add("Linking Discord account", 0, 3);
        Loader.show();
        exports.data.uid = uid;
        const response = yield ape_1.default.users.linkDiscord(exports.data);
        Loader.hide();
        if (response.status !== 200) {
            return Notifications.add("Failed to link Discord: " + response.message, -1);
        }
        Notifications.add("Accounts linked", 1);
        const snapshot = DB.getSnapshot();
        snapshot.discordId = response.data.did;
        DB.setSnapshot(snapshot);
        Settings.updateDiscordSection();
    });
}
exports.verify = verify;


/***/ }),

/***/ "./src/scripts/db.ts":
/*!***************************!*\
  !*** ./src/scripts/db.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.updateLocalStats = exports.saveLocalResult = exports.saveConfig = exports.updateLbMemory = exports.saveLocalTagPB = exports.getLocalTagPB = exports.saveLocalPB = exports.getLocalPB = exports.getUserAverage10 = exports.getUserHighestWpm = exports.deleteCustomTheme = exports.editCustomTheme = exports.addCustomTheme = exports.getCustomThemeById = exports.getUserResults = exports.initSnapshot = exports.setSnapshot = exports.getSnapshot = void 0;
const ape_1 = __importDefault(__webpack_require__(/*! ./ape */ "./src/scripts/ape/index.ts"));
const AccountButton = __importStar(__webpack_require__(/*! ./elements/account-button */ "./src/scripts/elements/account-button.ts"));
const Notifications = __importStar(__webpack_require__(/*! ./elements/notifications */ "./src/scripts/elements/notifications.ts"));
const LoadingPage = __importStar(__webpack_require__(/*! ./pages/loading */ "./src/scripts/pages/loading.ts"));
const default_config_1 = __importDefault(__webpack_require__(/*! ./constants/default-config */ "./src/scripts/constants/default-config.ts"));
const firebase_1 = __webpack_require__(/*! ./firebase */ "./src/scripts/firebase.ts");
const default_snapshot_1 = __webpack_require__(/*! ./constants/default-snapshot */ "./src/scripts/constants/default-snapshot.ts");
let dbSnapshot;
function getSnapshot() {
    return dbSnapshot;
}
exports.getSnapshot = getSnapshot;
function setSnapshot(newSnapshot) {
    try {
        delete newSnapshot.banned;
    }
    catch (_a) { }
    try {
        delete newSnapshot.verified;
    }
    catch (_b) { }
    dbSnapshot = newSnapshot;
}
exports.setSnapshot = setSnapshot;
function initSnapshot() {
    var _a, _b, _c, _d, _e;
    return __awaiter(this, void 0, void 0, function* () {
        //send api request with token that returns tags, presets, and data needed for snap
        const snap = default_snapshot_1.defaultSnap;
        try {
            if (firebase_1.Auth.currentUser == null)
                return false;
            // if (ActivePage.get() == "loading") {
            //   LoadingPage.updateBar(22.5);
            // } else {
            //   LoadingPage.updateBar(16);
            // }
            // LoadingPage.updateText("Downloading user...");
            const [userResponse, configResponse, tagsResponse, presetsResponse] = yield Promise.all([
                ape_1.default.users.getData(),
                ape_1.default.configs.get(),
                ape_1.default.users.getTags(),
                ape_1.default.presets.get(),
            ]);
            if (userResponse.status !== 200) {
                throw {
                    message: `${userResponse.message} (user)`,
                    responseCode: userResponse.status,
                };
            }
            if (configResponse.status !== 200) {
                throw {
                    message: `${configResponse.message} (config)`,
                    responseCode: configResponse.status,
                };
            }
            if (tagsResponse.status !== 200) {
                throw {
                    message: `${tagsResponse.message} (tags)`,
                    responseCode: tagsResponse.status,
                };
            }
            if (presetsResponse.status !== 200) {
                throw {
                    message: `${presetsResponse.message} (presets)`,
                    responseCode: presetsResponse.status,
                };
            }
            const [userData, configData, tagsData, presetsData] = [
                userResponse,
                configResponse,
                tagsResponse,
                presetsResponse,
            ].map((response) => response.data);
            snap.name = userData.name;
            snap.personalBests = userData.personalBests;
            snap.banned = userData.banned;
            snap.verified = userData.verified;
            snap.discordId = userData.discordId;
            snap.globalStats = {
                time: userData.timeTyping,
                started: userData.startedTests,
                completed: userData.completedTests,
            };
            if (userData.quoteMod === true)
                snap.quoteMod = true;
            snap.quoteRatings = userData.quoteRatings;
            snap.favouriteThemes =
                userData.favouriteThemes === undefined ? [] : userData.favouriteThemes;
            if (((_a = userData.lbMemory) === null || _a === void 0 ? void 0 : _a.time15) || ((_b = userData.lbMemory) === null || _b === void 0 ? void 0 : _b.time60)) {
                //old memory format
                snap.lbMemory = {};
            }
            else if (userData.lbMemory) {
                snap.lbMemory = userData.lbMemory;
            }
            // if (ActivePage.get() == "loading") {
            //   LoadingPage.updateBar(45);
            // } else {
            //   LoadingPage.updateBar(32);
            // }
            // LoadingPage.updateText("Downloading config...");
            if (configData) {
                const newConfig = Object.assign({}, default_config_1.default);
                for (const key in configData.config) {
                    const value = configData.config[key];
                    newConfig[key] = value;
                }
                snap.config = newConfig;
            }
            // if (ActivePage.get() == "loading") {
            //   LoadingPage.updateBar(67.5);
            // } else {
            //   LoadingPage.updateBar(48);
            // }
            // LoadingPage.updateText("Downloading tags...");
            snap.customThemes = (_c = userData.customThemes) !== null && _c !== void 0 ? _c : [];
            snap.tags = tagsData;
            snap.tags = (_d = snap.tags) === null || _d === void 0 ? void 0 : _d.sort((a, b) => {
                if (a.name > b.name) {
                    return 1;
                }
                else if (a.name < b.name) {
                    return -1;
                }
                else {
                    return 0;
                }
            });
            // if (ActivePage.get() == "loading") {
            //   LoadingPage.updateBar(90);
            // } else {
            //   LoadingPage.updateBar(64);
            // }
            // LoadingPage.updateText("Downloading presets...");
            snap.presets = presetsData;
            snap.presets = (_e = snap.presets) === null || _e === void 0 ? void 0 : _e.sort((a, b) => {
                if (a.name > b.name) {
                    return 1;
                }
                else if (a.name < b.name) {
                    return -1;
                }
                else {
                    return 0;
                }
            });
            dbSnapshot = snap;
            return dbSnapshot;
        }
        catch (e) {
            dbSnapshot = default_snapshot_1.defaultSnap;
            throw e;
        }
    });
}
exports.initSnapshot = initSnapshot;
function getUserResults() {
    return __awaiter(this, void 0, void 0, function* () {
        const user = firebase_1.Auth.currentUser;
        if (user == null)
            return false;
        if (dbSnapshot === null)
            return false;
        if (dbSnapshot.results !== undefined) {
            return true;
        }
        else {
            LoadingPage.updateText("Downloading results...");
            LoadingPage.updateBar(90);
            const response = yield ape_1.default.results.get();
            if (response.status !== 200) {
                Notifications.add("Error getting results: " + response.message, -1);
                return false;
            }
            const results = response.data;
            results.forEach((result) => {
                if (result.bailedOut === undefined)
                    result.bailedOut = false;
                if (result.blindMode === undefined)
                    result.blindMode = false;
                if (result.lazyMode === undefined)
                    result.lazyMode = false;
                if (result.difficulty === undefined)
                    result.difficulty = "normal";
                if (result.funbox === undefined)
                    result.funbox = "none";
                if (result.language === undefined || result.language === null) {
                    result.language = "english";
                }
                if (result.numbers === undefined)
                    result.numbers = false;
                if (result.punctuation === undefined)
                    result.punctuation = false;
            });
            dbSnapshot.results = results === null || results === void 0 ? void 0 : results.sort((a, b) => b.timestamp - a.timestamp);
            return true;
        }
    });
}
exports.getUserResults = getUserResults;
function getCustomThemeById(themeID) {
    return dbSnapshot.customThemes.find((t) => t._id === themeID);
}
exports.getCustomThemeById = getCustomThemeById;
function addCustomTheme(theme) {
    return __awaiter(this, void 0, void 0, function* () {
        if (dbSnapshot === null)
            return false;
        if (dbSnapshot.customThemes.length >= 10) {
            Notifications.add("Too many custom themes!", 0);
            return false;
        }
        const response = yield ape_1.default.users.addCustomTheme(theme);
        if (response.status !== 200) {
            Notifications.add("Error adding custom theme: " + response.message, -1);
            return false;
        }
        const newCustomTheme = Object.assign(Object.assign({}, theme), { _id: response.data.theme._id });
        dbSnapshot.customThemes.push(newCustomTheme);
        return true;
    });
}
exports.addCustomTheme = addCustomTheme;
function editCustomTheme(themeId, newTheme) {
    return __awaiter(this, void 0, void 0, function* () {
        const user = firebase_1.Auth.currentUser;
        if (user === null)
            return false;
        if (dbSnapshot === null)
            return false;
        const customTheme = dbSnapshot.customThemes.find((t) => t._id === themeId);
        if (!customTheme) {
            Notifications.add("Editing failed: Custom theme with id: " + themeId + " does not exist", -1);
            return false;
        }
        const response = yield ape_1.default.users.editCustomTheme(themeId, newTheme);
        if (response.status !== 200) {
            Notifications.add("Error editing custom theme: " + response.message, -1);
            return false;
        }
        const newCustomTheme = Object.assign(Object.assign({}, newTheme), { _id: themeId });
        dbSnapshot.customThemes[dbSnapshot.customThemes.indexOf(customTheme)] =
            newCustomTheme;
        return true;
    });
}
exports.editCustomTheme = editCustomTheme;
function deleteCustomTheme(themeId) {
    return __awaiter(this, void 0, void 0, function* () {
        const user = firebase_1.Auth.currentUser;
        if (user === null)
            return false;
        if (dbSnapshot === null)
            return false;
        const customTheme = dbSnapshot.customThemes.find((t) => t._id === themeId);
        if (!customTheme)
            return false;
        const response = yield ape_1.default.users.deleteCustomTheme(themeId);
        if (response.status !== 200) {
            Notifications.add("Error deleting custom theme: " + response.message, -1);
            return false;
        }
        dbSnapshot.customThemes = dbSnapshot.customThemes.filter((t) => t._id !== themeId);
        return true;
    });
}
exports.deleteCustomTheme = deleteCustomTheme;
function getUserHighestWpm(mode, mode2, punctuation, language, difficulty, lazyMode) {
    return __awaiter(this, void 0, void 0, function* () {
        function cont() {
            var _a;
            let topWpm = 0;
            (_a = dbSnapshot.results) === null || _a === void 0 ? void 0 : _a.forEach((result) => {
                if (result.mode == mode &&
                    result.mode2 == mode2 &&
                    result.punctuation == punctuation &&
                    result.language == language &&
                    result.difficulty == difficulty &&
                    (result.lazyMode === lazyMode ||
                        (result.lazyMode === undefined && lazyMode === false))) {
                    if (result.wpm > topWpm) {
                        topWpm = result.wpm;
                    }
                }
            });
            return topWpm;
        }
        const retval = dbSnapshot === null || dbSnapshot.results === undefined ? 0 : cont();
        return retval;
    });
}
exports.getUserHighestWpm = getUserHighestWpm;
function getUserAverage10(mode, mode2, punctuation, language, difficulty, lazyMode) {
    return __awaiter(this, void 0, void 0, function* () {
        const snapshot = getSnapshot();
        if (!snapshot)
            return [0, 0];
        function cont() {
            var _a;
            const activeTagIds = [];
            (_a = snapshot.tags) === null || _a === void 0 ? void 0 : _a.forEach((tag) => {
                if (tag.active === true) {
                    activeTagIds.push(tag._id);
                }
            });
            let wpmSum = 0;
            let accSum = 0;
            let last10Wpm = 0;
            let last10Acc = 0;
            let count = 0;
            let last10Count = 0;
            if (snapshot.results !== undefined) {
                for (const result of snapshot.results) {
                    if (result.mode === mode &&
                        result.punctuation === punctuation &&
                        result.language === language &&
                        result.difficulty === difficulty &&
                        (result.lazyMode === lazyMode ||
                            (result.lazyMode === undefined && lazyMode === false)) &&
                        (activeTagIds.length === 0 ||
                            activeTagIds.some((tagId) => result.tags.includes(tagId)))) {
                        // Continue if the mode2 doesn't match and it's not a quote
                        if (result.mode2 !== mode2 && mode !== "quote") {
                            continue;
                        }
                        // Grab the most recent results from the current mode
                        if (last10Count < 10) {
                            last10Wpm += result.wpm;
                            last10Acc += result.acc;
                            last10Count++;
                        }
                        // Check if the mode2 matches and if it does, add it to the sum, for quotes, this is the quote id
                        if (result.mode2 === mode2) {
                            wpmSum += result.wpm;
                            accSum += result.acc;
                            count++;
                            if (count >= 10)
                                break;
                        }
                    }
                }
            }
            // Return the last 10 average wpm & acc for quote
            // if the current quote id has never been completed before by the user
            if (count === 0 && mode === "quote") {
                return [last10Wpm / last10Count, last10Acc / last10Count];
            }
            return [wpmSum / count, accSum / count];
        }
        const retval = snapshot === null || (yield getUserResults()) === null ? [0, 0] : cont();
        return retval;
    });
}
exports.getUserAverage10 = getUserAverage10;
function getLocalPB(mode, mode2, punctuation, language, difficulty, lazyMode, funbox) {
    return __awaiter(this, void 0, void 0, function* () {
        if (funbox !== "none" && funbox !== "plus_one" && funbox !== "plus_two") {
            return 0;
        }
        function cont() {
            let ret = 0;
            try {
                if (!dbSnapshot.personalBests)
                    return ret;
                dbSnapshot.personalBests[mode][mode2].forEach((pb) => {
                    if (pb.punctuation == punctuation &&
                        pb.difficulty == difficulty &&
                        pb.language == language &&
                        (pb.lazyMode === lazyMode ||
                            (pb.lazyMode === undefined && lazyMode === false))) {
                        ret = pb.wpm;
                    }
                });
                return ret;
            }
            catch (e) {
                return ret;
            }
        }
        const retval = dbSnapshot === null ? 0 : cont();
        return retval;
    });
}
exports.getLocalPB = getLocalPB;
function saveLocalPB(mode, mode2, punctuation, language, difficulty, lazyMode, wpm, acc, raw, consistency) {
    return __awaiter(this, void 0, void 0, function* () {
        if (mode == "quote")
            return;
        function cont() {
            let found = false;
            if (dbSnapshot.personalBests === undefined) {
                dbSnapshot.personalBests = {
                    time: {},
                    words: {},
                    zen: { zen: [] },
                    quote: { custom: [] },
                    custom: { custom: [] },
                };
            }
            if (dbSnapshot.personalBests[mode] === undefined) {
                if (mode === "zen") {
                    dbSnapshot.personalBests["zen"] = { zen: [] };
                }
                else {
                    dbSnapshot.personalBests[mode] = {
                        custom: [],
                    };
                }
            }
            if (dbSnapshot.personalBests[mode][mode2] === undefined) {
                dbSnapshot.personalBests[mode][mode2] =
                    [];
            }
            dbSnapshot.personalBests[mode][mode2].forEach((pb) => {
                if (pb.punctuation == punctuation &&
                    pb.difficulty == difficulty &&
                    pb.language == language &&
                    (pb.lazyMode === lazyMode ||
                        (pb.lazyMode === undefined && lazyMode === false))) {
                    found = true;
                    pb.wpm = wpm;
                    pb.acc = acc;
                    pb.raw = raw;
                    pb.timestamp = Date.now();
                    pb.consistency = consistency;
                    pb.lazyMode = lazyMode;
                }
            });
            if (!found) {
                //nothing found
                dbSnapshot.personalBests[mode][mode2].push({
                    language: language,
                    difficulty: difficulty,
                    lazyMode: lazyMode,
                    punctuation: punctuation,
                    wpm: wpm,
                    acc: acc,
                    raw: raw,
                    timestamp: Date.now(),
                    consistency: consistency,
                });
            }
        }
        if (dbSnapshot != null) {
            cont();
        }
    });
}
exports.saveLocalPB = saveLocalPB;
function getLocalTagPB(tagId, mode, mode2, punctuation, language, difficulty, lazyMode) {
    return __awaiter(this, void 0, void 0, function* () {
        function cont() {
            var _a, _b;
            let ret = 0;
            const filteredtag = ((_a = getSnapshot().tags) !== null && _a !== void 0 ? _a : []).filter((t) => t._id === tagId)[0];
            if (filteredtag === undefined)
                return ret;
            if (filteredtag.personalBests === undefined) {
                filteredtag.personalBests = {
                    time: {},
                    words: {},
                    zen: { zen: [] },
                    quote: { custom: [] },
                    custom: { custom: [] },
                };
            }
            try {
                const personalBests = ((_b = filteredtag.personalBests[mode][mode2]) !== null && _b !== void 0 ? _b : []);
                personalBests.forEach((pb) => {
                    if (pb.punctuation == punctuation &&
                        pb.difficulty == difficulty &&
                        pb.language == language &&
                        (pb.lazyMode === lazyMode ||
                            (pb.lazyMode === undefined && lazyMode === false))) {
                        ret = pb.wpm;
                    }
                });
            }
            catch (e) {
                console.log(e);
            }
            return ret;
        }
        const retval = dbSnapshot === null ? 0 : cont();
        return retval;
    });
}
exports.getLocalTagPB = getLocalTagPB;
function saveLocalTagPB(tagId, mode, mode2, punctuation, language, difficulty, lazyMode, wpm, acc, raw, consistency) {
    return __awaiter(this, void 0, void 0, function* () {
        if (mode == "quote")
            return;
        function cont() {
            var _a;
            const filteredtag = (_a = dbSnapshot.tags) === null || _a === void 0 ? void 0 : _a.filter((t) => t._id === tagId)[0];
            if (!filteredtag.personalBests) {
                filteredtag.personalBests = {
                    time: {},
                    words: {},
                    zen: { zen: [] },
                    quote: { custom: [] },
                    custom: { custom: [] },
                };
            }
            try {
                let found = false;
                if (filteredtag.personalBests[mode][mode2] === undefined) {
                    filteredtag.personalBests[mode][mode2] =
                        [];
                }
                filteredtag.personalBests[mode][mode2].forEach((pb) => {
                    if (pb.punctuation == punctuation &&
                        pb.difficulty == difficulty &&
                        pb.language == language &&
                        (pb.lazyMode === lazyMode ||
                            (pb.lazyMode === undefined && lazyMode === false))) {
                        found = true;
                        pb.wpm = wpm;
                        pb.acc = acc;
                        pb.raw = raw;
                        pb.timestamp = Date.now();
                        pb.consistency = consistency;
                        pb.lazyMode = lazyMode;
                    }
                });
                if (!found) {
                    //nothing found
                    filteredtag.personalBests[mode][mode2].push({
                        language: language,
                        difficulty: difficulty,
                        lazyMode: lazyMode,
                        punctuation: punctuation,
                        wpm: wpm,
                        acc: acc,
                        raw: raw,
                        timestamp: Date.now(),
                        consistency: consistency,
                    });
                }
            }
            catch (e) {
                //that mode or mode2 is not found
                filteredtag.personalBests = {
                    time: {},
                    words: {},
                    zen: { zen: [] },
                    quote: { custom: [] },
                    custom: { custom: [] },
                };
                if (mode === "zen") {
                    filteredtag.personalBests["zen"] = { zen: [] };
                }
                else {
                    filteredtag.personalBests[mode] = {
                        custom: [],
                    };
                }
                filteredtag.personalBests[mode][mode2] = [
                    {
                        language: language,
                        difficulty: difficulty,
                        lazyMode: lazyMode,
                        punctuation: punctuation,
                        wpm: wpm,
                        acc: acc,
                        raw: raw,
                        timestamp: Date.now(),
                        consistency: consistency,
                    },
                ];
            }
        }
        if (dbSnapshot != null) {
            cont();
        }
        return;
    });
}
exports.saveLocalTagPB = saveLocalTagPB;
function updateLbMemory(mode, mode2, language, rank, api = false) {
    return __awaiter(this, void 0, void 0, function* () {
        //could dbSnapshot just be used here instead of getSnapshot()
        if (mode === "time") {
            const timeMode = mode, timeMode2 = mode2;
            const snapshot = getSnapshot();
            if (snapshot.lbMemory === undefined) {
                snapshot.lbMemory = { time: { 15: { english: 0 }, 60: { english: 0 } } };
            }
            if (snapshot.lbMemory[timeMode] === undefined) {
                snapshot.lbMemory[timeMode] = {
                    15: { english: 0 },
                    60: { english: 0 },
                };
            }
            if (snapshot.lbMemory[timeMode][timeMode2] === undefined) {
                snapshot.lbMemory[timeMode][timeMode2] = {};
            }
            const current = snapshot.lbMemory[timeMode][timeMode2][language];
            snapshot.lbMemory[timeMode][timeMode2][language] = rank;
            if (api && current != rank) {
                yield ape_1.default.users.updateLeaderboardMemory(mode, mode2, language, rank);
            }
            setSnapshot(snapshot);
        }
    });
}
exports.updateLbMemory = updateLbMemory;
function saveConfig(config) {
    return __awaiter(this, void 0, void 0, function* () {
        if (firebase_1.Auth.currentUser !== null) {
            AccountButton.loading(true);
            const response = yield ape_1.default.configs.save(config);
            if (response.status !== 200) {
                Notifications.add("Failed to save config: " + response.message, -1);
            }
            AccountButton.loading(false);
        }
    });
}
exports.saveConfig = saveConfig;
function saveLocalResult(result) {
    const snapshot = getSnapshot();
    if (snapshot !== null && snapshot.results !== undefined) {
        snapshot.results.unshift(result);
        setSnapshot(snapshot);
    }
}
exports.saveLocalResult = saveLocalResult;
function updateLocalStats(stats) {
    const snapshot = getSnapshot();
    if (snapshot.globalStats === undefined) {
        snapshot.globalStats = {};
    }
    if (snapshot !== null && snapshot.globalStats !== undefined) {
        if (snapshot.globalStats.time == undefined) {
            snapshot.globalStats.time = stats.time;
        }
        else {
            snapshot.globalStats.time += stats.time;
        }
        if (snapshot.globalStats.started == undefined) {
            snapshot.globalStats.started = stats.started;
        }
        else {
            snapshot.globalStats.started += stats.started;
        }
        if (snapshot.globalStats.completed == undefined) {
            snapshot.globalStats.completed = 1;
        }
        else {
            snapshot.globalStats.completed += 1;
        }
    }
    setSnapshot(snapshot);
}
exports.updateLocalStats = updateLocalStats;
// export async function DB.getLocalTagPB(tagId) {
//   function cont() {
//     let ret = 0;
//     try {
//       ret = dbSnapshot.tags.filter((t) => t.id === tagId)[0].pb;
//       if (ret == undefined) {
//         ret = 0;
//       }
//       return ret;
//     } catch (e) {
//       return ret;
//     }
//   }
//   const retval = dbSnapshot !== null ? cont() : undefined;
//   return retval;
// }
// export async functio(tagId, wpm) {
//   function cont() {
//     dbSnapshot.tags.forEach((tag) => {
//       if (tag._id === tagId) {
//         tag.pb = wpm;
//       }
//     });
//   }
//   if (dbSnapshot != null) {
//     cont();
//   }
// }


/***/ }),

/***/ "./src/scripts/elements/account-button.ts":
/*!************************************************!*\
  !*** ./src/scripts/elements/account-button.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.update = exports.loading = void 0;
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
function loading(truefalse) {
    if (truefalse) {
        $("#top #menu .account .icon").html('<i class="fas fa-fw fa-spin fa-circle-notch"></i>');
        $("#top #menu .account").css("opacity", 1).css("pointer-events", "none");
    }
    else {
        $("#top #menu .account .icon").html('<i class="fas fa-fw fa-user"></i>');
        $("#top #menu .account").css("opacity", 1).css("pointer-events", "auto");
    }
}
exports.loading = loading;
function update() {
    if (firebase_1.Auth.currentUser != null) {
        Misc.swapElements($("#menu .icon-button.login"), $("#menu .icon-button.account"), 250);
    }
    else {
        Misc.swapElements($("#menu .icon-button.account"), $("#menu .icon-button.login"), 250);
    }
}
exports.update = update;


/***/ }),

/***/ "./src/scripts/elements/commandline-lists.ts":
/*!***************************************************!*\
  !*** ./src/scripts/elements/commandline-lists.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getList = exports.pushCurrent = exports.setCurrent = exports.defaultCommands = exports.updateThemeCommands = exports.commandsChallenges = exports.themeCommands = exports.updateCustomThemeListCommands = exports.customThemeListCommands = exports.customThemeCommands = exports.commandsEnableAds = exports.updatePresetCommands = exports.updateTagCommands = exports.commandsKeymapLayouts = exports.current = void 0;
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const Notifications = __importStar(__webpack_require__(/*! ./notifications */ "./src/scripts/elements/notifications.ts"));
const Sound = __importStar(__webpack_require__(/*! ../controllers/sound-controller */ "./src/scripts/controllers/sound-controller.ts"));
const ThemeController = __importStar(__webpack_require__(/*! ../controllers/theme-controller */ "./src/scripts/controllers/theme-controller.ts"));
const CustomTextPopup = __importStar(__webpack_require__(/*! ../popups/custom-text-popup */ "./src/scripts/popups/custom-text-popup.ts"));
const ManualRestart = __importStar(__webpack_require__(/*! ../test/manual-restart-tracker */ "./src/scripts/test/manual-restart-tracker.ts"));
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const PractiseWords = __importStar(__webpack_require__(/*! ../test/practise-words */ "./src/scripts/test/practise-words.ts"));
const TestUI = __importStar(__webpack_require__(/*! ../test/test-ui */ "./src/scripts/test/test-ui.ts"));
const TestLogic = __importStar(__webpack_require__(/*! ../test/test-logic */ "./src/scripts/test/test-logic.ts"));
const Funbox = __importStar(__webpack_require__(/*! ../test/funbox */ "./src/scripts/test/funbox.ts"));
const TagController = __importStar(__webpack_require__(/*! ../controllers/tag-controller */ "./src/scripts/controllers/tag-controller.ts"));
const PresetController = __importStar(__webpack_require__(/*! ../controllers/preset-controller */ "./src/scripts/controllers/preset-controller.ts"));
const CustomText = __importStar(__webpack_require__(/*! ../test/custom-text */ "./src/scripts/test/custom-text.ts"));
const Settings = __importStar(__webpack_require__(/*! ../pages/settings */ "./src/scripts/pages/settings.ts"));
const ChallengeController = __importStar(__webpack_require__(/*! ../controllers/challenge-controller */ "./src/scripts/controllers/challenge-controller.ts"));
const PaceCaret = __importStar(__webpack_require__(/*! ../test/pace-caret */ "./src/scripts/test/pace-caret.ts"));
const TestInput = __importStar(__webpack_require__(/*! ../test/test-input */ "./src/scripts/test/test-input.ts"));
const ModesNotice = __importStar(__webpack_require__(/*! ../elements/modes-notice */ "./src/scripts/elements/modes-notice.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
exports.current = [];
function canBailOut() {
    return ((config_1.default.mode === "custom" &&
        CustomText.isWordRandom &&
        (CustomText.word >= 5000 || CustomText.word == 0)) ||
        (config_1.default.mode === "custom" &&
            !CustomText.isWordRandom &&
            !CustomText.isTimeRandom &&
            CustomText.text.length >= 5000) ||
        (config_1.default.mode === "custom" &&
            CustomText.isTimeRandom &&
            (CustomText.time >= 3600 || CustomText.time == 0)) ||
        (config_1.default.mode === "words" && config_1.default.words >= 5000) ||
        config_1.default.words === 0 ||
        (config_1.default.mode === "time" && (config_1.default.time >= 3600 || config_1.default.time === 0)) ||
        config_1.default.mode == "zen");
}
const commandsLayouts = {
    title: "Layout emulator...",
    configKey: "layout",
    list: [
        {
            id: "couldnotload",
            display: "Could not load the layouts list :(",
        },
    ],
};
Misc.getLayoutsList().then((layouts) => {
    commandsLayouts.list = [];
    commandsLayouts.list.push({
        id: "changeLayoutDefault",
        display: "off",
        configValue: "default",
        exec: () => {
            UpdateConfig.setLayout("default");
            TestLogic.restart();
        },
    });
    Object.keys(layouts).forEach((layout) => {
        commandsLayouts.list.push({
            id: "changeLayout" + Misc.capitalizeFirstLetterOfEachWord(layout),
            display: layout === "default" ? "off" : layout.replace(/_/g, " "),
            configValue: layout,
            exec: () => {
                // UpdateConfig.setSavedLayout(layout);
                UpdateConfig.setLayout(layout);
                TestLogic.restart();
            },
        });
    });
});
exports.commandsKeymapLayouts = {
    title: "Change keymap layout...",
    configKey: "keymapLayout",
    list: [
        {
            id: "couldnotload",
            display: "Could not load the layouts list :(",
        },
    ],
};
Misc.getLayoutsList().then((layouts) => {
    exports.commandsKeymapLayouts.list = [];
    exports.commandsKeymapLayouts.list.push({
        id: "changeKeymapLayoutOverrideSync",
        display: "emulator sync",
        configValue: "overrideSync",
        exec: () => {
            UpdateConfig.setKeymapLayout("overrideSync");
            TestLogic.restart();
        },
    });
    Object.keys(layouts).forEach((layout) => {
        if (layout.toString() != "default") {
            exports.commandsKeymapLayouts.list.push({
                id: "changeKeymapLayout" + Misc.capitalizeFirstLetterOfEachWord(layout),
                display: layout.replace(/_/g, " "),
                configValue: layout,
                exec: () => {
                    UpdateConfig.setKeymapLayout(layout);
                    TestLogic.restart();
                },
            });
        }
    });
});
const commandsLanguages = {
    title: "Language...",
    configKey: "language",
    list: [
        {
            id: "couldnotload",
            display: "Could not load the languages list :(",
        },
    ],
};
commandsLanguages.list = [];
Misc.getLanguageList().then((languages) => {
    languages.forEach((language) => {
        commandsLanguages.list.push({
            id: "changeLanguage" + Misc.capitalizeFirstLetterOfEachWord(language),
            display: language.replace(/_/g, " "),
            configValue: language,
            exec: () => {
                UpdateConfig.setLanguage(language);
                TestLogic.restart();
            },
        });
    });
});
const commandsFunbox = {
    title: "Funbox...",
    configKey: "funbox",
    list: [
        {
            id: "changeFunboxNone",
            display: "none",
            configValue: "none",
            alias: "off",
            exec: () => {
                if (Funbox.setFunbox("none", null)) {
                    TestLogic.restart();
                }
            },
        },
    ],
};
Misc.getFunboxList().then((funboxes) => {
    funboxes.forEach((funbox) => {
        commandsFunbox.list.push({
            id: "changeFunbox" + funbox.name,
            display: funbox.name.replace(/_/g, " "),
            configValue: funbox.name,
            exec: () => {
                if (Funbox.setFunbox(funbox.name, funbox.type)) {
                    TestLogic.restart();
                }
            },
        });
    });
});
const commandsFonts = {
    title: "Font family...",
    configKey: "fontFamily",
    list: [],
};
Misc.getFontsList().then((fonts) => {
    fonts.forEach((font) => {
        commandsFonts.list.push({
            id: "changeFont" + font.name.replace(/ /g, "_"),
            display: font.display !== undefined ? font.display : font.name,
            configValue: font.name,
            hover: () => {
                UpdateConfig.previewFontFamily(font.name);
            },
            exec: () => {
                UpdateConfig.setFontFamily(font.name.replace(/ /g, "_"));
            },
        });
    });
    commandsFonts.list.push({
        id: "setFontFamilyCustom",
        display: "custom...",
        input: true,
        hover: () => {
            UpdateConfig.previewFontFamily(config_1.default.fontFamily);
        },
        exec: (name) => {
            if (!name)
                return;
            UpdateConfig.setFontFamily(name.replace(/\s/g, "_"));
            // Settings.groups.fontFamily.updateInput();
        },
    });
});
const commandsTags = {
    title: "Change tags...",
    list: [],
};
function updateTagCommands() {
    var _a, _b, _c, _d;
    if ((_c = (_b = (_a = DB.getSnapshot()) === null || _a === void 0 ? void 0 : _a.tags) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0 > 0) {
        commandsTags.list = [];
        commandsTags.list.push({
            id: "clearTags",
            display: `Clear tags`,
            icon: "fa-times",
            exec: () => {
                var _a;
                const snapshot = DB.getSnapshot();
                snapshot.tags = (_a = snapshot.tags) === null || _a === void 0 ? void 0 : _a.map((tag) => {
                    tag.active = false;
                    return tag;
                });
                DB.setSnapshot(snapshot);
                ModesNotice.update();
                TagController.saveActiveToLocalStorage();
            },
        });
        (_d = DB.getSnapshot().tags) === null || _d === void 0 ? void 0 : _d.forEach((tag) => {
            let dis = tag.name;
            if (tag.active === true) {
                dis = '<i class="fas fa-fw fa-check"></i>' + dis;
            }
            else {
                dis = '<i class="fas fa-fw"></i>' + dis;
            }
            commandsTags.list.push({
                id: "toggleTag" + tag._id,
                noIcon: true,
                display: dis,
                sticky: true,
                exec: () => {
                    TagController.toggle(tag._id);
                    ModesNotice.update();
                    if (config_1.default.paceCaret === "average") {
                        PaceCaret.init();
                        ModesNotice.update();
                    }
                    let txt = tag.name;
                    if (tag.active === true) {
                        txt = '<i class="fas fa-fw fa-check"></i>' + txt;
                    }
                    else {
                        txt = '<i class="fas fa-fw"></i>' + txt;
                    }
                    if ($("#commandLine").hasClass("allCommands")) {
                        $(`#commandLine .suggestions .entry[command='toggleTag${tag._id}']`).html(`<div class="icon"><i class="fas fa-fw fa-tag"></i></div><div>Tags  > ` +
                            txt);
                    }
                    else {
                        $(`#commandLine .suggestions .entry[command='toggleTag${tag._id}']`).html(txt);
                    }
                },
            });
        });
        // defaultCommands.list[4].visible = true;
    }
}
exports.updateTagCommands = updateTagCommands;
const commandsPresets = {
    title: "Presets...",
    list: [],
};
function updatePresetCommands() {
    const snapshot = DB.getSnapshot();
    if (!snapshot || !snapshot.presets || snapshot.presets.length === 0)
        return;
    commandsPresets.list = [];
    snapshot.presets.forEach((preset) => {
        const dis = preset.name;
        commandsPresets.list.push({
            id: "applyPreset" + preset._id,
            display: dis,
            exec: () => {
                Settings.setEventDisabled(true);
                PresetController.apply(preset._id);
                Settings.setEventDisabled(false);
                Settings.update();
                ModesNotice.update();
            },
        });
    });
}
exports.updatePresetCommands = updatePresetCommands;
const commandsRepeatQuotes = {
    title: "Repeat quotes...",
    configKey: "repeatQuotes",
    list: [
        {
            id: "setRepeatQuotesOff",
            display: "off",
            configValue: "off",
            exec: () => {
                UpdateConfig.setRepeatQuotes("off");
            },
        },
        {
            id: "setRepeatQuotesTyping",
            display: "typing",
            configValue: "typing",
            exec: () => {
                UpdateConfig.setRepeatQuotes("typing");
            },
        },
    ],
};
const commandsLiveWpm = {
    title: "Live WPM...",
    configKey: "showLiveWpm",
    list: [
        {
            id: "setLiveWpmOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setShowLiveWpm(false);
            },
        },
        {
            id: "setLiveWpmOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setShowLiveWpm(true);
            },
        },
    ],
};
const commandsShowAverage = {
    title: "Show average...",
    configKey: "showAverage",
    list: [
        {
            id: "setShowAverageOff",
            display: "off",
            configValue: "off",
            exec: () => {
                UpdateConfig.setShowAverage("off");
            },
        },
        {
            id: "setShowAverageSpeed",
            display: "wpm",
            configValue: "wpm",
            exec: () => {
                UpdateConfig.setShowAverage("wpm");
            },
        },
        {
            id: "setShowAverageAcc",
            display: "accuracy",
            configValue: "acc",
            exec: () => {
                UpdateConfig.setShowAverage("acc");
            },
        },
        {
            id: "setShowAverageBoth",
            display: "both",
            configValue: "both",
            exec: () => {
                UpdateConfig.setShowAverage("both");
            },
        },
    ],
};
const commandsLiveAcc = {
    title: "Live accuracy...",
    configKey: "showLiveAcc",
    list: [
        {
            id: "setLiveAccOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setShowLiveAcc(false);
            },
        },
        {
            id: "setLiveAccOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setShowLiveAcc(true);
            },
        },
    ],
};
const commandsLiveBurst = {
    title: "Live burst...",
    configKey: "showLiveBurst",
    list: [
        {
            id: "setLiveBurstOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setShowLiveBurst(false);
            },
        },
        {
            id: "setLiveBurstOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setShowLiveBurst(true);
            },
        },
    ],
};
const commandsShowTimer = {
    title: "Timer/progress...",
    configKey: "showTimerProgress",
    list: [
        {
            id: "setTimerProgressOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setShowTimerProgress(false);
            },
        },
        {
            id: "setTimerProgressOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setShowTimerProgress(true);
            },
        },
    ],
};
const commandsKeyTips = {
    title: "Key tips...",
    configKey: "showKeyTips",
    list: [
        {
            id: "setKeyTipsOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setKeyTips(false);
            },
        },
        {
            id: "setKeyTipsOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setKeyTips(true);
            },
        },
    ],
};
const commandsFreedomMode = {
    title: "Freedom mode...",
    configKey: "freedomMode",
    list: [
        {
            id: "setfreedomModeOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setFreedomMode(false);
            },
        },
        {
            id: "setfreedomModeOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setFreedomMode(true);
            },
        },
    ],
};
const commandsStrictSpace = {
    title: "Strict space...",
    configKey: "strictSpace",
    list: [
        {
            id: "setStrictSpaceOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setStrictSpace(false);
            },
        },
        {
            id: "setStrictSpaceOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setStrictSpace(true);
            },
        },
    ],
};
const commandsBlindMode = {
    title: "Blind mode...",
    configKey: "blindMode",
    list: [
        {
            id: "setBlindModeOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setBlindMode(false);
            },
        },
        {
            id: "setBlindModeOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setBlindMode(true);
            },
        },
    ],
};
const commandsShowWordsHistory = {
    title: "Always show words history...",
    configKey: "alwaysShowWordsHistory",
    list: [
        {
            id: "setAlwaysShowWordsHistoryOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setAlwaysShowWordsHistory(false);
            },
        },
        {
            id: "setAlwaysShowWordsHistoryOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setAlwaysShowWordsHistory(true);
            },
        },
    ],
};
const commandsIndicateTypos = {
    title: "Indicate typos...",
    configKey: "indicateTypos",
    list: [
        {
            id: "setIndicateTyposOff",
            display: "off",
            configValue: "off",
            exec: () => {
                UpdateConfig.setIndicateTypos("off");
            },
        },
        {
            id: "setIndicateTyposBelow",
            display: "below",
            configValue: "below",
            exec: () => {
                UpdateConfig.setIndicateTypos("below");
            },
        },
        {
            id: "setIndicateTyposReplace",
            display: "replace",
            configValue: "replace",
            exec: () => {
                UpdateConfig.setIndicateTypos("replace");
            },
        },
    ],
};
const commandsHideExtraLetters = {
    title: "Hide extra letters...",
    configKey: "hideExtraLetters",
    list: [
        {
            id: "setHideExtraLettersOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setHideExtraLetters(false);
            },
        },
        {
            id: "setHideExtraLettersOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setHideExtraLetters(true);
            },
        },
    ],
};
const commandsQuickEnd = {
    title: "Quick end...",
    configKey: "quickEnd",
    list: [
        {
            id: "setQuickEndOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setQuickEnd(false);
            },
        },
        {
            id: "setQuickEndOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setQuickEnd(true);
            },
        },
    ],
};
const commandsOppositeShiftMode = {
    title: "Change opposite shift mode...",
    configKey: "oppositeShiftMode",
    list: [
        {
            id: "setOppositeShiftModeOff",
            display: "off",
            configValue: "off",
            exec: () => {
                UpdateConfig.setOppositeShiftMode("off");
                ModesNotice.update();
            },
        },
        {
            id: "setOppositeShiftModeOn",
            display: "on",
            configValue: "on",
            exec: () => {
                UpdateConfig.setOppositeShiftMode("on");
                ModesNotice.update();
            },
        },
        {
            id: "setOppositeShiftModeKeymap",
            display: "keymap",
            configValue: "keymap",
            exec: () => {
                UpdateConfig.setOppositeShiftMode("keymap");
                ModesNotice.update();
            },
        },
    ],
};
const commandsSoundOnError = {
    title: "Sound on error...",
    configKey: "playSoundOnError",
    list: [
        {
            id: "setPlaySoundOnErrorOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setPlaySoundOnError(false);
            },
        },
        {
            id: "setPlaySoundOnErrorOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setPlaySoundOnError(true);
                Sound.playError();
            },
        },
    ],
};
const commandsSoundVolume = {
    title: "Sound volume...",
    configKey: "soundVolume",
    list: [
        {
            id: "setSoundVolume0.1",
            display: "quiet",
            configValue: "0.1",
            exec: () => {
                UpdateConfig.setSoundVolume("0.1");
                Sound.playClick();
            },
        },
        {
            id: "setSoundVolume0.5",
            display: "medium",
            configValue: "0.5",
            exec: () => {
                UpdateConfig.setSoundVolume("0.5");
                Sound.playClick();
            },
        },
        {
            id: "setSoundVolume1.0",
            display: "loud",
            configValue: "1.0",
            exec: () => {
                UpdateConfig.setSoundVolume("1.0");
                Sound.playClick();
            },
        },
    ],
};
const commandsFlipTestColors = {
    title: "Flip test colors...",
    configKey: "flipTestColors",
    list: [
        {
            id: "setFlipTestColorsOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setFlipTestColors(false);
            },
        },
        {
            id: "setFlipTestColorsOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setFlipTestColors(true);
            },
        },
    ],
};
const commandsSmoothLineScroll = {
    title: "Smooth line scroll...",
    configKey: "smoothLineScroll",
    list: [
        {
            id: "setSmoothLineScrollOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setSmoothLineScroll(false);
            },
        },
        {
            id: "setSmoothLineScrollOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setSmoothLineScroll(true);
            },
        },
    ],
};
const commandsAlwaysShowDecimal = {
    title: "Always show decimal places...",
    configKey: "alwaysShowDecimalPlaces",
    list: [
        {
            id: "setAlwaysShowDecimalPlacesOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setAlwaysShowDecimalPlaces(false);
            },
        },
        {
            id: "setAlwaysShowDecimalPlacesOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setAlwaysShowDecimalPlaces(true);
            },
        },
    ],
};
const commandsAlwaysShowCPM = {
    title: "Always show CPM...",
    configKey: "alwaysShowCPM",
    list: [
        {
            id: "setAlwaysShowCPMOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setAlwaysShowCPM(false);
            },
        },
        {
            id: "setAlwaysShowCPMOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setAlwaysShowCPM(true);
            },
        },
    ],
};
const commandsStartGraphsAtZero = {
    title: "Start graphs at zero...",
    configKey: "startGraphsAtZero",
    list: [
        {
            id: "setStartGraphsAtZeroOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setStartGraphsAtZero(false);
            },
        },
        {
            id: "setStartGraphsAtZeroOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setStartGraphsAtZero(true);
            },
        },
    ],
};
const commandsLazyMode = {
    title: "Lazy mode...",
    configKey: "lazyMode",
    list: [
        {
            id: "setLazyModeOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setLazyMode(false);
                TestLogic.restart();
            },
        },
        {
            id: "setLazyModeOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setLazyMode(true);
                TestLogic.restart();
            },
        },
    ],
};
const commandsSwapEscAndTab = {
    title: "Swap esc and tab...",
    configKey: "swapEscAndTab",
    list: [
        {
            id: "setSwapEscAndTabOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setSwapEscAndTab(false);
            },
        },
        {
            id: "setSwapEscAndTabOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setSwapEscAndTab(true);
            },
        },
    ],
};
const commandsShowAllLines = {
    title: "Show all lines...",
    configKey: "showAllLines",
    list: [
        {
            id: "setShowAllLinesOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setShowAllLines(false);
            },
        },
        {
            id: "setShowAllLinesOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setShowAllLines(true);
            },
        },
    ],
};
const commandsColorfulMode = {
    title: "Colorful mode...",
    configKey: "colorfulMode",
    list: [
        {
            id: "setColorfulModeOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setColorfulMode(false);
            },
        },
        {
            id: "setColorfulModeOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setColorfulMode(true);
            },
        },
    ],
};
const commandsOutOfFocusWarning = {
    title: "Colorful mode...",
    configKey: "showOutOfFocusWarning",
    list: [
        {
            id: "setShowOutOfFocusWarningOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setShowOutOfFocusWarning(false);
            },
        },
        {
            id: "setShowOutOfFocusWarningOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setShowOutOfFocusWarning(true);
            },
        },
    ],
};
const commandsKeymapMode = {
    title: "Keymap mode...",
    configKey: "keymapMode",
    list: [
        {
            id: "setKeymapModeOff",
            display: "off",
            configValue: "off",
            exec: () => {
                UpdateConfig.setKeymapMode("off");
            },
        },
        {
            id: "setKeymapModeStatic",
            display: "static",
            configValue: "static",
            exec: () => {
                UpdateConfig.setKeymapMode("static");
            },
        },
        {
            id: "setKeymapModeNext",
            display: "next",
            configValue: "next",
            exec: () => {
                UpdateConfig.setKeymapMode("next");
            },
        },
        {
            id: "setKeymapModeReact",
            display: "react",
            alias: "flash",
            configValue: "react",
            exec: () => {
                UpdateConfig.setKeymapMode("react");
            },
        },
    ],
};
const commandsSoundOnClick = {
    title: "Sound on click...",
    configKey: "playSoundOnClick",
    list: [
        {
            id: "setSoundOnClickOff",
            display: "off",
            configValue: "off",
            exec: () => {
                UpdateConfig.setPlaySoundOnClick("off");
            },
        },
        {
            id: "setSoundOnClick1",
            display: "click",
            configValue: "1",
            hover: () => {
                Sound.previewClick("1");
            },
            exec: () => {
                UpdateConfig.setPlaySoundOnClick("1");
                Sound.playClick();
            },
        },
        {
            id: "setSoundOnClick2",
            display: "beep",
            configValue: "2",
            hover: () => {
                Sound.previewClick("2");
            },
            exec: () => {
                UpdateConfig.setPlaySoundOnClick("2");
                Sound.playClick();
            },
        },
        {
            id: "setSoundOnClick3",
            display: "pop",
            configValue: "3",
            hover: () => {
                Sound.previewClick("3");
            },
            exec: () => {
                UpdateConfig.setPlaySoundOnClick("3");
                Sound.playClick();
            },
        },
        {
            id: "setSoundOnClick4",
            display: "nk creams",
            configValue: "4",
            hover: () => {
                Sound.previewClick("4");
            },
            exec: () => {
                UpdateConfig.setPlaySoundOnClick("4");
                Sound.playClick();
            },
        },
        {
            id: "setSoundOnClick5",
            display: "typewriter",
            configValue: "5",
            hover: () => {
                Sound.previewClick("5");
            },
            exec: () => {
                UpdateConfig.setPlaySoundOnClick("5");
                Sound.playClick();
            },
        },
        {
            id: "setSoundOnClick6",
            display: "osu",
            configValue: "6",
            hover: () => {
                Sound.previewClick("6");
            },
            exec: () => {
                UpdateConfig.setPlaySoundOnClick("6");
                Sound.playClick();
            },
        },
        {
            id: "setSoundOnClick7",
            display: "hitmarker",
            configValue: "7",
            hover: () => {
                Sound.previewClick("7");
            },
            exec: () => {
                UpdateConfig.setPlaySoundOnClick("7");
                Sound.playClick();
            },
        },
    ],
};
const commandsRandomTheme = {
    title: "Random theme...",
    configKey: "randomTheme",
    list: [
        {
            id: "setRandomOff",
            display: "off",
            configValue: "off",
            exec: () => {
                UpdateConfig.setRandomTheme("off");
            },
        },
        {
            id: "setRandomOn",
            display: "on",
            configValue: "on",
            exec: () => {
                UpdateConfig.setRandomTheme("on");
            },
        },
        {
            id: "setRandomFav",
            display: "fav",
            configValue: "fav",
            exec: () => {
                UpdateConfig.setRandomTheme("fav");
            },
        },
        {
            id: "setRandomLight",
            display: "light",
            configValue: "light",
            exec: () => {
                UpdateConfig.setRandomTheme("light");
            },
        },
        {
            id: "setRandomDark",
            display: "dark",
            configValue: "dark",
            exec: () => {
                UpdateConfig.setRandomTheme("dark");
            },
        },
        {
            id: "setRandomCustom",
            display: "custom",
            configValue: "custom",
            exec: () => {
                if (firebase_1.Auth.currentUser === null) {
                    Notifications.add("Multiple custom themes are available to logged in users only", 0);
                    return;
                }
                UpdateConfig.setRandomTheme("custom");
            },
        },
    ],
};
const commandsDifficulty = {
    title: "Difficulty...",
    configKey: "difficulty",
    list: [
        {
            id: "setDifficultyNormal",
            display: "normal",
            configValue: "normal",
            exec: () => {
                UpdateConfig.setDifficulty("normal");
            },
        },
        {
            id: "setDifficultyExpert",
            display: "expert",
            configValue: "expert",
            exec: () => {
                UpdateConfig.setDifficulty("expert");
            },
        },
        {
            id: "setDifficultyMaster",
            display: "master",
            configValue: "master",
            exec: () => {
                UpdateConfig.setDifficulty("master");
            },
        },
    ],
};
exports.commandsEnableAds = {
    title: "Set enable ads...",
    configKey: "enableAds",
    list: [
        {
            id: "setEnableAdsOff",
            display: "off",
            configValue: "off",
            exec: () => {
                UpdateConfig.setEnableAds("off");
            },
        },
        {
            id: "setEnableAdsOn",
            display: "on",
            configValue: "on",
            exec: () => {
                UpdateConfig.setEnableAds("on");
            },
        },
        {
            id: "setEnableMax",
            display: "sellout",
            configValue: "max",
            exec: () => {
                UpdateConfig.setEnableAds("max");
            },
        },
    ],
};
exports.customThemeCommands = {
    title: "Custom theme",
    configKey: "customTheme",
    list: [
        {
            id: "setCustomThemeOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setCustomTheme(false);
            },
        },
        {
            id: "setCustomThemeOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setCustomTheme(true);
            },
        },
    ],
};
exports.customThemeListCommands = {
    title: "Custom themes list...",
    // configKey: "customThemeId",
    list: [],
};
function updateCustomThemeListCommands() {
    if (firebase_1.Auth.currentUser === null) {
        return;
    }
    exports.customThemeListCommands.list = [];
    const snapshot = DB.getSnapshot();
    if (!snapshot)
        return;
    if (DB.getSnapshot().customThemes.length < 0) {
        Notifications.add("You need to create a custom theme first", 0);
        return;
    }
    DB.getSnapshot().customThemes.forEach((theme) => {
        exports.customThemeListCommands.list.push({
            id: "setCustomThemeId" + theme._id,
            display: theme.name,
            configValue: theme._id,
            hover: () => {
                ThemeController.preview(theme._id, true);
            },
            exec: () => {
                // UpdateConfig.setCustomThemeId(theme._id);
                UpdateConfig.setCustomTheme(true);
                ThemeController.set(theme._id, true);
            },
        });
    });
    return;
}
exports.updateCustomThemeListCommands = updateCustomThemeListCommands;
const commandsCaretStyle = {
    title: "Change caret style...",
    configKey: "caretStyle",
    list: [
        {
            id: "setCaretStyleOff",
            display: "off",
            configValue: "off",
            exec: () => {
                UpdateConfig.setCaretStyle("off");
            },
        },
        {
            id: "setCaretStyleDefault",
            display: "line",
            configValue: "default",
            exec: () => {
                UpdateConfig.setCaretStyle("default");
            },
        },
        {
            id: "setCaretStyleBlock",
            display: "block",
            configValue: "block",
            exec: () => {
                UpdateConfig.setCaretStyle("block");
            },
        },
        {
            id: "setCaretStyleOutline",
            display: "outline-block",
            configValue: "outline",
            exec: () => {
                UpdateConfig.setCaretStyle("outline");
            },
        },
        {
            id: "setCaretStyleUnderline",
            display: "underline",
            configValue: "underline",
            exec: () => {
                UpdateConfig.setCaretStyle("underline");
            },
        },
        {
            id: "setCaretStyleCarrot",
            display: "carrot",
            configValue: "carrot",
            visible: false,
            exec: () => {
                UpdateConfig.setCaretStyle("carrot");
            },
        },
        {
            id: "setCaretStyleBanana",
            display: "banana",
            configValue: "banana",
            visible: false,
            exec: () => {
                UpdateConfig.setCaretStyle("banana");
            },
        },
    ],
};
const commandsPaceCaretStyle = {
    title: "Change pace caret style...",
    configKey: "paceCaretStyle",
    list: [
        {
            id: "setPaceCaretStyleDefault",
            display: "line",
            configValue: "default",
            exec: () => {
                UpdateConfig.setPaceCaretStyle("default");
            },
        },
        {
            id: "setPaceCaretStyleBlock",
            display: "block",
            configValue: "block",
            exec: () => {
                UpdateConfig.setPaceCaretStyle("block");
            },
        },
        {
            id: "setPaceCaretStyleOutline",
            display: "outline-block",
            configValue: "outline",
            exec: () => {
                UpdateConfig.setPaceCaretStyle("outline");
            },
        },
        {
            id: "setPaceCaretStyleUnderline",
            display: "underline",
            configValue: "underline",
            exec: () => {
                UpdateConfig.setPaceCaretStyle("underline");
            },
        },
        {
            id: "setPaceCaretStyleCarrot",
            display: "carrot",
            configValue: "carrot",
            visible: false,
            exec: () => {
                UpdateConfig.setPaceCaretStyle("carrot");
            },
        },
        {
            id: "setPaceCaretStyleBanana",
            display: "banana",
            configValue: "banana",
            visible: false,
            exec: () => {
                UpdateConfig.setPaceCaretStyle("banana");
            },
        },
    ],
};
const commandsRepeatedPace = {
    title: "Repeated pace...",
    configKey: "repeatedPace",
    list: [
        {
            id: "setRepeatedPaceOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setRepeatedPace(false);
            },
        },
        {
            id: "setRepeatedPaceOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setRepeatedPace(true);
            },
        },
    ],
};
const commandsPaceCaret = {
    title: "Pace caret mode...",
    configKey: "paceCaret",
    list: [
        {
            id: "setPaceCaretOff",
            display: "off",
            configValue: "off",
            exec: () => {
                UpdateConfig.setPaceCaret("off");
                TestLogic.restart();
            },
        },
        {
            id: "setPaceCaretPb",
            display: "pb",
            configValue: "pb",
            exec: () => {
                UpdateConfig.setPaceCaret("pb");
                TestLogic.restart();
            },
        },
        {
            id: "setPaceCaretAverage",
            display: "average",
            configValue: "average",
            exec: () => {
                UpdateConfig.setPaceCaret("average");
                TestLogic.restart();
            },
        },
        {
            id: "setPaceCaretCustom",
            display: "custom...",
            configValue: "custom",
            input: true,
            exec: (input) => {
                if (!input)
                    return;
                UpdateConfig.setPaceCaretCustomSpeed(parseInt(input));
                UpdateConfig.setPaceCaret("custom");
                TestLogic.restart();
            },
        },
    ],
};
const commandsMinWpm = {
    title: "Change min wpm mode...",
    configKey: "minWpm",
    list: [
        {
            id: "setMinWpmOff",
            display: "off",
            configValue: "off",
            exec: () => {
                UpdateConfig.setMinWpm("off");
            },
        },
        {
            id: "setMinWpmCustom",
            display: "custom...",
            configValue: "custom",
            input: true,
            exec: (input) => {
                if (!input)
                    return;
                UpdateConfig.setMinWpmCustomSpeed(parseInt(input));
                UpdateConfig.setMinWpm("custom");
            },
        },
    ],
};
const commandsMinAcc = {
    title: "Change min accuracy mode...",
    configKey: "minAcc",
    list: [
        {
            id: "setMinAccOff",
            display: "off",
            configValue: "off",
            exec: () => {
                UpdateConfig.setMinAcc("off");
            },
        },
        {
            id: "setMinAccCustom",
            display: "custom...",
            configValue: "custom",
            input: true,
            exec: (input) => {
                if (!input)
                    return;
                UpdateConfig.setMinAccCustom(parseInt(input));
                UpdateConfig.setMinAcc("custom");
            },
        },
    ],
};
const commandsMinBurst = {
    title: "Change min burst mode...",
    configKey: "minBurst",
    list: [
        {
            id: "setMinBurstOff",
            display: "off",
            configValue: "off",
            exec: () => {
                UpdateConfig.setMinBurst("off");
            },
        },
        {
            id: "setMinBurstFixed",
            display: "fixed...",
            configValue: "fixed",
            input: true,
            exec: (input) => {
                if (!input)
                    return;
                UpdateConfig.setMinBurst("fixed");
                UpdateConfig.setMinBurstCustomSpeed(parseInt(input));
            },
        },
        {
            id: "setMinBurstFlex",
            display: "flex...",
            configValue: "flex",
            input: true,
            exec: (input) => {
                if (!input)
                    return;
                UpdateConfig.setMinBurst("flex");
                UpdateConfig.setMinBurstCustomSpeed(parseInt(input));
            },
        },
    ],
};
const commandsKeymapStyle = {
    title: "Keymap style...",
    configKey: "keymapStyle",
    list: [
        {
            id: "setKeymapStyleStaggered",
            display: "staggered",
            configValue: "staggered",
            exec: () => {
                UpdateConfig.setKeymapStyle("staggered");
            },
        },
        {
            id: "setKeymapStyleAlice",
            display: "alice",
            configValue: "alice",
            exec: () => {
                UpdateConfig.setKeymapStyle("alice");
            },
        },
        {
            id: "setKeymapStyleMatrix",
            display: "matrix",
            configValue: "matrix",
            exec: () => {
                UpdateConfig.setKeymapStyle("matrix");
            },
        },
        {
            id: "setKeymapStyleSplit",
            display: "split",
            configValue: "split",
            exec: () => {
                UpdateConfig.setKeymapStyle("split");
            },
        },
        {
            id: "setKeymapStyleSplitMatrix",
            display: "split matrix",
            configValue: "split_matrix",
            exec: () => {
                UpdateConfig.setKeymapStyle("split_matrix");
            },
        },
    ],
};
const commandsKeymapLegendStyle = {
    title: "Keymap legend style...",
    configKey: "keymapLegendStyle",
    list: [
        {
            id: "setKeymapLegendStyleLowercase",
            display: "lowercase",
            configValue: "lowercase",
            exec: () => {
                UpdateConfig.setKeymapLegendStyle("lowercase");
            },
        },
        {
            id: "setKeymapLegendStyleUppercase",
            display: "uppercase",
            configValue: "uppercase",
            exec: () => {
                UpdateConfig.setKeymapLegendStyle("uppercase");
            },
        },
        {
            id: "setKeymapLegendStyleBlank",
            display: "blank",
            configValue: "blank",
            exec: () => {
                UpdateConfig.setKeymapLegendStyle("blank");
            },
        },
        {
            id: "setKeymapLegendStyleDynamic",
            display: "dynamic",
            configValue: "dynamic",
            exec: () => {
                UpdateConfig.setKeymapLegendStyle("dynamic");
            },
        },
    ],
};
const commandsBritishEnglish = {
    title: "British english...",
    configKey: "britishEnglish",
    list: [
        {
            id: "setBritishEnglishOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setBritishEnglish(false);
                TestLogic.restart();
            },
        },
        {
            id: "setBritishEnglishOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setBritishEnglish(true);
                TestLogic.restart();
            },
        },
    ],
};
const commandsHighlightMode = {
    title: "Highlight mode...",
    configKey: "highlightMode",
    list: [
        {
            id: "setHighlightModeOff",
            display: "off",
            configValue: "off",
            exec: () => {
                UpdateConfig.setHighlightMode("off");
            },
        },
        {
            id: "setHighlightModeLetter",
            display: "letter",
            configValue: "letter",
            exec: () => {
                UpdateConfig.setHighlightMode("letter");
            },
        },
        {
            id: "setHighlightModeWord",
            display: "word",
            configValue: "word",
            exec: () => {
                UpdateConfig.setHighlightMode("word");
            },
        },
    ],
};
const commandsTimerStyle = {
    title: "Timer/progress style...",
    configKey: "timerStyle",
    list: [
        {
            id: "setTimerStyleBar",
            display: "bar",
            configValue: "bar",
            exec: () => {
                UpdateConfig.setTimerStyle("bar");
            },
        },
        {
            id: "setTimerStyleText",
            display: "text",
            configValue: "text",
            exec: () => {
                UpdateConfig.setTimerStyle("text");
            },
        },
        {
            id: "setTimerStyleMini",
            display: "mini",
            configValue: "mini",
            exec: () => {
                UpdateConfig.setTimerStyle("mini");
            },
        },
    ],
};
const commandsTimerColor = {
    title: "Timer/progress color...",
    configKey: "timerColor",
    list: [
        {
            id: "setTimerColorBlack",
            display: "black",
            configValue: "black",
            exec: () => {
                UpdateConfig.setTimerColor("black");
            },
        },
        {
            id: "setTimerColorSub",
            display: "sub",
            configValue: "sub",
            exec: () => {
                UpdateConfig.setTimerColor("sub");
            },
        },
        {
            id: "setTimerColorText",
            display: "text",
            configValue: "text",
            exec: () => {
                UpdateConfig.setTimerColor("text");
            },
        },
        {
            id: "setTimerColorMain",
            display: "main",
            configValue: "main",
            exec: () => {
                UpdateConfig.setTimerColor("main");
            },
        },
    ],
};
const commandsSingleListCommandLine = {
    title: "Single list command line...",
    configKey: "singleListCommandLine",
    list: [
        {
            id: "singleListCommandLineManual",
            display: "manual",
            configValue: "manual",
            exec: () => {
                UpdateConfig.setSingleListCommandLine("manual");
            },
        },
        {
            id: "singleListCommandLineOn",
            display: "on",
            configValue: "on",
            exec: () => {
                UpdateConfig.setSingleListCommandLine("on");
            },
        },
    ],
};
const commandsCapsLockWarning = {
    title: "Caps lock warning...",
    configKey: "capsLockWarning",
    list: [
        {
            id: "capsLockWarningOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setCapsLockWarning(true);
            },
        },
        {
            id: "capsLockWarningOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setCapsLockWarning(false);
            },
        },
    ],
};
const commandsTimerOpacity = {
    title: "Timer/progress opacity...",
    configKey: "timerOpacity",
    list: [
        {
            id: "setTimerOpacity.25",
            display: ".25",
            configValue: 0.25,
            exec: () => {
                UpdateConfig.setTimerOpacity("0.25");
            },
        },
        {
            id: "setTimerOpacity.5",
            display: ".5",
            configValue: 0.5,
            exec: () => {
                UpdateConfig.setTimerOpacity("0.5");
            },
        },
        {
            id: "setTimerOpacity.75",
            display: ".75",
            configValue: 0.75,
            exec: () => {
                UpdateConfig.setTimerOpacity("0.75");
            },
        },
        {
            id: "setTimerOpacity1",
            display: "1",
            configValue: 1,
            exec: () => {
                UpdateConfig.setTimerOpacity("1");
            },
        },
    ],
};
const commandsWordCount = {
    title: "Change word count...",
    configKey: "words",
    list: [
        {
            id: "changeWordCount10",
            display: "10",
            configValue: 10,
            exec: () => {
                UpdateConfig.setMode("words");
                UpdateConfig.setWordCount(10);
                TestLogic.restart();
            },
        },
        {
            id: "changeWordCount25",
            display: "25",
            configValue: 25,
            exec: () => {
                UpdateConfig.setMode("words");
                UpdateConfig.setWordCount(25);
                TestLogic.restart();
            },
        },
        {
            id: "changeWordCount50",
            display: "50",
            configValue: 50,
            exec: () => {
                UpdateConfig.setMode("words");
                UpdateConfig.setWordCount(50);
                TestLogic.restart();
            },
        },
        {
            id: "changeWordCount100",
            display: "100",
            configValue: 100,
            exec: () => {
                UpdateConfig.setMode("words");
                UpdateConfig.setWordCount(100);
                TestLogic.restart();
            },
        },
        {
            id: "changeWordCount200",
            display: "200",
            configValue: 200,
            exec: () => {
                UpdateConfig.setMode("words");
                UpdateConfig.setWordCount(200);
                TestLogic.restart();
            },
        },
        {
            id: "changeWordCountCustom",
            display: "custom...",
            input: true,
            exec: (input) => {
                if (!input)
                    return;
                UpdateConfig.setMode("words");
                UpdateConfig.setWordCount(parseInt(input));
                TestLogic.restart();
            },
        },
    ],
};
const commandsQuoteLengthConfig = {
    title: "Change quote length...",
    configKey: "quoteLength",
    list: [
        {
            id: "changeQuoteLengthAll",
            display: "all",
            configValue: [0, 1, 2, 3],
            exec: () => {
                UpdateConfig.setMode("quote");
                UpdateConfig.setQuoteLength([0, 1, 2, 3]);
                TestLogic.restart();
            },
        },
        {
            id: "changeQuoteLengthShort",
            display: "short",
            configValue: 0,
            configValueMode: "include",
            exec: () => {
                UpdateConfig.setMode("quote");
                UpdateConfig.setQuoteLength(0);
                TestLogic.restart();
            },
        },
        {
            id: "changeQuoteLengthMedium",
            display: "medium",
            configValue: 1,
            configValueMode: "include",
            exec: () => {
                UpdateConfig.setMode("quote");
                UpdateConfig.setQuoteLength(1);
                TestLogic.restart();
            },
        },
        {
            id: "changeQuoteLengthLong",
            display: "long",
            configValue: 2,
            configValueMode: "include",
            exec: () => {
                UpdateConfig.setMode("quote");
                UpdateConfig.setQuoteLength(2);
                TestLogic.restart();
            },
        },
        {
            id: "changeQuoteLengthThicc",
            display: "thicc",
            configValue: 3,
            configValueMode: "include",
            exec: () => {
                UpdateConfig.setMode("quote");
                UpdateConfig.setQuoteLength(3);
                TestLogic.restart();
            },
        },
    ],
};
const commandsPunctuation = {
    title: "Change punctuation...",
    configKey: "punctuation",
    list: [
        {
            id: "changePunctuationOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setPunctuation(true);
                TestLogic.restart();
            },
        },
        {
            id: "changePunctuationOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setPunctuation(false);
                TestLogic.restart();
            },
        },
    ],
};
const commandsNumbers = {
    title: "Numbers...",
    configKey: "numbers",
    list: [
        {
            id: "changeNumbersOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setNumbers(true);
                TestLogic.restart();
            },
        },
        {
            id: "changeNumbersOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setNumbers(false);
                TestLogic.restart();
            },
        },
    ],
};
const commandsSmoothCaret = {
    title: "Smooth caret...",
    configKey: "smoothCaret",
    list: [
        {
            id: "changeSmoothCaretOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setSmoothCaret(true);
            },
        },
        {
            id: "changeSmoothCaretOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setSmoothCaret(false);
            },
        },
    ],
};
const commandsQuickTab = {
    title: "Quick tab...",
    configKey: "quickTab",
    list: [
        {
            id: "changeQuickTabOn",
            display: "on",
            configValue: true,
            exec: () => {
                UpdateConfig.setQuickTabMode(true);
            },
        },
        {
            id: "changeQuickTabOff",
            display: "off",
            configValue: false,
            exec: () => {
                UpdateConfig.setQuickTabMode(false);
            },
        },
    ],
};
const commandsMode = {
    title: "Change mode...",
    configKey: "mode",
    list: [
        {
            id: "changeModeTime",
            display: "time",
            configValue: "time",
            exec: () => {
                UpdateConfig.setMode("time");
                TestLogic.restart();
            },
        },
        {
            id: "changeModeWords",
            display: "words",
            configValue: "words",
            exec: () => {
                UpdateConfig.setMode("words");
                TestLogic.restart();
            },
        },
        {
            id: "changeModeQuote",
            display: "quote",
            configValue: "quote",
            exec: () => {
                UpdateConfig.setMode("quote");
                TestLogic.restart();
            },
        },
        {
            id: "changeModeCustom",
            display: "custom",
            configValue: "custom",
            exec: () => {
                UpdateConfig.setMode("custom");
                TestLogic.restart();
            },
        },
        {
            id: "changeModeZen",
            display: "zen",
            configValue: "zen",
            exec: () => {
                UpdateConfig.setMode("zen");
                ManualRestart.set();
                TestLogic.restart();
            },
        },
    ],
};
const commandsTimeConfig = {
    title: "Change time config...",
    configKey: "time",
    list: [
        {
            id: "changeTimeConfig15",
            display: "15",
            configValue: 15,
            exec: () => {
                UpdateConfig.setMode("time");
                UpdateConfig.setTimeConfig(15);
                TestLogic.restart();
            },
        },
        {
            id: "changeTimeConfig30",
            display: "30",
            configValue: 30,
            exec: () => {
                UpdateConfig.setMode("time");
                UpdateConfig.setTimeConfig(30);
                TestLogic.restart();
            },
        },
        {
            id: "changeTimeConfig60",
            display: "60",
            configValue: 60,
            exec: () => {
                UpdateConfig.setMode("time");
                UpdateConfig.setTimeConfig(60);
                TestLogic.restart();
            },
        },
        {
            id: "changeTimeConfig120",
            display: "120",
            configValue: 120,
            exec: () => {
                UpdateConfig.setMode("time");
                UpdateConfig.setTimeConfig(120);
                TestLogic.restart();
            },
        },
        {
            id: "changeTimeConfigCustom",
            display: "custom...",
            input: true,
            exec: (input) => {
                if (!input)
                    return;
                UpdateConfig.setMode("time");
                UpdateConfig.setTimeConfig(parseInt(input));
                TestLogic.restart();
            },
        },
    ],
};
const commandsConfidenceMode = {
    title: "Confidence mode...",
    configKey: "confidenceMode",
    list: [
        {
            id: "changeConfidenceModeOff",
            display: "off",
            configValue: "off",
            exec: () => {
                UpdateConfig.setConfidenceMode("off");
            },
        },
        {
            id: "changeConfidenceModeOn",
            display: "on",
            configValue: "on",
            exec: () => {
                UpdateConfig.setConfidenceMode("on");
            },
        },
        {
            id: "changeConfidenceModeMax",
            display: "max",
            configValue: "max",
            exec: () => {
                UpdateConfig.setConfidenceMode("max");
            },
        },
    ],
};
const commandsStopOnError = {
    title: "Stop on error...",
    configKey: "stopOnError",
    list: [
        {
            id: "changeStopOnErrorOff",
            display: "off",
            configValue: "off",
            exec: () => {
                UpdateConfig.setStopOnError("off");
            },
        },
        {
            id: "changeStopOnErrorLetter",
            display: "letter",
            configValue: "letter",
            exec: () => {
                UpdateConfig.setStopOnError("letter");
            },
        },
        {
            id: "changeStopOnErrorWord",
            display: "word",
            configValue: "word",
            exec: () => {
                UpdateConfig.setStopOnError("word");
            },
        },
    ],
};
const commandsFontSize = {
    title: "Font size...",
    configKey: "fontSize",
    list: [
        {
            id: "changeFontSize1",
            display: "1x",
            configValue: 1,
            exec: () => {
                UpdateConfig.setFontSize("1");
                TestLogic.restart();
            },
        },
        {
            id: "changeFontSize125",
            display: "1.25x",
            configValue: 125,
            exec: () => {
                UpdateConfig.setFontSize("125");
                TestLogic.restart();
            },
        },
        {
            id: "changeFontSize15",
            display: "1.5x",
            configValue: 15,
            exec: () => {
                UpdateConfig.setFontSize("15");
                TestLogic.restart();
            },
        },
        {
            id: "changeFontSize2",
            display: "2x",
            configValue: 2,
            exec: () => {
                UpdateConfig.setFontSize("2");
                TestLogic.restart();
            },
        },
        {
            id: "changeFontSize3",
            display: "3x",
            configValue: 3,
            exec: () => {
                UpdateConfig.setFontSize("3");
                TestLogic.restart();
            },
        },
        {
            id: "changeFontSize4",
            display: "4x",
            configValue: 4,
            exec: () => {
                UpdateConfig.setFontSize("4");
                TestLogic.restart();
            },
        },
    ],
};
const commandsPageWidth = {
    title: "Page width...",
    configKey: "pageWidth",
    list: [
        {
            id: "setPageWidth100",
            display: "100",
            configValue: "100",
            exec: () => {
                UpdateConfig.setPageWidth("100");
            },
        },
        {
            id: "setPageWidth125",
            display: "125",
            configValue: "125",
            exec: () => {
                UpdateConfig.setPageWidth("125");
            },
        },
        {
            id: "setPageWidth150",
            display: "150",
            configValue: "150",
            exec: () => {
                UpdateConfig.setPageWidth("150");
            },
        },
        {
            id: "setPageWidth200",
            display: "200",
            configValue: "200",
            exec: () => {
                UpdateConfig.setPageWidth("200");
            },
        },
        {
            id: "setPageWidthMax",
            display: "max",
            configValue: "max",
            exec: () => {
                UpdateConfig.setPageWidth("max");
            },
        },
    ],
};
const commandsPractiseWords = {
    title: "Practice words...",
    list: [
        {
            id: "practiseWordsMissed",
            display: "missed",
            noIcon: true,
            exec: () => {
                PractiseWords.init(true, false);
                TestLogic.restart(false, false, undefined, true);
            },
        },
        {
            id: "practiseWordsSlow",
            display: "slow",
            noIcon: true,
            exec: () => {
                PractiseWords.init(false, true);
                TestLogic.restart(false, false, undefined, true);
            },
        },
        {
            id: "practiseWordsBoth",
            display: "both",
            noIcon: true,
            exec: () => {
                PractiseWords.init(true, true);
                TestLogic.restart(false, false, undefined, true);
            },
        },
    ],
};
exports.themeCommands = {
    title: "Theme...",
    configKey: "theme",
    list: [],
};
Misc.getThemesList().then((themes) => {
    themes.forEach((theme) => {
        exports.themeCommands.list.push({
            id: "changeTheme" + Misc.capitalizeFirstLetterOfEachWord(theme.name),
            display: theme.name.replace(/_/g, " "),
            configValue: theme.name,
            hover: () => {
                // previewTheme(theme.name);
                ThemeController.preview(theme.name, false);
            },
            exec: () => {
                UpdateConfig.setTheme(theme.name);
            },
        });
    });
});
exports.commandsChallenges = {
    title: "Load challenge...",
    list: [],
};
Misc.getChallengeList().then((challenges) => {
    challenges.forEach((challenge) => {
        exports.commandsChallenges.list.push({
            id: "loadChallenge" + Misc.capitalizeFirstLetterOfEachWord(challenge.name),
            noIcon: true,
            display: challenge.display,
            exec: () => {
                ChallengeController.setup(challenge.name);
                TestLogic.restart(false, true);
            },
        });
    });
});
// export function showFavouriteThemesAtTheTop() {
function updateThemeCommands() {
    if (config_1.default.favThemes.length > 0) {
        exports.themeCommands.list = [];
        config_1.default.favThemes.forEach((theme) => {
            exports.themeCommands.list.push({
                id: "changeTheme" + Misc.capitalizeFirstLetterOfEachWord(theme),
                display: theme.replace(/_/g, " "),
                hover: () => {
                    // previewTheme(theme);
                    ThemeController.preview(theme, false);
                },
                exec: () => {
                    UpdateConfig.setTheme(theme);
                },
            });
        });
        Misc.getThemesList().then((themes) => {
            themes.forEach((theme) => {
                if (config_1.default.favThemes.includes(theme.name))
                    return;
                exports.themeCommands.list.push({
                    id: "changeTheme" + Misc.capitalizeFirstLetterOfEachWord(theme.name),
                    display: theme.name.replace(/_/g, " "),
                    hover: () => {
                        // previewTheme(theme.name);
                        ThemeController.preview(theme.name, false);
                    },
                    exec: () => {
                        UpdateConfig.setTheme(theme.name);
                    },
                });
            });
        });
    }
}
exports.updateThemeCommands = updateThemeCommands;
const commandsCopyWordsToClipboard = {
    title: "Are you sure...",
    list: [
        {
            id: "copyNo",
            display: "Nevermind",
        },
        {
            id: "copyYes",
            display: "Yes, I am sure",
            exec: () => {
                const words = Misc.getWords();
                navigator.clipboard.writeText(words).then(() => {
                    Notifications.add("Copied to clipboard", 1);
                }, () => {
                    Notifications.add("Failed to copy!", -1);
                });
            },
        },
    ],
};
const commandsMonkeyPowerLevel = {
    title: "Power mode...",
    configKey: "monkeyPowerLevel",
    list: [
        {
            id: "monkeyPowerLevelOff",
            display: "off",
            configValue: "off",
            exec: () => UpdateConfig.setMonkeyPowerLevel("off"),
        },
        {
            id: "monkeyPowerLevel1",
            display: "mellow",
            configValue: "1",
            exec: () => UpdateConfig.setMonkeyPowerLevel("1"),
        },
        {
            id: "monkeyPowerLevel2",
            display: "high",
            configValue: "2",
            exec: () => UpdateConfig.setMonkeyPowerLevel("2"),
        },
        {
            id: "monkeyPowerLevel3",
            display: "ultra",
            configValue: "3",
            exec: () => UpdateConfig.setMonkeyPowerLevel("3"),
        },
        {
            id: "monkeyPowerLevel4",
            display: "over 9000",
            configValue: "4",
            exec: () => UpdateConfig.setMonkeyPowerLevel("4"),
        },
    ],
};
exports.defaultCommands = {
    title: "",
    list: [
        {
            id: "changePunctuation",
            display: "Punctuation...",
            icon: "!?",
            subgroup: commandsPunctuation,
        },
        {
            id: "changeMode",
            display: "Mode...",
            icon: "fa-bars",
            subgroup: commandsMode,
        },
        {
            id: "changeTimeConfig",
            display: "Time...",
            icon: "fa-clock",
            subgroup: commandsTimeConfig,
        },
        {
            id: "changeWordCount",
            display: "Words...",
            alias: "words",
            icon: "fa-font",
            subgroup: commandsWordCount,
        },
        {
            id: "changeQuoteLength",
            display: "Quote length...",
            icon: "fa-quote-right",
            alias: "quotes",
            subgroup: commandsQuoteLengthConfig,
        },
        {
            visible: false,
            id: "changeTags",
            display: "Tags...",
            icon: "fa-tag",
            subgroup: commandsTags,
            beforeSubgroup: () => {
                updateTagCommands();
            },
            // exec: (): void => {
            //   updateTagCommands();
            //   current.push();
            //   Commandline.show();
            // },
        },
        {
            visible: false,
            id: "applyPreset",
            display: "Presets...",
            icon: "fa-sliders-h",
            subgroup: commandsPresets,
            beforeSubgroup: () => {
                updatePresetCommands();
            },
            // exec: (): void => {
            //   updatePresetCommands();
            //   current.push(commandsPresets);
            //   Commandline.show();
            // },
        },
        {
            id: "changeConfidenceMode",
            display: "Confidence mode...",
            icon: "fa-backspace",
            subgroup: commandsConfidenceMode,
        },
        {
            id: "changeStopOnError",
            display: "Stop on error...",
            icon: "fa-hand-paper",
            subgroup: commandsStopOnError,
        },
        {
            id: "changeNumbers",
            display: "Numbers...",
            icon: "15",
            subgroup: commandsNumbers,
        },
        {
            id: "changeSmoothCaret",
            display: "Smooth caret...",
            icon: "fa-i-cursor",
            subgroup: commandsSmoothCaret,
        },
        {
            id: "changeQuickTab",
            display: "Quick tab...",
            icon: "fa-redo-alt",
            subgroup: commandsQuickTab,
        },
        {
            id: "changeRepeatQuotes",
            display: "Repeat quotes...",
            icon: "fa-sync-alt",
            subgroup: commandsRepeatQuotes,
        },
        {
            id: "changeLiveWpm",
            display: "Live WPM...",
            icon: "fa-tachometer-alt",
            subgroup: commandsLiveWpm,
        },
        {
            id: "changeLiveAcc",
            display: "Live accuracy...",
            icon: "fa-percentage",
            subgroup: commandsLiveAcc,
        },
        {
            id: "changeLiveBurst",
            display: "Live burst...",
            icon: "fa-fire-alt",
            subgroup: commandsLiveBurst,
        },
        {
            id: "changeShowTimer",
            display: "Timer/progress...",
            icon: "fa-clock",
            subgroup: commandsShowTimer,
        },
        {
            id: "changeKeyTips",
            display: "Key tips...",
            icon: "fa-question",
            subgroup: commandsKeyTips,
        },
        {
            id: "changeFreedomMode",
            display: "Freedom mode...",
            subgroup: commandsFreedomMode,
        },
        {
            id: "changeStrictSpace",
            display: "Strict space...",
            icon: "fa-minus",
            subgroup: commandsStrictSpace,
        },
        {
            id: "changeBlindMode",
            display: "Blind mode...",
            icon: "fa-eye-slash",
            subgroup: commandsBlindMode,
        },
        {
            id: "changeShowWordsHistory",
            display: "Always show words history...",
            icon: "fa-align-left",
            subgroup: commandsShowWordsHistory,
        },
        {
            id: "changeIndicateTypos",
            display: "Indicate typos...",
            icon: "fa-exclamation",
            subgroup: commandsIndicateTypos,
        },
        {
            id: "changeHideExtraLetters",
            display: "Hide extra letters...",
            icon: "fa-eye-slash",
            subgroup: commandsHideExtraLetters,
        },
        {
            id: "changeQuickEnd",
            display: "Quick end...",
            icon: "fa-step-forward",
            subgroup: commandsQuickEnd,
        },
        {
            id: "singleListCommandLine",
            display: "Single list command line...",
            icon: "fa-list",
            subgroup: commandsSingleListCommandLine,
        },
        {
            id: "capsLockWarning",
            display: "Caps lock warning...",
            icon: "fa-exclamation-triangle",
            subgroup: commandsCapsLockWarning,
        },
        {
            id: "changeMinWpm",
            display: "Minimum wpm...",
            alias: "minimum",
            icon: "fa-bomb",
            subgroup: commandsMinWpm,
        },
        {
            id: "changeMinAcc",
            display: "Minimum accuracy...",
            alias: "minimum",
            icon: "fa-bomb",
            subgroup: commandsMinAcc,
        },
        {
            id: "changeMinBurst",
            display: "Minimum burst...",
            alias: "minimum",
            icon: "fa-bomb",
            subgroup: commandsMinBurst,
        },
        {
            id: "changeOppositeShiftMode",
            display: "Change opposite shift mode...",
            icon: "fa-exchange-alt",
            subgroup: commandsOppositeShiftMode,
        },
        {
            id: "changeSoundOnClick",
            display: "Sound on click...",
            icon: "fa-volume-up",
            subgroup: commandsSoundOnClick,
        },
        {
            id: "changeSoundOnError",
            display: "Sound on error...",
            icon: "fa-volume-mute",
            subgroup: commandsSoundOnError,
        },
        {
            id: "changeSoundVolume",
            display: "Sound volume...",
            icon: "fa-volume-down",
            subgroup: commandsSoundVolume,
        },
        {
            id: "changeFlipTestColors",
            display: "Flip test colors...",
            icon: "fa-adjust",
            subgroup: commandsFlipTestColors,
        },
        {
            id: "changeSmoothLineScroll",
            display: "Smooth line scroll...",
            icon: "fa-align-left",
            subgroup: commandsSmoothLineScroll,
        },
        {
            id: "changeAlwaysShowDecimal",
            display: "Always show decimal places...",
            icon: "00",
            subgroup: commandsAlwaysShowDecimal,
        },
        {
            id: "changeAlwaysShowCPM",
            display: "Always show CPM...",
            icon: "fa-tachometer-alt",
            subgroup: commandsAlwaysShowCPM,
        },
        {
            id: "changeStartGraphsAtZero",
            display: "Start graphs at zero...",
            icon: "fa-chart-line",
            subgroup: commandsStartGraphsAtZero,
        },
        {
            id: "changeSwapEscAndTab",
            display: "Swap esc and tab...",
            icon: "fa-exchange-alt",
            subgroup: commandsSwapEscAndTab,
        },
        {
            id: "changeLazyMode",
            display: "Lazy mode...",
            icon: "fa-couch",
            subgroup: commandsLazyMode,
        },
        {
            id: "changeShowAllLines",
            display: "Show all lines...",
            icon: "fa-align-left",
            subgroup: commandsShowAllLines,
        },
        {
            id: "changeColorfulMode",
            display: "Colorful mode...",
            icon: "fa-fill-drip",
            subgroup: commandsColorfulMode,
        },
        {
            id: "changeOutOfFocusWarning",
            display: "Out of focus warning...",
            icon: "fa-exclamation",
            subgroup: commandsOutOfFocusWarning,
        },
        {
            id: "setEnableAds",
            display: "Enable ads...",
            icon: "fa-ad",
            subgroup: exports.commandsEnableAds,
        },
        {
            id: "changeTheme",
            display: "Theme...",
            icon: "fa-palette",
            subgroup: exports.themeCommands,
        },
        {
            id: "setCustomTheme",
            display: "Custom theme...",
            icon: "fa-palette",
            subgroup: exports.customThemeCommands,
        },
        {
            id: "setCustomThemeId",
            display: "Custom themes...",
            icon: "fa-palette",
            subgroup: exports.customThemeListCommands,
            beforeSubgroup: () => updateCustomThemeListCommands(),
            available: () => {
                return firebase_1.Auth.currentUser !== null;
            },
        },
        {
            id: "changeRandomTheme",
            display: "Random theme...",
            icon: "fa-random",
            subgroup: commandsRandomTheme,
        },
        {
            id: "randomizeTheme",
            display: "Next random theme",
            icon: "fa-random",
            exec: () => ThemeController.randomizeTheme(),
        },
        {
            id: "changeDifficulty",
            display: "Difficulty...",
            icon: "fa-star",
            subgroup: commandsDifficulty,
        },
        {
            id: "changeCaretStyle",
            display: "Caret style...",
            icon: "fa-i-cursor",
            subgroup: commandsCaretStyle,
        },
        {
            id: "changePaceCaret",
            display: "Pace caret mode...",
            icon: "fa-i-cursor",
            subgroup: commandsPaceCaret,
        },
        {
            id: "changePaceCaretStyle",
            display: "Pace caret style...",
            icon: "fa-i-cursor",
            subgroup: commandsPaceCaretStyle,
        },
        {
            id: "changeRepeatedPace",
            display: "Repeated pace...",
            icon: "fa-i-cursor",
            subgroup: commandsRepeatedPace,
        },
        {
            id: "changeTimerStyle",
            display: "Timer/progress style...",
            icon: "fa-clock",
            subgroup: commandsTimerStyle,
        },
        {
            id: "changeTimerColor",
            display: "Timer/progress color...",
            icon: "fa-clock",
            subgroup: commandsTimerColor,
        },
        {
            id: "changeTimerOpacity",
            display: "Timer/progress opacity...",
            icon: "fa-clock",
            subgroup: commandsTimerOpacity,
        },
        {
            id: "changeHighlightMode",
            display: "Highlight mode...",
            icon: "fa-highlighter",
            subgroup: commandsHighlightMode,
        },
        {
            id: "changeShowAverage",
            display: "Show average...",
            icon: "fa-chart-bar",
            subgroup: commandsShowAverage,
        },
        {
            id: "changeCustomBackground",
            display: "Custom background...",
            icon: "fa-image",
            defaultValue: "",
            input: true,
            exec: (input) => {
                if (!input)
                    return;
                UpdateConfig.setCustomBackground(input);
            },
        },
        {
            id: "changeLanguage",
            display: "Language...",
            icon: "fa-language",
            subgroup: commandsLanguages,
        },
        {
            id: "changeBritishEnglish",
            display: "British english...",
            icon: "fa-language",
            subgroup: commandsBritishEnglish,
        },
        {
            id: "changeFunbox",
            display: "Funbox...",
            alias: "fun box",
            icon: "fa-gamepad",
            subgroup: commandsFunbox,
        },
        {
            id: "changeLayout",
            display: "Layout emulator...",
            icon: "fa-keyboard",
            subgroup: commandsLayouts,
        },
        {
            id: "toggleKeymap",
            display: "Keymap mode...",
            icon: "fa-keyboard",
            alias: "keyboard",
            subgroup: commandsKeymapMode,
        },
        {
            id: "changeKeymapStyle",
            display: "Keymap style...",
            alias: "keyboard",
            icon: "fa-keyboard",
            subgroup: commandsKeymapStyle,
        },
        {
            id: "changeKeymapLegendStyle",
            display: "Keymap legend style...",
            alias: "keyboard",
            icon: "fa-keyboard",
            subgroup: commandsKeymapLegendStyle,
        },
        {
            id: "changeKeymapLayout",
            display: "Keymap layout...",
            alias: "keyboard",
            icon: "fa-keyboard",
            subgroup: exports.commandsKeymapLayouts,
        },
        {
            id: "changeCustomLayoutfluid",
            display: "Custom layoutfluid...",
            defaultValue: "qwerty dvorak colemak",
            input: true,
            icon: "fa-tint",
            exec: (input) => {
                if (input === undefined)
                    return;
                UpdateConfig.setCustomLayoutfluid(input);
                if (config_1.default.funbox === "layoutfluid")
                    TestLogic.restart();
                // UpdateConfig.setLayout(
                //   Config.customLayoutfluid
                //     ? Config.customLayoutfluid.split("_")[0]
                //     : "qwerty"
                // );
                // UpdateConfig.setKeymapLayout(
                //   Config.customLayoutfluid
                //     ? Config.customLayoutfluid.split("_")[0]
                //     : "qwerty"
                // );
            },
        },
        {
            id: "changeFontSize",
            display: "Font size...",
            icon: "fa-font",
            subgroup: commandsFontSize,
        },
        {
            id: "changeFontFamily",
            display: "Font family...",
            icon: "fa-font",
            subgroup: commandsFonts,
        },
        {
            id: "changePageWidth",
            display: "Page width...",
            icon: "fa-arrows-alt-h",
            subgroup: commandsPageWidth,
        },
        {
            id: "viewTypingPage",
            display: "View Typing Page",
            alias: "start begin type test",
            icon: "fa-keyboard",
            exec: () => {
                $("#top #menu .icon-button.view-start").trigger("click");
            },
        },
        {
            id: "viewLeaderboards",
            display: "View Leaderboards Page",
            icon: "fa-crown",
            exec: () => {
                $("#top #menu .icon-button.view-leaderboards").trigger("click");
            },
        },
        {
            id: "viewAbout",
            display: "View About Page",
            icon: "fa-info",
            exec: () => {
                $("#top #menu .icon-button.view-about").trigger("click");
            },
        },
        {
            id: "viewSettings",
            display: "View Settings Page",
            icon: "fa-cog",
            exec: () => {
                $("#top #menu .icon-button.view-settings").trigger("click");
            },
        },
        {
            id: "viewQuoteSearchPopup",
            display: "Search for quotes",
            icon: "fa-search",
            exec: () => {
                UpdateConfig.setMode("quote");
                $("#quote-search-button").trigger("click");
            },
            shouldFocusTestUI: false,
        },
        {
            id: "viewAccount",
            display: "View Account Page",
            icon: "fa-user",
            alias: "stats",
            exec: () => {
                $("#top #menu .icon-button.view-account").hasClass("hidden")
                    ? $("#top #menu .icon-button.view-login").trigger("click")
                    : $("#top #menu .icon-button.view-account").trigger("click");
            },
        },
        {
            id: "toggleFullscreen",
            display: "Toggle Fullscreen",
            icon: "fa-expand",
            exec: () => {
                Misc.toggleFullscreen();
            },
        },
        {
            id: "bailOut",
            display: "Bail out...",
            icon: "fa-running",
            subgroup: {
                title: "Are you sure...",
                list: [
                    {
                        id: "bailOutNo",
                        display: "Nevermind",
                        available: () => {
                            return canBailOut();
                        },
                    },
                    {
                        id: "bailOutForSure",
                        display: "Yes, I am sure",
                        exec: () => {
                            TestInput.setBailout(true);
                            TestLogic.finish();
                        },
                        available: () => {
                            return canBailOut();
                        },
                    },
                ],
            },
            visible: false,
            available: () => {
                return canBailOut();
            },
        },
        {
            id: "loadChallenge",
            display: "Load challenge...",
            icon: "fa-award",
            subgroup: exports.commandsChallenges,
        },
        {
            id: "joinDiscord",
            display: "Join the Discord server",
            icon: "fa-users",
            exec: () => {
                window.open("https://discord.gg/monkeytype");
            },
        },
        {
            id: "repeatTest",
            display: "Repeat test",
            icon: "fa-sync-alt",
            exec: () => {
                TestLogic.restart(true);
            },
            available: () => {
                return TestUI.resultVisible;
            },
        },
        {
            id: "practiseWords",
            display: "Practice words...",
            icon: "fa-exclamation-triangle",
            subgroup: commandsPractiseWords,
            available: () => {
                return TestUI.resultVisible;
            },
        },
        {
            id: "toggleWordHistory",
            display: "Toggle word history",
            icon: "fa-align-left",
            exec: () => {
                TestUI.toggleResultWords();
            },
            available: () => {
                return TestUI.resultVisible;
            },
        },
        {
            id: "saveScreenshot",
            display: "Save screenshot",
            icon: "fa-image",
            alias: "ss picture",
            exec: () => {
                setTimeout(() => {
                    TestUI.screenshot();
                }, 500);
            },
            available: () => {
                return TestUI.resultVisible;
            },
        },
        {
            id: "changeCustomModeText",
            display: "Change custom text",
            icon: "fa-align-left",
            exec: () => {
                CustomTextPopup.show();
            },
        },
        {
            id: "toggleMonkey",
            display: "Toggle Monkey",
            icon: "fa-egg",
            visible: false,
            exec: () => {
                UpdateConfig.setMonkey(!config_1.default.monkey);
            },
        },
        {
            id: "copyWordsToClipboard",
            display: "Copy words to clipboard",
            icon: "fa-copy",
            subgroup: true,
            exec: () => {
                exports.current.push(commandsCopyWordsToClipboard);
            },
        },
        {
            id: "importSettingsJSON",
            display: "Import settings JSON",
            icon: "fa-cog",
            input: true,
            exec: (input) => {
                if (!input)
                    return;
                try {
                    UpdateConfig.apply(JSON.parse(input));
                    UpdateConfig.saveFullConfigToLocalStorage();
                    Settings.update();
                    Notifications.add("Done", 1);
                }
                catch (e) {
                    Notifications.add("An error occured while importing settings: " + e, -1);
                }
            },
        },
        {
            id: "exportSettingsJSON",
            display: "Export settings JSON",
            icon: "fa-cog",
            input: true,
            defaultValue: "",
        },
        {
            id: "monkeyPower",
            display: "Power mode...",
            alias: "powermode",
            icon: "fa-egg",
            visible: false,
            subgroup: commandsMonkeyPowerLevel,
        },
        {
            id: "clearSwCache",
            display: "Clear SW cache",
            icon: "fa-cog",
            exec: () => __awaiter(void 0, void 0, void 0, function* () {
                const clist = yield caches.keys();
                for (const name of clist) {
                    yield caches.delete(name);
                }
                window.location.reload();
            }),
        },
        {
            id: "getSwCache",
            display: "Get SW cache",
            icon: "fa-cog",
            exec: () => __awaiter(void 0, void 0, void 0, function* () {
                alert(yield caches.keys());
            }),
        },
    ],
};
exports.current = [exports.defaultCommands];
function setCurrent(val) {
    exports.current = val;
}
exports.setCurrent = setCurrent;
function pushCurrent(val) {
    exports.current.push(val);
}
exports.pushCurrent = pushCurrent;
const listsObject = {
    commandsChallenges: exports.commandsChallenges,
    commandsLanguages,
    commandsDifficulty,
    commandsLazyMode,
    commandsPaceCaret,
    commandsShowAverage,
    commandsMinWpm,
    commandsMinAcc,
    commandsMinBurst,
    commandsFunbox,
    commandsConfidenceMode,
    commandsStopOnError,
    commandsLayouts,
    commandsOppositeShiftMode,
    commandsTags,
};
function getList(list) {
    return listsObject[list];
}
exports.getList = getList;
ConfigEvent.subscribe((eventKey, eventValue) => {
    var _a;
    if (eventKey === "saveToLocalStorage") {
        exports.defaultCommands.list.filter((command) => command.id == "exportSettingsJSON")[0].defaultValue = eventValue;
    }
    if (eventKey === "customBackground") {
        exports.defaultCommands.list.filter((command) => command.id == "changeCustomBackground")[0].defaultValue = eventValue;
    }
    if (eventKey === "customLayoutFluid") {
        exports.defaultCommands.list.filter((command) => command.id == "changeCustomLayoutfluid")[0].defaultValue = (_a = eventValue) === null || _a === void 0 ? void 0 : _a.replace(/#/g, " ");
    }
});


/***/ }),

/***/ "./src/scripts/elements/commandline.ts":
/*!*********************************************!*\
  !*** ./src/scripts/elements/commandline.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.show = exports.isSingleListCommandLineActive = void 0;
const ThemeController = __importStar(__webpack_require__(/*! ../controllers/theme-controller */ "./src/scripts/controllers/theme-controller.ts"));
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const Focus = __importStar(__webpack_require__(/*! ../test/focus */ "./src/scripts/test/focus.ts"));
const CommandlineLists = __importStar(__webpack_require__(/*! ./commandline-lists */ "./src/scripts/elements/commandline-lists.ts"));
const TestUI = __importStar(__webpack_require__(/*! ../test/test-ui */ "./src/scripts/test/test-ui.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const AnalyticsController = __importStar(__webpack_require__(/*! ../controllers/analytics-controller */ "./src/scripts/controllers/analytics-controller.ts"));
const PageTransition = __importStar(__webpack_require__(/*! ../states/page-transition */ "./src/scripts/states/page-transition.ts"));
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
let commandLineMouseMode = false;
function showInput(command, placeholder, defaultValue = "") {
    $("#commandLineWrapper").removeClass("hidden");
    $("#commandLine").addClass("hidden");
    $("#commandInput").removeClass("hidden");
    $("#commandInput input").attr("placeholder", placeholder);
    $("#commandInput input").val(defaultValue);
    $("#commandInput input").trigger("focus");
    $("#commandInput input").attr("command", "");
    $("#commandInput input").attr("command", command);
    if (defaultValue != "") {
        $("#commandInput input").select();
    }
}
function isSingleListCommandLineActive() {
    return $("#commandLine").hasClass("allCommands");
}
exports.isSingleListCommandLineActive = isSingleListCommandLineActive;
function showFound() {
    $("#commandLine .suggestions").empty();
    let commandsHTML = "";
    const list = CommandlineLists.current[CommandlineLists.current.length - 1];
    $.each(list.list, (_index, obj) => {
        var _a;
        if (obj.found && (obj.available !== undefined ? obj.available() : true)) {
            let icon = (_a = obj.icon) !== null && _a !== void 0 ? _a : "fa-chevron-right";
            const faIcon = /^fa-/g.test(icon);
            if (!faIcon) {
                icon = `<div class="textIcon">${icon}</div>`;
            }
            else {
                icon = `<i class="fas fa-fw ${icon}"></i>`;
            }
            if (list.configKey) {
                if ((obj.configValueMode &&
                    obj.configValueMode === "include" &&
                    // todo figure this out without using any
                    config_1.default[list.configKey].includes(obj.configValue)) ||
                    config_1.default[list.configKey] === obj.configValue) {
                    icon = `<i class="fas fa-fw fa-check"></i>`;
                }
                else {
                    icon = `<i class="fas fa-fw"></i>`;
                }
            }
            let iconHTML = `<div class="icon">${icon}</div>`;
            if (obj.noIcon && !isSingleListCommandLineActive()) {
                iconHTML = "";
            }
            commandsHTML += `<div class="entry" command="${obj.id}">${iconHTML}<div>${obj.display}</div></div>`;
        }
    });
    $("#commandLine .suggestions").html(commandsHTML);
    if ($("#commandLine .suggestions .entry").length == 0) {
        $("#commandLine .separator").css({ height: 0, margin: 0 });
    }
    else {
        $("#commandLine .separator").css({
            height: "1px",
            "margin-bottom": ".5rem",
        });
    }
    const entries = $("#commandLine .suggestions .entry");
    if (entries.length > 0) {
        $(entries[0]).addClass("activeKeyboard");
        try {
            $.each(list.list, (_index, obj) => {
                if (obj.found) {
                    if ((!/theme/gi.test(obj.id) || obj.id === "toggleCustomTheme") &&
                        !ThemeController.randomTheme) {
                        ThemeController.clearPreview();
                    }
                    if (!/font/gi.test(obj.id)) {
                        UpdateConfig.previewFontFamily(config_1.default.fontFamily);
                    }
                    if (obj.hover)
                        obj.hover();
                    return false;
                }
                else {
                    return true;
                }
            });
        }
        catch (e) { }
    }
    $("#commandLine .listTitle").remove();
}
function updateSuggested() {
    const inputVal = $("#commandLine input").val()
        .toLowerCase()
        .split(" ")
        .filter((s, i) => s || i == 0); //remove empty entries after first
    const list = CommandlineLists.current[CommandlineLists.current.length - 1];
    if (inputVal[0] === "" &&
        config_1.default.singleListCommandLine === "on" &&
        CommandlineLists.current.length === 1) {
        $.each(list.list, (_index, obj) => {
            obj.found = false;
        });
        showFound();
        return;
    }
    //ignore the preceeding ">"s in the command line input
    if (inputVal[0] && inputVal[0][0] == ">") {
        inputVal[0] = inputVal[0].replace(/^>+/, "");
    }
    if (inputVal[0] == "" && inputVal.length == 1) {
        $.each(list.list, (_index, obj) => {
            if (obj.visible !== false)
                obj.found = true;
        });
    }
    else {
        $.each(list.list, (_index, obj) => {
            let foundcount = 0;
            $.each(inputVal, (_index2, obj2) => {
                if (obj2 == "")
                    return;
                const escaped = obj2.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
                const re = new RegExp("\\b" + escaped, "g");
                const res = obj.display.toLowerCase().match(re);
                const res2 = obj.alias !== undefined ? obj.alias.toLowerCase().match(re) : null;
                if ((res != null && res.length > 0) ||
                    (res2 != null && res2.length > 0)) {
                    foundcount++;
                }
                else {
                    foundcount--;
                }
            });
            if (foundcount > inputVal.length - 1) {
                obj.found = true;
            }
            else {
                obj.found = false;
            }
        });
    }
    showFound();
}
let show = () => {
    if (!$(".page.pageLoading").hasClass("hidden"))
        return;
    Focus.set(false);
    $("#commandLine").removeClass("hidden");
    $("#commandInput").addClass("hidden");
    if ($("#commandLineWrapper").hasClass("hidden")) {
        $("#commandLineWrapper")
            .stop(true, true)
            .css("opacity", 0)
            .removeClass("hidden")
            .animate({
            opacity: 1,
        }, 100);
    }
    $("#commandLine input").val("");
    CommandlineLists.updateThemeCommands();
    updateSuggested();
    $("#commandLine input").trigger("focus");
};
exports.show = show;
function hide(shouldFocusTestUI = true) {
    UpdateConfig.previewFontFamily(config_1.default.fontFamily);
    // applyCustomThemeColors();
    if (!ThemeController.randomTheme) {
        ThemeController.clearPreview();
    }
    $("#commandLineWrapper")
        .stop(true, true)
        .css("opacity", 1)
        .animate({
        opacity: 0,
    }, 100, () => {
        $("#commandLineWrapper").addClass("hidden");
        $("#commandLine").removeClass("allCommands");
        if (shouldFocusTestUI) {
            TestUI.focusWords();
        }
    });
    if (shouldFocusTestUI) {
        TestUI.focusWords();
    }
}
function trigger(command) {
    let subgroup = false;
    let input = false;
    let shouldFocusTestUI = true;
    const list = CommandlineLists.current[CommandlineLists.current.length - 1];
    let sticky = false;
    $.each(list.list, (_index, obj) => {
        var _a;
        if (obj.id == command) {
            if (obj.shouldFocusTestUI !== undefined) {
                shouldFocusTestUI = obj.shouldFocusTestUI;
            }
            if (obj.input) {
                input = true;
                const escaped = (_a = obj.display.split("</i>")[1]) !== null && _a !== void 0 ? _a : obj.display;
                showInput(obj.id, escaped, obj.defaultValue);
            }
            else if (obj.subgroup) {
                subgroup = true;
                if (obj.beforeSubgroup) {
                    obj.beforeSubgroup();
                }
                CommandlineLists.current.push(obj.subgroup);
                (0, exports.show)();
            }
            else {
                if (obj.exec)
                    obj.exec();
                if (obj.sticky === true) {
                    sticky = true;
                }
            }
        }
    });
    if (!subgroup && !input && !sticky) {
        AnalyticsController.log("usedCommandLine", { command });
        hide(shouldFocusTestUI);
    }
}
//todo rewrite this mess
function addChildCommands(unifiedCommands, commandItem, parentCommandDisplay = "", parentCommand) {
    var _a, _b;
    let commandItemDisplay = commandItem.display.replace(/\s?\.\.\.$/g, "");
    let icon = `<i class="fas fa-fw"></i>`;
    if (commandItem.configValue !== undefined &&
        config_1.default[parentCommand === null || parentCommand === void 0 ? void 0 : parentCommand.configKey] ===
            commandItem.configValue) {
        icon = `<i class="fas fa-fw fa-check"></i>`;
    }
    if (commandItem.noIcon) {
        icon = "";
    }
    if (parentCommandDisplay) {
        commandItemDisplay =
            parentCommandDisplay + " > " + icon + commandItemDisplay;
    }
    if (commandItem.subgroup) {
        const command = commandItem;
        if (command.beforeSubgroup)
            command.beforeSubgroup();
        try {
            (_b = ((_a = commandItem) === null || _a === void 0 ? void 0 : _a.subgroup).list) === null || _b === void 0 ? void 0 : _b.forEach((cmd) => {
                commandItem.configKey = commandItem
                    .subgroup.configKey;
                addChildCommands(unifiedCommands, cmd, commandItemDisplay, commandItem);
            });
            // commandItem.exec();
            // const currentCommandsIndex = CommandlineLists.current.length - 1;
            // CommandlineLists.current[currentCommandsIndex].list.forEach((cmd) => {
            //   if (cmd.alias === undefined) cmd.alias = commandItem.alias;
            //   addChildCommands(unifiedCommands, cmd, commandItemDisplay);
            // });
            // CommandlineLists.current.pop();
        }
        catch (e) { }
    }
    else {
        const tempCommandItem = Object.assign({}, commandItem);
        if (parentCommand) {
            tempCommandItem.icon = parentCommand.icon;
        }
        if (parentCommandDisplay)
            tempCommandItem.display = commandItemDisplay;
        unifiedCommands.push(tempCommandItem);
    }
}
function generateSingleListOfCommands() {
    const allCommands = [];
    const oldShowCommandLine = exports.show;
    exports.show = () => {
        //
    };
    CommandlineLists.defaultCommands.list.forEach((c) => addChildCommands(allCommands, c));
    exports.show = oldShowCommandLine;
    return {
        title: "All Commands",
        list: allCommands,
    };
}
function useSingleListCommandLine(sshow = true) {
    const allCommands = generateSingleListOfCommands();
    // if (Config.singleListCommandLine == "manual") {
    // CommandlineLists.pushCurrent(allCommands);
    // } else if (Config.singleListCommandLine == "on") {
    CommandlineLists.setCurrent([allCommands]);
    // }
    if (config_1.default.singleListCommandLine != "manual") {
        $("#commandLine").addClass("allCommands");
    }
    if (sshow)
        (0, exports.show)();
}
function restoreOldCommandLine(sshow = true) {
    if (isSingleListCommandLineActive()) {
        $("#commandLine").removeClass("allCommands");
        CommandlineLists.setCurrent(CommandlineLists.current.filter((l) => l.title != "All Commands"));
        if (CommandlineLists.current.length < 1) {
            CommandlineLists.setCurrent([CommandlineLists.defaultCommands]);
        }
    }
    if (sshow)
        (0, exports.show)();
}
$("#commandLine input").keyup((e) => {
    commandLineMouseMode = false;
    $("#commandLineWrapper #commandLine .suggestions .entry").removeClass("activeMouse");
    if (e.key === "ArrowUp" ||
        e.key === "ArrowDown" ||
        e.key === "Enter" ||
        e.key === "Tab" ||
        e.code == "AltLeft" ||
        (e.key.length > 1 && e.key !== "Backspace" && e.key !== "Delete")) {
        return;
    }
    updateSuggested();
});
$(document).ready(() => {
    $(document).on("keydown", (event) => {
        if (PageTransition.get())
            return event.preventDefault();
        // opens command line if escape, ctrl/cmd + shift + p, or tab is pressed if the setting swapEscAndTab is enabled
        if (event.key === "Escape" ||
            (event.key &&
                event.key.toLowerCase() === "p" &&
                (event.metaKey || event.ctrlKey) &&
                event.shiftKey) ||
            (event.key === "Tab" && config_1.default.swapEscAndTab)) {
            event.preventDefault();
            const popups = document.querySelectorAll(".popupWrapper");
            let popupVisible = false;
            for (const popup of popups) {
                if (!popup.classList.contains("hidden") === true) {
                    popupVisible = true;
                    break;
                }
            }
            if (popupVisible)
                return;
            if (!$("#commandLineWrapper").hasClass("hidden")) {
                if (CommandlineLists.current.length > 1) {
                    CommandlineLists.current.pop();
                    $("#commandLine").removeClass("allCommands");
                    (0, exports.show)();
                }
                else {
                    hide();
                }
                UpdateConfig.setFontFamily(config_1.default.fontFamily, true);
            }
            else if (event.key === "Tab" || !config_1.default.swapEscAndTab) {
                if (config_1.default.singleListCommandLine == "on") {
                    useSingleListCommandLine(false);
                }
                else {
                    CommandlineLists.setCurrent([CommandlineLists.defaultCommands]);
                }
                (0, exports.show)();
            }
        }
    });
});
$("#commandInput input").on("keydown", (e) => {
    if (e.key === "Enter") {
        //enter
        e.preventDefault();
        const command = $("#commandInput input").attr("command");
        const value = $("#commandInput input").val();
        const list = CommandlineLists.current[CommandlineLists.current.length - 1];
        $.each(list.list, (_index, obj) => {
            if (obj.id == command) {
                if (obj.exec)
                    obj.exec(value);
                if (obj.subgroup !== null && obj.subgroup !== undefined) {
                    //TODO: what is this for?
                    // subgroup = obj.subgroup;
                }
            }
        });
        AnalyticsController.log("usedCommandLine", { command: command !== null && command !== void 0 ? command : "" });
        hide();
    }
    return;
});
$(document).on("mousemove", () => {
    if (!commandLineMouseMode)
        commandLineMouseMode = true;
});
$(document).on("mouseenter", "#commandLineWrapper #commandLine .suggestions .entry", (e) => {
    if (!commandLineMouseMode)
        return;
    $(e.target).addClass("activeMouse");
});
$(document).on("mouseleave", "#commandLineWrapper #commandLine .suggestions .entry", (e) => {
    if (!commandLineMouseMode)
        return;
    $(e.target).removeClass("activeMouse");
});
$("#commandLineWrapper #commandLine .suggestions").on("mouseover", (e) => {
    if (!commandLineMouseMode)
        return;
    // console.log("clearing keyboard active");
    $("#commandLineWrapper #commandLine .suggestions .entry").removeClass("activeKeyboard");
    const hoverId = $(e.target).attr("command");
    try {
        const list = CommandlineLists.current[CommandlineLists.current.length - 1];
        $.each(list.list, (_index, obj) => {
            if (obj.id == hoverId) {
                if ((!/theme/gi.test(obj.id) || obj.id === "toggleCustomTheme") &&
                    !ThemeController.randomTheme) {
                    ThemeController.clearPreview();
                }
                if (!/font/gi.test(obj.id)) {
                    UpdateConfig.previewFontFamily(config_1.default.fontFamily);
                }
                if (obj.hover)
                    obj.hover();
            }
        });
    }
    catch (e) { }
});
$(document).on("click", "#commandLineWrapper #commandLine .suggestions .entry", (e) => {
    $(".suggestions .entry").removeClass("activeKeyboard");
    trigger($(e.currentTarget).attr("command"));
});
$("#commandLineWrapper").on("click", (e) => {
    if ($(e.target).attr("id") === "commandLineWrapper") {
        hide();
        UpdateConfig.setFontFamily(config_1.default.fontFamily, true);
        // if (Config.customTheme === true) {
        //   applyCustomThemeColors();
        // } else {
        //   setTheme(Config.theme, true);
        // }
    }
});
//might come back to it later
// function shiftCommand(){
//   let activeEntries = $("#commandLineWrapper #commandLine .suggestions .entry.activeKeyboard, #commandLineWrapper #commandLine .suggestions .entry.activeMouse");
//   activeEntries.each((_index, activeEntry) => {
//     let commandId = activeEntry.getAttribute('command');
//     let foundCommand = null;
//     CommandlineLists.defaultCommands.list.forEach(command => {
//       if(foundCommand === null && command.id === commandId){
//         foundCommand = command;
//       }
//     })
//     if(foundCommand.shift){
//       $(activeEntry).find('div').text(foundCommand.shift.display);
//     }
//   })
// }
// let shiftedCommands = false;
// $(document).on("keydown", (e) => {
//   if (e.key === "Shift") {
//     if(shiftedCommands === false){
//       shiftedCommands = true;
//       shiftCommand();
//     }
//   }
// });
// $(document).keyup((e) => {
//   if (e.key === "Shift") {
//     shiftedCommands = false;
//   }
// });
$(document).on("keydown", (e) => {
    var _a, _b;
    // if (isPreviewingTheme) {
    // console.log("applying theme");
    // applyCustomThemeColors();
    // previewTheme(Config.theme, false);
    // }
    if (!$("#commandLineWrapper").hasClass("hidden")) {
        $("#commandLine input").trigger("focus");
        if (e.key == ">" && config_1.default.singleListCommandLine == "manual") {
            if (!isSingleListCommandLineActive()) {
                useSingleListCommandLine(false);
                return;
            }
            else if ($("#commandLine input").val() == ">") {
                //so that it will ignore succeeding ">" when input is already ">"
                e.preventDefault();
                return;
            }
        }
        if (e.key === "Backspace" || e.key === "Delete") {
            setTimeout(() => {
                const inputVal = $("#commandLine input").val();
                if (config_1.default.singleListCommandLine == "manual" &&
                    isSingleListCommandLineActive() &&
                    inputVal[0] !== ">") {
                    restoreOldCommandLine(false);
                }
            }, 1);
        }
        if (e.key === "Enter") {
            //enter
            e.preventDefault();
            const command = $(".suggestions .entry.activeKeyboard").attr("command");
            trigger(command);
            return;
        }
        if (e.key === "ArrowUp" || e.key === "ArrowDown" || e.key === "Tab") {
            e.preventDefault();
            $("#commandLineWrapper #commandLine .suggestions .entry").unbind("mouseenter mouseleave");
            const entries = $(".suggestions .entry");
            let activenum = -1;
            let hoverId;
            $.each(entries, (index, obj) => {
                if ($(obj).hasClass("activeKeyboard"))
                    activenum = index;
            });
            if (e.key === "ArrowUp" || (e.key === "Tab" && e.shiftKey)) {
                entries.removeClass("activeKeyboard");
                if (activenum == 0) {
                    $(entries[entries.length - 1]).addClass("activeKeyboard");
                    hoverId = $(entries[entries.length - 1]).attr("command");
                }
                else {
                    $(entries[--activenum]).addClass("activeKeyboard");
                    hoverId = $(entries[activenum]).attr("command");
                }
            }
            if (e.key === "ArrowDown" || (e.key === "Tab" && !e.shiftKey)) {
                entries.removeClass("activeKeyboard");
                if (activenum + 1 == entries.length) {
                    $(entries[0]).addClass("activeKeyboard");
                    hoverId = $(entries[0]).attr("command");
                }
                else {
                    $(entries[++activenum]).addClass("activeKeyboard");
                    hoverId = $(entries[activenum]).attr("command");
                }
            }
            try {
                const scroll = Math.abs(((_a = $(".suggestions").offset()) === null || _a === void 0 ? void 0 : _a.top) -
                    ((_b = $(".entry.activeKeyboard").offset()) === null || _b === void 0 ? void 0 : _b.top) -
                    $(".suggestions").scrollTop()) -
                    $(".suggestions").outerHeight() / 2 +
                    $($(".entry")[0]).outerHeight();
                $(".suggestions").scrollTop(scroll);
            }
            catch (e) {
                if (e instanceof Error) {
                    console.log("could not scroll suggestions: " + e.message);
                }
            }
            // console.log(`scrolling to ${scroll}`);
            try {
                const list = CommandlineLists.current[CommandlineLists.current.length - 1];
                $.each(list.list, (_index, obj) => {
                    if (obj.id == hoverId) {
                        if ((!/theme/gi.test(obj.id) || obj.id === "toggleCustomTheme") &&
                            !ThemeController.randomTheme) {
                            ThemeController.clearPreview();
                        }
                        if (!/font/gi.test(obj.id)) {
                            UpdateConfig.previewFontFamily(config_1.default.fontFamily);
                        }
                        if (obj.hover)
                            obj.hover();
                    }
                });
            }
            catch (e) { }
            return false;
        }
    }
    return;
});
$(document).on("click", "#commandLineMobileButton", () => {
    if (config_1.default.singleListCommandLine == "on") {
        useSingleListCommandLine(false);
    }
    else {
        CommandlineLists.setCurrent([CommandlineLists.defaultCommands]);
    }
    (0, exports.show)();
});
$(document).on("click", "#keymap .r5 .key-space", () => {
    CommandlineLists.setCurrent([CommandlineLists.commandsKeymapLayouts]);
    (0, exports.show)();
});
$(document).on("click", "#testModesNotice .text-button", (event) => {
    const commands = CommandlineLists.getList($(event.currentTarget).attr("commands"));
    if (commands !== undefined) {
        if ($(event.currentTarget).attr("commands") === "commandsTags") {
            CommandlineLists.updateTagCommands();
        }
        CommandlineLists.pushCurrent(commands);
        (0, exports.show)();
    }
});
$(document).on("click", "#bottom .leftright .right .current-theme", (e) => {
    if (e.shiftKey) {
        if (!config_1.default.customTheme) {
            if (firebase_1.Auth.currentUser !== null) {
                if (DB.getSnapshot().customThemes.length < 1) {
                    Notifications.add("No custom themes!", 0);
                    UpdateConfig.setCustomTheme(false);
                    // UpdateConfig.setCustomThemeId("");
                    return;
                }
                // if (!DB.getCustomThemeById(Config.customThemeId)) {
                //   // Turn on the first custom theme
                //   const firstCustomThemeId = DB.getSnapshot().customThemes[0]._id;
                //   UpdateConfig.setCustomThemeId(firstCustomThemeId);
                // }
            }
            UpdateConfig.setCustomTheme(true);
        }
        else
            UpdateConfig.setCustomTheme(false);
    }
    else {
        if (config_1.default.customTheme)
            CommandlineLists.updateCustomThemeListCommands();
        CommandlineLists.pushCurrent(config_1.default.customTheme
            ? CommandlineLists.customThemeListCommands
            : CommandlineLists.themeCommands);
        (0, exports.show)();
    }
});
$(document.body).on("click", ".pageAbout .aboutEnableAds", () => {
    CommandlineLists.pushCurrent(CommandlineLists.commandsEnableAds);
    (0, exports.show)();
});
$(".supportButtons .button.ads").on("click", () => {
    CommandlineLists.pushCurrent(CommandlineLists.commandsEnableAds);
    (0, exports.show)();
});


/***/ }),

/***/ "./src/scripts/elements/custom-background-filter.ts":
/*!**********************************************************!*\
  !*** ./src/scripts/elements/custom-background-filter.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadConfig = exports.apply = exports.getCSS = void 0;
const UpdateConfig = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const Notifications = __importStar(__webpack_require__(/*! ./notifications */ "./src/scripts/elements/notifications.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const filters = {
    blur: {
        value: 0,
        default: 0,
    },
    brightness: {
        value: 1,
        default: 1,
    },
    saturate: {
        value: 1,
        default: 1,
    },
    opacity: {
        value: 1,
        default: 1,
    },
};
function getCSS() {
    let ret = "";
    Object.keys(filters).forEach((filterKey) => {
        const key = filterKey;
        if (filters[key].value != filters[key].default) {
            ret += `${filterKey}(${filters[key].value}${filterKey == "blur" ? "rem" : ""}) `;
        }
    });
    return ret;
}
exports.getCSS = getCSS;
function apply() {
    const filterCSS = getCSS();
    const css = {
        filter: filterCSS,
        width: `calc(100% + ${filters.blur.value * 4}rem)`,
        height: `calc(100% + ${filters.blur.value * 4}rem)`,
        left: `-${filters.blur.value * 2}rem`,
        top: `-${filters.blur.value * 2}rem`,
        position: "absolute",
    };
    $(".customBackground img").css(css);
}
exports.apply = apply;
function syncSliders() {
    $(".section.customBackgroundFilter .blur input").val(filters["blur"].value);
    $(".section.customBackgroundFilter .brightness input").val(filters["brightness"].value);
    $(".section.customBackgroundFilter .saturate input").val(filters["saturate"].value);
    $(".section.customBackgroundFilter .opacity input").val(filters["opacity"].value);
}
function updateNumbers() {
    $(".section.customBackgroundFilter .blur .value").html(filters.blur.value.toFixed(1));
    $(".section.customBackgroundFilter .brightness .value").html(filters.brightness.value.toFixed(1));
    $(".section.customBackgroundFilter .saturate .value").html(filters.saturate.value.toFixed(1));
    $(".section.customBackgroundFilter .opacity .value").html(filters.opacity.value.toFixed(1));
}
function loadConfig(config) {
    filters.blur.value = config[0];
    filters.brightness.value = config[1];
    filters.saturate.value = config[2];
    filters.opacity.value = config[3];
    updateNumbers();
    syncSliders();
}
exports.loadConfig = loadConfig;
$(".section.customBackgroundFilter .blur input").on("input", () => {
    filters["blur"].value = parseFloat($(".section.customBackgroundFilter .blur input").val());
    updateNumbers();
    apply();
});
$(".section.customBackgroundFilter .brightness input").on("input", () => {
    filters["brightness"].value = parseFloat($(".section.customBackgroundFilter .brightness input").val());
    updateNumbers();
    apply();
});
$(".section.customBackgroundFilter .saturate input").on("input", () => {
    filters["saturate"].value = parseFloat($(".section.customBackgroundFilter .saturate input").val());
    updateNumbers();
    apply();
});
$(".section.customBackgroundFilter .opacity input").on("input", () => {
    filters["opacity"].value = parseFloat($(".section.customBackgroundFilter .opacity input").val());
    updateNumbers();
    apply();
});
$(".section.customBackgroundFilter  .save.button").on("click", () => {
    const arr = Object.keys(filters).map((filterKey) => filters[filterKey].value);
    UpdateConfig.setCustomBackgroundFilter(arr, false);
    Notifications.add("Custom background filters saved", 1);
});
ConfigEvent.subscribe((eventKey, eventValue) => {
    if (eventKey === "customBackgroundFilter") {
        loadConfig(eventValue.map((ev) => parseFloat(ev)));
        apply();
    }
});


/***/ }),

/***/ "./src/scripts/elements/keymap.ts":
/*!****************************************!*\
  !*** ./src/scripts/elements/keymap.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.refresh = exports.show = exports.hide = exports.flashKey = exports.highlightKey = void 0;
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const ThemeColors = __importStar(__webpack_require__(/*! ./theme-colors */ "./src/scripts/elements/theme-colors.ts"));
const SlowTimer = __importStar(__webpack_require__(/*! ../states/slow-timer */ "./src/scripts/states/slow-timer.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
function highlightKey(currentKey) {
    if (config_1.default.mode === "zen")
        return;
    if (currentKey === "")
        currentKey = " ";
    try {
        if ($(".active-key") != undefined) {
            $(".active-key").removeClass("active-key");
        }
        let highlightKey;
        if (currentKey == " ") {
            highlightKey = "#keymap .key-space, #keymap .key-split-space";
        }
        else if (currentKey == '"') {
            highlightKey = `#keymap .keymap-key[data-key*='${currentKey}']`;
        }
        else {
            highlightKey = `#keymap .keymap-key[data-key*="${currentKey}"]`;
        }
        console.log("highlighting", highlightKey);
        $(highlightKey).addClass("active-key");
    }
    catch (e) {
        if (e instanceof Error) {
            console.log("could not update highlighted keymap key: " + e.message);
        }
    }
}
exports.highlightKey = highlightKey;
function flashKey(key, correct) {
    return __awaiter(this, void 0, void 0, function* () {
        if (key == undefined)
            return;
        if (key == " ") {
            key = "#keymap .key-space, #keymap .key-split-space";
        }
        else if (key == '"') {
            key = `#keymap .keymap-key[data-key*='${key}']`;
        }
        else {
            key = `#keymap .keymap-key[data-key*="${key}"]`;
        }
        const themecolors = yield ThemeColors.getAll();
        try {
            if (correct || config_1.default.blindMode) {
                $(key)
                    .stop(true, true)
                    .css({
                    color: themecolors.bg,
                    backgroundColor: themecolors.main,
                    borderColor: themecolors.main,
                })
                    .animate({
                    color: themecolors.sub,
                    backgroundColor: "transparent",
                    borderColor: themecolors.sub,
                }, SlowTimer.get() ? 0 : 500, "easeOutExpo");
            }
            else {
                $(key)
                    .stop(true, true)
                    .css({
                    color: themecolors.bg,
                    backgroundColor: themecolors.error,
                    borderColor: themecolors.error,
                })
                    .animate({
                    color: themecolors.sub,
                    backgroundColor: "transparent",
                    borderColor: themecolors.sub,
                }, SlowTimer.get() ? 0 : 500, "easeOutExpo");
            }
        }
        catch (e) { }
    });
}
exports.flashKey = flashKey;
function hide() {
    $("#keymap").addClass("hidden");
}
exports.hide = hide;
function show() {
    $("#keymap").removeClass("hidden");
}
exports.show = show;
function refresh(layoutName = config_1.default.layout) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!layoutName)
            return;
        try {
            const layouts = yield Misc.getLayoutsList();
            let lts = layouts[layoutName]; //layout to show
            let layoutString = layoutName;
            if (config_1.default.keymapLayout === "overrideSync") {
                if (config_1.default.layout === "default") {
                    lts = layouts["qwerty"];
                    layoutString = "default";
                }
                else {
                    lts = layouts[config_1.default.layout];
                    layoutString = config_1.default.layout;
                }
            }
            else {
                lts = layouts[config_1.default.keymapLayout];
                layoutString = config_1.default.keymapLayout;
            }
            const showTopRow = lts.keymapShowTopRow;
            const isMatrix = config_1.default.keymapStyle === "matrix" || config_1.default.keymapStyle === "split_matrix";
            let keymapElement = "";
            Object.keys(lts.keys).forEach((row, index) => {
                const rowKeys = lts.keys[row];
                let rowElement = "";
                if (row === "row1" && !showTopRow) {
                    return;
                }
                if ((row === "row2" || row === "row3" || row === "row4") && !isMatrix) {
                    rowElement += "<div></div>";
                }
                if (row === "row4" && lts.type !== "iso" && !isMatrix) {
                    rowElement += "<div></div>";
                }
                if (row === "row5") {
                    let layoutDisplay = layoutString.replace(/_/g, " ");
                    if (config_1.default.keymapLegendStyle === "blank") {
                        layoutDisplay = "";
                    }
                    rowElement += "<div></div>";
                    rowElement += `<div class="keymap-key key-space">
          <div class="letter">${layoutDisplay}</div>
        </div>`;
                    rowElement += `<div class="keymap-split-spacer"></div>`;
                    rowElement += `<div class="keymap-key key-split-space">
          <div class="letter"></div>
        </div>`;
                }
                else {
                    for (let i = 0; i < rowKeys.length; i++) {
                        if (row === "row2" && i === 12)
                            continue;
                        if ((config_1.default.keymapStyle === "matrix" ||
                            config_1.default.keymapStyle === "split_matrix") &&
                            i >= 10) {
                            continue;
                        }
                        const key = rowKeys[i];
                        const bump = row === "row3" && (i === 3 || i === 6) ? true : false;
                        let keyDisplay = key[0];
                        if (config_1.default.keymapLegendStyle === "blank") {
                            keyDisplay = "";
                        }
                        else if (config_1.default.keymapLegendStyle === "uppercase") {
                            keyDisplay = keyDisplay.toUpperCase();
                        }
                        const keyElement = `<div class="keymap-key" data-key="${key.replace('"', "&quot;")}">
              <span class="letter">${keyDisplay}</span>
              ${bump ? "<div class='bump'></div>" : ""}
          </div>`;
                        let splitSpacer = "";
                        if (config_1.default.keymapStyle === "split" ||
                            config_1.default.keymapStyle === "split_matrix" ||
                            config_1.default.keymapStyle === "alice") {
                            if (row === "row4" &&
                                (config_1.default.keymapStyle === "split" ||
                                    config_1.default.keymapStyle === "alice") &&
                                lts.type === "iso") {
                                if (i === 6) {
                                    splitSpacer += `<div class="keymap-split-spacer"></div>`;
                                }
                            }
                            else {
                                if (i === 5) {
                                    splitSpacer += `<div class="keymap-split-spacer"></div>`;
                                }
                            }
                        }
                        if (config_1.default.keymapStyle === "alice" && row === "row4") {
                            if ((lts.type === "iso" && i === 6) ||
                                (lts.type !== "iso" && i === 5)) {
                                splitSpacer += `<div class="extra-key"><span class="letter"></span></div>`;
                            }
                        }
                        rowElement += splitSpacer + keyElement;
                    }
                }
                keymapElement += `<div class="row r${index + 1}">${rowElement}</div>`;
            });
            $("#keymap").html(keymapElement);
            $("#keymap").removeClass("staggered");
            $("#keymap").removeClass("matrix");
            $("#keymap").removeClass("split");
            $("#keymap").removeClass("split_matrix");
            $("#keymap").removeClass("alice");
            $("#keymap").addClass(config_1.default.keymapStyle);
        }
        catch (e) {
            if (e instanceof Error) {
                console.log("something went wrong when changing layout, resettings: " + e.message);
                // UpdateConfig.setKeymapLayout("qwerty", true);
            }
        }
    });
}
exports.refresh = refresh;
ConfigEvent.subscribe((eventKey) => {
    if (eventKey === "layout" && config_1.default.keymapLayout === "overrideSync") {
        refresh(config_1.default.keymapLayout);
    }
    if (eventKey === "keymapLayout" || eventKey === "keymapStyle")
        refresh();
});


/***/ }),

/***/ "./src/scripts/elements/last-10-average.ts":
/*!*************************************************!*\
  !*** ./src/scripts/elements/last-10-average.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getAcc = exports.getWPM = exports.update = void 0;
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const TestWords = __importStar(__webpack_require__(/*! ../test/test-words */ "./src/scripts/test/test-words.ts"));
let averageWPM = 0;
let averageAcc = 0;
function update() {
    return __awaiter(this, void 0, void 0, function* () {
        const mode2 = Misc.getMode2(config_1.default, TestWords.randomQuote);
        const [wpm, acc] = (yield DB.getUserAverage10(config_1.default.mode, mode2, config_1.default.punctuation, config_1.default.language, config_1.default.difficulty, config_1.default.lazyMode))
            .map(Misc.roundTo2)
            .map((num) => (config_1.default.alwaysShowDecimalPlaces ? Math.round(num) : num));
        averageWPM = wpm;
        averageAcc = acc;
    });
}
exports.update = update;
function getWPM() {
    return averageWPM;
}
exports.getWPM = getWPM;
function getAcc() {
    return averageAcc;
}
exports.getAcc = getAcc;


/***/ }),

/***/ "./src/scripts/elements/leaderboards.ts":
/*!**********************************************!*\
  !*** ./src/scripts/elements/leaderboards.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.show = exports.hide = void 0;
const ape_1 = __importDefault(__webpack_require__(/*! ../ape */ "./src/scripts/ape/index.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const Notifications = __importStar(__webpack_require__(/*! ./notifications */ "./src/scripts/elements/notifications.ts"));
const format_1 = __importDefault(__webpack_require__(/*! date-fns/format */ "./node_modules/date-fns/esm/format/index.js"));
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
const currentLeaderboard = "time_15";
let currentData = {
    15: [],
    60: [],
};
let currentRank = {
    15: {},
    60: {},
};
const requesting = {
    15: false,
    60: false,
};
const leaderboardSingleLimit = 50;
let updateTimer;
function clearTable(lb) {
    if (lb === 15) {
        $("#leaderboardsWrapper table.left tbody").empty();
        $("#leaderboardsWrapper table.left tfoot").empty();
    }
    else if (lb === 60) {
        $("#leaderboardsWrapper table.right tbody").empty();
        $("#leaderboardsWrapper table.right tfoot").empty();
    }
}
function reset() {
    currentData = {
        15: [],
        60: [],
    };
    currentRank = {
        15: {},
        60: {},
    };
}
function stopTimer() {
    clearInterval(updateTimer);
    updateTimer = undefined;
    $("#leaderboards .subTitle").text("Next update in: --:--");
}
function updateTimerElement() {
    const date = new Date();
    const minutesToNextUpdate = 14 - (date.getMinutes() % 15);
    const secondsToNextUpdate = 60 - date.getSeconds();
    const totalSeconds = minutesToNextUpdate * 60 + secondsToNextUpdate;
    $("#leaderboards .subTitle").text("Next update in: " + Misc.secondsToString(totalSeconds, true));
}
function startTimer() {
    updateTimerElement();
    updateTimer = setInterval(() => {
        updateTimerElement();
    }, 1000);
}
function showLoader(lb) {
    if (lb === 15) {
        $(`#leaderboardsWrapper .leftTableLoader`).removeClass("hidden");
    }
    else if (lb === 60) {
        $(`#leaderboardsWrapper .rightTableLoader`).removeClass("hidden");
    }
}
function hideLoader(lb) {
    if (lb === 15) {
        $(`#leaderboardsWrapper .leftTableLoader`).addClass("hidden");
    }
    else if (lb === 60) {
        $(`#leaderboardsWrapper .rightTableLoader`).addClass("hidden");
    }
}
function updateFooter(lb) {
    let side;
    if (lb === 15) {
        side = "left";
    }
    else {
        side = "right";
    }
    $(`#leaderboardsWrapper table.${side} tfoot`).html(`
    <tr>
      <td><br><br></td>
      <td colspan="4" style="text-align:center;">Not qualified</>
      <td><br><br></td>
    </tr>
    `);
    let toppercent;
    if (currentRank[lb]) {
        let num = Misc.roundTo2((currentRank[lb]["rank"] / currentRank[lb].count) * 100);
        if (num == 0) {
            num = 0.01;
        }
        toppercent = `Top ${num}%`;
    }
    if (currentRank[lb]) {
        const entry = currentRank[lb];
        const date = new Date(entry.timestamp);
        $(`#leaderboardsWrapper table.${side} tfoot`).html(`
    <tr>
    <td>${entry.rank}</td>
    <td><span class="top">You</span><br><span class="sub">${toppercent}</span></td>
    <td class="alignRight">${(config_1.default.alwaysShowCPM
            ? entry.wpm * 5
            : entry.wpm).toFixed(2)}<br><div class="sub">${entry.acc.toFixed(2)}%</div></td>
    <td class="alignRight">${(config_1.default.alwaysShowCPM
            ? entry.raw * 5
            : entry.raw).toFixed(2)}<br><div class="sub">${!entry.consistency || entry.consistency === "-"
            ? "-"
            : entry.consistency.toFixed(2) + "%"}</div></td>
    <td class="alignRight">time<br><div class="sub">${lb}</div></td>
    <td class="alignRight">${(0, format_1.default)(date, "dd MMM yyyy")}<br>
    <div class='sub'>${(0, format_1.default)(date, "HH:mm")}</div></td>
  </tr>
  `);
    }
}
function checkLbMemory(lb) {
    var _a, _b, _c, _d, _e;
    let side;
    if (lb === 15) {
        side = "left";
    }
    else {
        side = "right";
    }
    const memory = (_e = (_d = (_c = (_b = (_a = DB.getSnapshot()) === null || _a === void 0 ? void 0 : _a.lbMemory) === null || _b === void 0 ? void 0 : _b.time) === null || _c === void 0 ? void 0 : _c[lb]) === null || _d === void 0 ? void 0 : _d["english"]) !== null && _e !== void 0 ? _e : 0;
    if (currentRank[lb]) {
        const difference = memory - currentRank[lb].rank;
        if (difference > 0) {
            DB.updateLbMemory("time", lb, "english", currentRank[lb].rank, true);
            if (memory !== 0) {
                $(`#leaderboardsWrapper table.${side} tfoot tr td .top`).append(` (<i class="fas fa-fw fa-angle-up"></i>${Math.abs(difference)} since you last checked)`);
            }
        }
        else if (difference < 0) {
            DB.updateLbMemory("time", lb, "english", currentRank[lb].rank, true);
            if (memory !== 0) {
                $(`#leaderboardsWrapper table.${side} tfoot tr td .top`).append(` (<i class="fas fa-fw fa-angle-down"></i>${Math.abs(difference)} since you last checked)`);
            }
        }
        else {
            if (memory !== 0) {
                $(`#leaderboardsWrapper table.${side} tfoot tr td .top`).append(` ( = since you last checked)`);
            }
        }
    }
}
function fillTable(lb, prepend) {
    var _a;
    if (!currentData[lb]) {
        return;
    }
    let side;
    if (lb === 15) {
        side = "left";
    }
    else {
        side = "right";
    }
    const loggedInUserName = (_a = DB.getSnapshot()) === null || _a === void 0 ? void 0 : _a.name;
    let a = currentData[lb].length - leaderboardSingleLimit;
    let b = currentData[lb].length;
    if (a < 0)
        a = 0;
    if (prepend) {
        a = 0;
        b = prepend;
    }
    let html = "";
    for (let i = a; i < b; i++) {
        const entry = currentData[lb][i];
        if (!entry) {
            break;
        }
        if (entry.hidden)
            return;
        let meClassString = "";
        if (entry.name == loggedInUserName) {
            meClassString = ' class="me"';
        }
        const date = new Date(entry.timestamp);
        html += `
    <tr ${meClassString}>
    <td>${entry.rank === 1 ? '<i class="fas fa-fw fa-crown"></i>' : entry.rank}</td>
    <td>${entry.name}</td>
    <td class="alignRight">${(config_1.default.alwaysShowCPM
            ? entry.wpm * 5
            : entry.wpm).toFixed(2)}<br><div class="sub">${entry.acc.toFixed(2)}%</div></td>
    <td class="alignRight">${(config_1.default.alwaysShowCPM
            ? entry.raw * 5
            : entry.raw).toFixed(2)}<br><div class="sub">${!entry.consistency || entry.consistency === "-"
            ? "-"
            : entry.consistency.toFixed(2) + "%"}</div></td>
    <td class="alignRight">time<br><div class="sub">${lb}</div></td>
    <td class="alignRight">${(0, format_1.default)(date, "dd MMM yyyy")}<br>
    <div class='sub'>${(0, format_1.default)(date, "HH:mm")}</div></td>
  </tr>
  `;
    }
    if (!prepend) {
        $(`#leaderboardsWrapper table.${side} tbody`).append(html);
    }
    else {
        $(`#leaderboardsWrapper table.${side} tbody`).prepend(html);
    }
}
function hide() {
    $("#leaderboardsWrapper")
        .stop(true, true)
        .css("opacity", 1)
        .animate({
        opacity: 0,
    }, 100, () => {
        clearTable(15);
        clearTable(60);
        reset();
        stopTimer();
        $("#leaderboardsWrapper").addClass("hidden");
    });
}
exports.hide = hide;
function update() {
    return __awaiter(this, void 0, void 0, function* () {
        $("#leaderboardsWrapper .buttons .button").removeClass("active");
        $(`#leaderboardsWrapper .buttons .button[board=${currentLeaderboard}]`).addClass("active");
        showLoader(15);
        showLoader(60);
        const leaderboardRequests = [
            ape_1.default.leaderboards.get("english", "time", "15", 0),
            ape_1.default.leaderboards.get("english", "time", "60", 0),
        ];
        if (firebase_1.Auth.currentUser) {
            leaderboardRequests.push(ape_1.default.leaderboards.getRank("english", "time", "15"), ape_1.default.leaderboards.getRank("english", "time", "60"));
        }
        const responses = yield Promise.all(leaderboardRequests);
        const failedResponse = responses.find((response) => response.status !== 200);
        if (failedResponse) {
            return Notifications.add("Failed to load leaderboards: " + failedResponse.message, -1);
        }
        const [lb15Data, lb60Data, lb15Rank, lb60Rank] = responses.map((response) => response.data);
        currentData[15] = lb15Data;
        currentData[60] = lb60Data;
        currentRank[15] = lb15Rank;
        currentRank[60] = lb60Rank;
        const leaderboardKeys = [15, 60];
        leaderboardKeys.forEach((leaderboardTime) => {
            hideLoader(leaderboardTime);
            clearTable(leaderboardTime);
            updateFooter(leaderboardTime);
            checkLbMemory(leaderboardTime);
            fillTable(leaderboardTime);
        });
        $("#leaderboardsWrapper .leftTableWrapper").removeClass("invisible");
        $("#leaderboardsWrapper .rightTableWrapper").removeClass("invisible");
    });
}
function requestMore(lb, prepend = false) {
    return __awaiter(this, void 0, void 0, function* () {
        if (prepend && currentData[lb][0].rank === 1)
            return;
        if (requesting[lb])
            return;
        requesting[lb] = true;
        showLoader(lb);
        let skipVal = currentData[lb][currentData[lb].length - 1].rank;
        if (prepend) {
            skipVal = currentData[lb][0].rank - leaderboardSingleLimit;
        }
        let limitVal;
        if (skipVal < 0) {
            limitVal = Math.abs(skipVal) - 1;
            skipVal = 0;
        }
        const response = yield ape_1.default.leaderboards.get("english", "time", lb, skipVal, limitVal);
        const data = response.data;
        if (response.status !== 200 || data.length === 0) {
            hideLoader(lb);
            return;
        }
        if (prepend) {
            currentData[lb].unshift(...data);
        }
        else {
            currentData[lb].push(...data);
        }
        if (prepend && !limitVal) {
            limitVal = leaderboardSingleLimit - 1;
        }
        fillTable(lb, limitVal);
        hideLoader(lb);
        requesting[lb] = false;
    });
}
function requestNew(lb, skip) {
    return __awaiter(this, void 0, void 0, function* () {
        showLoader(lb);
        const response = yield ape_1.default.leaderboards.get("english", "time", lb, skip);
        const data = response.data;
        clearTable(lb);
        currentData[lb] = [];
        if (response.status !== 200 || data.length === 0) {
            hideLoader(lb);
            return;
        }
        currentData[lb] = data;
        fillTable(lb);
        hideLoader(lb);
    });
}
function show() {
    if ($("#leaderboardsWrapper").hasClass("hidden")) {
        if (firebase_1.Auth.currentUser) {
            $("#leaderboardsWrapper #leaderboards .rightTableJumpToMe").removeClass("disabled");
            $("#leaderboardsWrapper #leaderboards .leftTableJumpToMe").removeClass("disabled");
        }
        else {
            $("#leaderboardsWrapper #leaderboards .rightTableJumpToMe").addClass("disabled");
            $("#leaderboardsWrapper #leaderboards .leftTableJumpToMe").addClass("disabled");
        }
        if (config_1.default.alwaysShowCPM) {
            $("#leaderboards table thead tr td:nth-child(3)").html('cpm<br><div class="sub">accuracy</div>');
        }
        else {
            $("#leaderboards table thead tr td:nth-child(3)").html('wpm<br><div class="sub">accuracy</div>');
        }
        $("#leaderboardsWrapper")
            .stop(true, true)
            .css("opacity", 0)
            .removeClass("hidden")
            .animate({
            opacity: 1,
        }, 125, () => {
            update();
            startTimer();
        });
    }
}
exports.show = show;
$("#leaderboardsWrapper").on("click", (e) => {
    if ($(e.target).attr("id") === "leaderboardsWrapper") {
        hide();
    }
});
// $("#leaderboardsWrapper .buttons .button").on("click",(e) => {
//   currentLeaderboard = $(e.target).attr("board");
//   update();
// });
let leftScrollEnabled = true;
$("#leaderboardsWrapper #leaderboards .leftTableWrapper").scroll((e) => {
    if (!leftScrollEnabled)
        return;
    const elem = $(e.currentTarget);
    if (Math.round(elem.scrollTop()) <= 50) {
        requestMore(15, true);
    }
});
$("#leaderboardsWrapper #leaderboards .leftTableWrapper").scroll((e) => {
    if (!leftScrollEnabled)
        return;
    const elem = $(e.currentTarget);
    if (Math.round(elem[0].scrollHeight - elem.scrollTop()) <=
        Math.round(elem.outerHeight()) + 50) {
        requestMore(15);
    }
});
let rightScrollEnabled = true;
$("#leaderboardsWrapper #leaderboards .rightTableWrapper").scroll((e) => {
    if (!rightScrollEnabled)
        return;
    const elem = $(e.currentTarget);
    if (Math.round(elem.scrollTop()) <= 50) {
        requestMore(60, true);
    }
});
$("#leaderboardsWrapper #leaderboards .rightTableWrapper").scroll((e) => {
    const elem = $(e.currentTarget);
    if (Math.round(elem[0].scrollHeight - elem.scrollTop()) <=
        Math.round(elem.outerHeight() + 50)) {
        requestMore(60);
    }
});
$("#leaderboardsWrapper #leaderboards .leftTableJumpToTop").on("click", () => __awaiter(void 0, void 0, void 0, function* () {
    leftScrollEnabled = false;
    $("#leaderboardsWrapper #leaderboards .leftTableWrapper").scrollTop(0);
    yield requestNew(15, 0);
    leftScrollEnabled = true;
}));
$("#leaderboardsWrapper #leaderboards .leftTableJumpToMe").on("click", () => __awaiter(void 0, void 0, void 0, function* () {
    if (currentRank[15].rank === undefined)
        return;
    leftScrollEnabled = false;
    yield requestNew(15, currentRank[15].rank - leaderboardSingleLimit / 2);
    const rowHeight = $("#leaderboardsWrapper #leaderboards .leftTableWrapper table tbody td").outerHeight();
    $("#leaderboardsWrapper #leaderboards .leftTableWrapper").animate({
        scrollTop: rowHeight *
            Math.min(currentRank[15].rank, leaderboardSingleLimit / 2) -
            $("#leaderboardsWrapper #leaderboards .leftTableWrapper").outerHeight() /
                2.25,
    }, 0, () => {
        leftScrollEnabled = true;
    });
}));
$("#leaderboardsWrapper #leaderboards .rightTableJumpToTop").on("click", () => __awaiter(void 0, void 0, void 0, function* () {
    rightScrollEnabled = false;
    $("#leaderboardsWrapper #leaderboards .rightTableWrapper").scrollTop(0);
    yield requestNew(60, 0);
    rightScrollEnabled = true;
}));
$("#leaderboardsWrapper #leaderboards .rightTableJumpToMe").on("click", () => __awaiter(void 0, void 0, void 0, function* () {
    if (currentRank[60].rank === undefined)
        return;
    leftScrollEnabled = false;
    yield requestNew(60, currentRank[60].rank - leaderboardSingleLimit / 2);
    const rowHeight = $("#leaderboardsWrapper #leaderboards .rightTableWrapper table tbody td").outerHeight();
    $("#leaderboardsWrapper #leaderboards .rightTableWrapper").animate({
        scrollTop: rowHeight *
            Math.min(currentRank[60].rank, leaderboardSingleLimit / 2) -
            $("#leaderboardsWrapper #leaderboards .rightTableWrapper").outerHeight() /
                2.25,
    }, 0, () => {
        leftScrollEnabled = true;
    });
}));
$(document).on("click", "#top #menu .icon-button", (e) => {
    if ($(e.currentTarget).hasClass("leaderboards")) {
        show();
    }
    return false;
});
$(document).on("keydown", (event) => {
    if (event.key === "Escape" && !$("#leaderboardsWrapper").hasClass("hidden")) {
        hide();
        event.preventDefault();
    }
});


/***/ }),

/***/ "./src/scripts/elements/loader.ts":
/*!****************************************!*\
  !*** ./src/scripts/elements/loader.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hide = exports.show = void 0;
function show() {
    $("#backgroundLoader").stop(true, true).fadeIn(125);
}
exports.show = show;
function hide() {
    $("#backgroundLoader").stop(true, true).fadeOut(125);
}
exports.hide = hide;


/***/ }),

/***/ "./src/scripts/elements/modes-notice.ts":
/*!**********************************************!*\
  !*** ./src/scripts/elements/modes-notice.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.update = void 0;
const PaceCaret = __importStar(__webpack_require__(/*! ../test/pace-caret */ "./src/scripts/test/pace-caret.ts"));
const TestState = __importStar(__webpack_require__(/*! ../test/test-state */ "./src/scripts/test/test-state.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const Last10Average = __importStar(__webpack_require__(/*! ../elements/last-10-average */ "./src/scripts/elements/last-10-average.ts"));
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const TestWords = __importStar(__webpack_require__(/*! ../test/test-words */ "./src/scripts/test/test-words.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
ConfigEvent.subscribe((eventKey) => {
    if ([
        "difficulty",
        "blindMode",
        "stopOnError",
        "paceCaret",
        "minWpm",
        "minAcc",
        "minBurst",
        "confidenceMode",
        "layout",
        "showAverage",
        "alwaysShowCPM",
    ].includes(eventKey)) {
        update();
    }
});
function update() {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        let anim = false;
        if ($(".pageTest #testModesNotice").text() === "")
            anim = true;
        $(".pageTest #testModesNotice").empty();
        if (TestState.isRepeated && config_1.default.mode !== "quote") {
            $(".pageTest #testModesNotice").append(`<div class="text-button restart" style="color:var(--error-color);"><i class="fas fa-sync-alt"></i>repeated</div>`);
        }
        if (TestWords.hasTab) {
            $(".pageTest #testModesNotice").append(`<div class="text-button"><i class="fas fa-long-arrow-alt-right"></i>shift + tab to restart</div>`);
        }
        if (TestState.activeChallenge) {
            $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsChallenges"><i class="fas fa-award"></i>${TestState.activeChallenge.display}</div>`);
        }
        if (config_1.default.mode === "zen") {
            $(".pageTest #testModesNotice").append(`<div class="text-button"><i class="fas fa-poll"></i>shift + enter to finish zen </div>`);
        }
        $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsLanguages"><i class="fas fa-globe-americas"></i>${config_1.default.language.replace(/_/g, " ")}</div>`);
        if (config_1.default.difficulty === "expert") {
            $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsDifficulty"><i class="fas fa-star-half-alt"></i>expert</div>`);
        }
        else if (config_1.default.difficulty === "master") {
            $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsDifficulty"><i class="fas fa-star"></i>master</div>`);
        }
        if (config_1.default.blindMode) {
            $(".pageTest #testModesNotice").append(`<div class="text-button blind"><i class="fas fa-eye-slash"></i>blind</div>`);
        }
        if (config_1.default.lazyMode) {
            $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsLazyMode"><i class="fas fa-couch"></i>lazy</div>`);
        }
        if (config_1.default.paceCaret !== "off" ||
            (config_1.default.repeatedPace && TestState.isPaceRepeat)) {
            let speed = "";
            try {
                speed = ` (${Math.round(PaceCaret.settings.wpm)} wpm)`;
            }
            catch (_b) { }
            $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsPaceCaret"><i class="fas fa-tachometer-alt"></i>${config_1.default.paceCaret === "average"
                ? "average"
                : config_1.default.paceCaret === "pb"
                    ? "pb"
                    : "custom"} pace${speed}</div>`);
        }
        if (config_1.default.showAverage !== "off") {
            let avgWPM = Last10Average.getWPM();
            let avgAcc = Last10Average.getAcc();
            if (!config_1.default.alwaysShowDecimalPlaces) {
                avgWPM = Math.round(avgWPM);
                avgAcc = Math.round(avgAcc);
            }
            if (firebase_1.Auth.currentUser && avgWPM > 0) {
                const avgWPMText = ["wpm", "both"].includes(config_1.default.showAverage)
                    ? config_1.default.alwaysShowCPM
                        ? `${Math.round(avgWPM * 5)} cpm`
                        : `${avgWPM} wpm`
                    : "";
                const avgAccText = ["acc", "both"].includes(config_1.default.showAverage)
                    ? `${avgAcc}% acc`
                    : "";
                const text = `${avgWPMText} ${avgAccText}`.trim();
                $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsShowAverage"><i class="fas fa-chart-bar"></i>avg: ${text}</div>`);
            }
        }
        if (config_1.default.minWpm !== "off") {
            $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsMinWpm"><i class="fas fa-bomb"></i>min ${config_1.default.minWpmCustomSpeed} wpm</div>`);
        }
        if (config_1.default.minAcc !== "off") {
            $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsMinAcc"><i class="fas fa-bomb"></i>min ${config_1.default.minAccCustom}% acc</div>`);
        }
        if (config_1.default.minBurst !== "off") {
            $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsMinBurst"><i class="fas fa-bomb"></i>min ${config_1.default.minBurstCustomSpeed} burst ${config_1.default.minBurst === "flex" ? "(flex)" : ""}</div>`);
        }
        if (config_1.default.funbox !== "none") {
            $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsFunbox"><i class="fas fa-gamepad"></i>${config_1.default.funbox.replace(/_/g, " ")}</div>`);
        }
        if (config_1.default.confidenceMode === "on") {
            $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsConfidenceMode"><i class="fas fa-backspace"></i>confidence</div>`);
        }
        if (config_1.default.confidenceMode === "max") {
            $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsConfidenceMode"><i class="fas fa-backspace"></i>max confidence</div>`);
        }
        if (config_1.default.stopOnError != "off") {
            $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsStopOnError"><i class="fas fa-hand-paper"></i>stop on ${config_1.default.stopOnError}</div>`);
        }
        if (config_1.default.layout !== "default") {
            $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsLayouts"><i class="fas fa-keyboard"></i>emulating ${config_1.default.layout.replace(/_/g, " ")}</div>`);
        }
        if (config_1.default.oppositeShiftMode !== "off") {
            $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsOppositeShiftMode"><i class="fas fa-exchange-alt"></i>opposite shift${config_1.default.oppositeShiftMode === "keymap" ? " (keymap)" : ""}</div>`);
        }
        let tagsString = "";
        try {
            (_a = DB.getSnapshot().tags) === null || _a === void 0 ? void 0 : _a.forEach((tag) => {
                if (tag.active === true) {
                    tagsString += tag.name + ", ";
                }
            });
            if (tagsString !== "") {
                $(".pageTest #testModesNotice").append(`<div class="text-button" commands="commandsTags"><i class="fas fa-tag"></i>${tagsString.substring(0, tagsString.length - 2)}</div>`);
            }
        }
        catch (_c) { }
        if (anim) {
            $(".pageTest #testModesNotice")
                .css("transition", "none")
                .css("opacity", 0)
                .animate({
                opacity: 1,
            }, 125, () => {
                $(".pageTest #testModesNotice").css("transition", ".125s");
            });
        }
    });
}
exports.update = update;


/***/ }),

/***/ "./src/scripts/elements/monkey-power.ts":
/*!**********************************************!*\
  !*** ./src/scripts/elements/monkey-power.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addPower = exports.reset = exports.init = void 0;
const ThemeColors = __importStar(__webpack_require__(/*! ./theme-colors */ "./src/scripts/elements/theme-colors.ts"));
const SlowTimer = __importStar(__webpack_require__(/*! ../states/slow-timer */ "./src/scripts/states/slow-timer.ts"));
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
/**
 * @typedef {{ x: number, y: number }} vec2
 * @typedef {vec2 & { prev: vec2, vel: vec2, alpha: number, color: string }} Particle
 * @typedef {{ particles: Particle[], caret: any, canvas: HTMLCanvasElement, context2d: CanvasRenderingContext2D, rendering: boolean, lastFrame: number, deltaTime: number, resetTimeOut: number }} CTX
 */
/**
 * @type {CTX} ctx
 */
const ctx = {
    particles: [],
    rendering: false,
};
const gravity = 1000;
const drag = 0.05;
const particleSize = 4;
const particleFade = 0.6;
const particleInitVel = 1500;
const particleBounceMod = 0.3;
const particleCreateCount = [6, 3];
const shakeAmount = 10;
function createCanvas() {
    const canvas = document.createElement("canvas");
    canvas.style.cssText =
        "position:fixed;top:0;left:0;pointer-events:none;z-index:999999";
    canvas.height = window.innerHeight;
    canvas.width = window.innerWidth;
    window.addEventListener("resize", () => {
        canvas.height = window.innerHeight;
        canvas.width = window.innerWidth;
    });
    document.body.appendChild(canvas);
    return canvas;
}
/**
 * @param {number} x
 * @param {number} y
 * @param {string} color
 * @returns {Particle}
 */
function createParticle(x, y, color) {
    return {
        x,
        y,
        color,
        alpha: 1,
        prev: { x, y },
        vel: {
            x: particleInitVel - Math.random() * particleInitVel * 2,
            y: particleInitVel - Math.random() * particleInitVel * 2,
        },
    };
}
/**
 * @param {Particle} particle
 */
function updateParticle(particle) {
    if (!ctx.canvas || !ctx.deltaTime)
        return;
    particle.prev.x = particle.x;
    particle.prev.y = particle.y;
    // Update pos
    particle.x += particle.vel.x * ctx.deltaTime;
    particle.y += particle.vel.y * ctx.deltaTime;
    if (particle.x > ctx.canvas.width) {
        particle.vel.x *= -particleBounceMod;
        particle.x =
            ctx.canvas.width - (particle.x - ctx.canvas.width) * particleBounceMod;
    }
    else if (particle.x < 0) {
        particle.vel.x *= -particleBounceMod;
        particle.x *= -particleBounceMod;
    }
    if (particle.y > ctx.canvas.height) {
        particle.vel.y *= -particleBounceMod;
        particle.y =
            ctx.canvas.height - (particle.y - ctx.canvas.height) * particleBounceMod;
    }
    else if (particle.y < 0) {
        particle.vel.y *= -1;
        particle.y *= -1;
    }
    particle.vel.y += gravity * ctx.deltaTime;
    particle.vel.x *= 1 - drag * ctx.deltaTime;
    particle.alpha *= 1 - particleFade * ctx.deltaTime;
}
function init() {
    ctx.caret = $("#caret");
    ctx.canvas = createCanvas();
    ctx.context2d = ctx.canvas.getContext("2d");
}
exports.init = init;
function render() {
    if (!ctx.lastFrame || !ctx.context2d || !ctx.canvas)
        return;
    ctx.rendering = true;
    const time = Date.now();
    ctx.deltaTime = (time - ctx.lastFrame) / 1000;
    ctx.lastFrame = time;
    ctx.context2d.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    const keep = [];
    for (let i = 0; i < ctx.particles.length; i++) {
        const particle = ctx.particles[i];
        if (particle.alpha < 0.1)
            continue;
        updateParticle(particle);
        ctx.context2d.globalAlpha = particle.alpha;
        ctx.context2d.strokeStyle = particle.color;
        ctx.context2d.lineWidth = particleSize;
        ctx.context2d.beginPath();
        ctx.context2d.moveTo(Math.round(particle.prev.x), Math.round(particle.prev.y));
        ctx.context2d.lineTo(Math.round(particle.x), Math.round(particle.y));
        ctx.context2d.stroke();
        keep.push(particle);
    }
    ctx.particles = keep;
    if (ctx.particles.length && !SlowTimer.get()) {
        requestAnimationFrame(render);
    }
    else {
        ctx.context2d.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        ctx.rendering = false;
    }
}
function reset(immediate = false) {
    if (!ctx.resetTimeOut)
        return;
    delete ctx.resetTimeOut;
    clearTimeout(ctx.resetTimeOut);
    const body = $(document.body);
    body.css("transition", "all .25s, transform 0.8s");
    body.css("transform", `translate(0,0)`);
    setTimeout(() => {
        body.css("transition", "all .25s, transform .05s");
        $("html").css("overflow", "inherit");
        $("html").css("overflow-y", "scroll");
    }, immediate ? 0 : 1000);
}
exports.reset = reset;
function startRender() {
    if (!ctx.rendering) {
        ctx.lastFrame = Date.now();
        render();
    }
}
function randomColor() {
    const r = Math.floor(Math.random() * 256).toString(16);
    const g = Math.floor(Math.random() * 256).toString(16);
    const b = Math.floor(Math.random() * 256).toString(16);
    return `#${r}${g}${b}`;
}
/**
 * @param {boolean} good Good power or not?
 */
function addPower(good = true, extra = false) {
    var _a, _b, _c, _d, _e;
    return __awaiter(this, void 0, void 0, function* () {
        if (config_1.default.monkeyPowerLevel === "off" || SlowTimer.get())
            return;
        // Shake
        if (["3", "4"].includes(config_1.default.monkeyPowerLevel)) {
            $("html").css("overflow", "hidden");
            const shake = [
                Math.round(shakeAmount - Math.random() * shakeAmount),
                Math.round(shakeAmount - Math.random() * shakeAmount),
            ];
            $(document.body).css("transform", `translate(${shake[0]}px, ${shake[1]}px)`);
            if (ctx.resetTimeOut)
                clearTimeout(ctx.resetTimeOut);
            ctx.resetTimeOut = setTimeout(reset, 2000);
        }
        // Sparks
        const offset = (_a = ctx.caret) === null || _a === void 0 ? void 0 : _a.offset();
        const coords = [
            (_b = offset === null || offset === void 0 ? void 0 : offset.left) !== null && _b !== void 0 ? _b : 0,
            ((_c = offset === null || offset === void 0 ? void 0 : offset.top) !== null && _c !== void 0 ? _c : 0) + ((_e = (_d = ctx.caret) === null || _d === void 0 ? void 0 : _d.height()) !== null && _e !== void 0 ? _e : 0),
        ];
        for (let i = Math.round((particleCreateCount[0] + Math.random() * particleCreateCount[1]) *
            (extra ? 2 : 1)); i > 0; i--) {
            const color = ["2", "4"].includes(config_1.default.monkeyPowerLevel)
                ? randomColor()
                : good
                    ? yield ThemeColors.get("caret")
                    : yield ThemeColors.get("error");
            ctx.particles.push(createParticle(...coords, color));
        }
        startRender();
    });
}
exports.addPower = addPower;


/***/ }),

/***/ "./src/scripts/elements/notifications.ts":
/*!***********************************************!*\
  !*** ./src/scripts/elements/notifications.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addBanner = exports.add = void 0;
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
let id = 0;
class Notification {
    constructor(type, message, level, duration, customTitle, customIcon, closeCallback = () => {
        //
    }) {
        this.type = type;
        this.message = message;
        this.level = level;
        if (type === "banner") {
            this.duration = duration;
        }
        else {
            if (duration == undefined) {
                if (level === -1) {
                    this.duration = 0;
                }
                else {
                    this.duration = 3000;
                }
            }
            else {
                this.duration = duration * 1000;
            }
        }
        this.customTitle = customTitle;
        this.customIcon = customIcon;
        this.id = id++;
        this.closeCallback = closeCallback;
    }
    //level
    //0 - notice
    //1 - good
    //-1 - bad
    show() {
        let cls = "notice";
        let icon = `<i class="fas fa-fw fa-exclamation"></i>`;
        let title = "Notice";
        if (this.level === 1) {
            cls = "good";
            icon = `<i class="fas fa-fw fa-check"></i>`;
            title = "Success";
        }
        else if (this.level === -1) {
            cls = "bad";
            icon = `<i class="fas fa-fw fa-times"></i>`;
            title = "Error";
            console.error(this.message);
        }
        if (this.customTitle != undefined) {
            title = this.customTitle;
        }
        if (this.type === "banner") {
            icon = `<i class="fas fa-fw fa-bullhorn"></i>`;
        }
        if (this.customIcon != undefined) {
            icon = `<i class="fas fa-fw fa-${this.customIcon}"></i>`;
        }
        if (this.type === "notification") {
            // moveCurrentToHistory();
            const oldHeight = $("#notificationCenter .history").height();
            $("#notificationCenter .history").prepend(`
          
          <div class="notif ${cls}" id=${this.id}>
              <div class="icon">${icon}</div>
              <div class="message"><div class="title">${title}</div>${this.message}</div>
          </div>     

          `);
            const newHeight = $("#notificationCenter .history").height();
            $(`#notificationCenter .notif[id='${this.id}']`).remove();
            $("#notificationCenter .history")
                .css("margin-top", 0)
                .animate({
                marginTop: newHeight - oldHeight,
            }, 125, () => {
                $("#notificationCenter .history").css("margin-top", 0);
                $("#notificationCenter .history").prepend(`
          
                  <div class="notif ${cls}" id=${this.id}>
                      <div class="icon">${icon}</div>
                      <div class="message"><div class="title">${title}</div>${this.message}</div>
                  </div>     

              `);
                $(`#notificationCenter .notif[id='${this.id}']`)
                    .css("opacity", 0)
                    .animate({
                    opacity: 1,
                }, 125, () => {
                    $(`#notificationCenter .notif[id='${this.id}']`).css("opacity", "");
                });
                $(`#notificationCenter .notif[id='${this.id}']`).on("click", () => {
                    this.hide();
                    this.closeCallback();
                });
            });
            $(`#notificationCenter .notif[id='${this.id}']`).hover(() => {
                $(`#notificationCenter .notif[id='${this.id}']`).toggleClass("hover");
            });
        }
        else if (this.type === "banner") {
            let leftside = `<div class="icon lefticon">${icon}</div>`;
            if (/^images\/.*/.test(this.customIcon)) {
                leftside = `<div class="image" style="background-image: url(${this.customIcon})"></div>`;
            }
            $("#bannerCenter").prepend(`
        <div class="banner ${cls}" id="${this.id}">
        <div class="container">
          ${leftside}
          <div class="text">
            ${this.message}
          </div>
          ${this.duration >= 0
                ? `
          <div class="closeButton">
            <i class="fas fa-fw fa-times"></i>
          </div>
          `
                : `<div class="righticon">${icon}</div>`}
        </div>
      </div>
      `);
            const height = $("#bannerCenter").height();
            $("#centerContent").css("padding-top", height + Misc.convertRemToPixels(2) + "px");
            $("#notificationCenter").css("margin-top", height + "px");
            if (this.duration >= 0) {
                $(`#bannerCenter .banner[id='${this.id}'] .closeButton`).on("click", () => {
                    this.hide();
                    this.closeCallback();
                });
            }
        }
        if (this.duration > 0) {
            setTimeout(() => {
                this.hide();
            }, this.duration + 250);
        }
    }
    hide() {
        if (this.type === "notification") {
            $(`#notificationCenter .notif[id='${this.id}']`)
                .css("opacity", 1)
                .animate({
                opacity: 0,
            }, 125, () => {
                $(`#notificationCenter .notif[id='${this.id}']`).animate({
                    height: 0,
                }, 125, () => {
                    $(`#notificationCenter .notif[id='${this.id}']`).remove();
                });
            });
        }
        else if (this.type === "banner") {
            $(`#bannerCenter .banner[id='${this.id}']`).remove();
            const height = $("#bannerCenter").height();
            $("#centerContent").css("padding-top", height + Misc.convertRemToPixels(2) + "px");
            $("#notificationCenter").css("margin-top", height + "px");
        }
    }
}
function add(message, level = 0, duration, customTitle, customIcon, closeCallback) {
    // notificationHistory.push(
    new Notification("notification", message, level, duration, customTitle, customIcon, closeCallback).show();
    // );
}
exports.add = add;
function addBanner(message, level = -1, customIcon = "bullhorn", sticky = false, closeCallback) {
    // notificationHistory.push(
    new Notification("banner", message, level, sticky ? -1 : 0, undefined, customIcon, closeCallback).show();
    // );
}
exports.addBanner = addBanner;


/***/ }),

/***/ "./src/scripts/elements/psa.ts":
/*!*************************************!*\
  !*** ./src/scripts/elements/psa.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.show = void 0;
const ape_1 = __importDefault(__webpack_require__(/*! ../ape */ "./src/scripts/ape/index.ts"));
const misc_1 = __webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts");
const Notifications = __importStar(__webpack_require__(/*! ./notifications */ "./src/scripts/elements/notifications.ts"));
const format_1 = __importDefault(__webpack_require__(/*! date-fns/format */ "./node_modules/date-fns/esm/format/index.js"));
function clearMemory() {
    window.localStorage.setItem("confirmedPSAs", JSON.stringify([]));
}
function getMemory() {
    var _a, _b;
    return (_b = JSON.parse((_a = window.localStorage.getItem("confirmedPSAs")) !== null && _a !== void 0 ? _a : "[]")) !== null && _b !== void 0 ? _b : [];
}
function setMemory(id) {
    const list = getMemory();
    list.push(id);
    window.localStorage.setItem("confirmedPSAs", JSON.stringify(list));
}
function getLatest() {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield ape_1.default.psas.get();
        if (response.message === "Server is down for maintenance") {
            Notifications.addBanner("Server is currently under maintenance. <a target= '_blank' href='https://monkeytype.instatus.com/'>Click here</a> for more info.", -1, "bullhorn", true);
            return [];
        }
        return response.data;
    });
}
function show() {
    return __awaiter(this, void 0, void 0, function* () {
        const latest = yield getLatest();
        if (latest == null || latest.length == 0) {
            clearMemory();
            return;
        }
        const localmemory = getMemory();
        latest.forEach((psa) => {
            var _a;
            if (localmemory.includes(psa._id) && ((_a = psa.sticky) !== null && _a !== void 0 ? _a : false) === false) {
                return;
            }
            if (psa.date) {
                const dateObj = new Date(psa.date);
                const diff = psa.date - Date.now();
                const string = (0, misc_1.secondsToString)(diff / 1000, false, false, "text", false, true);
                psa.message = psa.message.replace("{dateDifference}", string);
                psa.message = psa.message.replace("{dateNoTime}", (0, format_1.default)(dateObj, "dd MMM yyyy"));
                psa.message = psa.message.replace("{date}", (0, format_1.default)(dateObj, "dd MMM yyyy HH:mm"));
            }
            Notifications.addBanner(psa.message, psa.level, "bullhorn", psa.sticky, () => {
                setMemory(psa._id);
            });
        });
    });
}
exports.show = show;


/***/ }),

/***/ "./src/scripts/elements/scroll-to-top.ts":
/*!***********************************************!*\
  !*** ./src/scripts/elements/scroll-to-top.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ActivePage = __importStar(__webpack_require__(/*! ../states/active-page */ "./src/scripts/states/active-page.ts"));
let visible = false;
$(".scrollToTopButton").on("click", () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
});
$(window).scroll(() => {
    const page = ActivePage.get();
    if (page == "test")
        return;
    if (page == "about" || page == "settings" || page == "account") {
        const scroll = window.scrollY;
        if (!visible && scroll > 100) {
            $(".scrollToTopButton").removeClass("invisible");
            visible = true;
        }
        else if (visible && scroll < 100) {
            $(".scrollToTopButton").addClass("invisible");
            visible = false;
        }
    }
});


/***/ }),

/***/ "./src/scripts/elements/theme-colors.ts":
/*!**********************************************!*\
  !*** ./src/scripts/elements/theme-colors.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.update = exports.reset = exports.getAll = exports.get = void 0;
let colors = {
    bg: "#323437",
    main: "#e2b714",
    caret: "#e2b714",
    sub: "#646669",
    text: "#d1d0c5",
    error: "#ca4754",
    errorExtra: "#7e2a33",
    colorfulError: "#ca4754",
    colorfulErrorExtra: "#7e2a33",
};
function get(color) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!colors[color])
            update();
        return colors[color];
    });
}
exports.get = get;
function getAll() {
    return __awaiter(this, void 0, void 0, function* () {
        if (!colors.bg)
            update();
        return colors;
    });
}
exports.getAll = getAll;
function reset() {
    colors = {
        bg: "",
        main: "",
        caret: "",
        sub: "",
        text: "",
        error: "",
        errorExtra: "",
        colorfulError: "",
        colorfulErrorExtra: "",
    };
}
exports.reset = reset;
function update() {
    const st = getComputedStyle(document.body);
    colors.bg = st.getPropertyValue("--bg-color").replace(" ", "");
    colors.main = st.getPropertyValue("--main-color").replace(" ", "");
    colors.caret = st.getPropertyValue("--caret-color").replace(" ", "");
    colors.sub = st.getPropertyValue("--sub-color").replace(" ", "");
    colors.text = st.getPropertyValue("--text-color").replace(" ", "");
    colors.error = st.getPropertyValue("--error-color").replace(" ", "");
    colors.errorExtra = st
        .getPropertyValue("--error-extra-color")
        .replace(" ", "");
    colors.colorfulError = st
        .getPropertyValue("--colorful-error-color")
        .replace(" ", "");
    colors.colorfulErrorExtra = st
        .getPropertyValue("--colorful-error-extra-color")
        .replace(" ", "");
}
exports.update = update;


/***/ }),

/***/ "./src/scripts/elements/version-check.ts":
/*!***********************************************!*\
  !*** ./src/scripts/elements/version-check.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.show = void 0;
const Notifications = __importStar(__webpack_require__(/*! ./notifications */ "./src/scripts/elements/notifications.ts"));
// import * as VersionPopup from "./version-popup";
function setMemory(v) {
    window.localStorage.setItem("lastSeenVersion", v);
}
function getMemory() {
    var _a;
    return (_a = window.localStorage.getItem("lastSeenVersion")) !== null && _a !== void 0 ? _a : "";
}
function show(version) {
    return __awaiter(this, void 0, void 0, function* () {
        const memory = yield getMemory();
        if (memory === "") {
            setMemory(version);
            return;
        }
        if (window.location.hostname === "localhost" ||
            window.location.hostname === "127.0.0.1") {
            caches.keys().then(function (names) {
                for (const name of names)
                    caches.delete(name);
            });
        }
        if (memory === version)
            return;
        caches.keys().then(function (names) {
            for (const name of names)
                caches.delete(name);
        });
        Notifications.addBanner(`Version ${version} has been released. Click the version number in the bottom right to view the changelog.`, 1, "code-branch", false);
        setMemory(version);
    });
}
exports.show = show;


/***/ }),

/***/ "./src/scripts/firebase.ts":
/*!*********************************!*\
  !*** ./src/scripts/firebase.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Analytics = exports.Auth = void 0;
// Import the functions you need from the SDKs you need
const app_1 = __webpack_require__(/*! firebase/app */ "./node_modules/firebase/app/dist/index.esm.js");
const auth_1 = __webpack_require__(/*! firebase/auth */ "./node_modules/firebase/auth/dist/index.esm.js");
const firebase_config_1 = __webpack_require__(/*! ./constants/firebase-config */ "./src/scripts/constants/firebase-config.ts"); // eslint-disable-line require-path-exists/exists
const analytics_1 = __webpack_require__(/*! firebase/analytics */ "./node_modules/firebase/analytics/dist/index.esm.js");
// Initialize Firebase
let app;
try {
    app = (0, app_1.initializeApp)(firebase_config_1.firebaseConfig);
    exports.Auth = (0, auth_1.getAuth)(app);
    exports.Analytics = (0, analytics_1.getAnalytics)(app);
}
catch (e) {
    console.error(e);
    $("body").text("Failed to initialize Firebase. Are you sure you have the correct config in the firebase-config.ts file?");
}


/***/ }),

/***/ "./src/scripts/index.ts":
/*!******************************!*\
  !*** ./src/scripts/index.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// this file should be concatenated at the top of the legacy js files
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(/*! ../styles/index.scss */ "./src/styles/index.scss");
__webpack_require__(/*! ./firebase */ "./src/scripts/firebase.ts");
const DB = __importStar(__webpack_require__(/*! ./db */ "./src/scripts/db.ts"));
const config_1 = __importDefault(__webpack_require__(/*! ./config */ "./src/scripts/config.ts"));
const TestStats = __importStar(__webpack_require__(/*! ./test/test-stats */ "./src/scripts/test/test-stats.ts"));
const Replay = __importStar(__webpack_require__(/*! ./test/replay */ "./src/scripts/test/replay.ts"));
const TestTimer = __importStar(__webpack_require__(/*! ./test/test-timer */ "./src/scripts/test/test-timer.ts"));
const Result = __importStar(__webpack_require__(/*! ./test/result */ "./src/scripts/test/result.ts"));
const TestInput = __importStar(__webpack_require__(/*! ./test/test-input */ "./src/scripts/test/test-input.ts"));
__webpack_require__(/*! ./controllers/account-controller */ "./src/scripts/controllers/account-controller.ts");
const glarses_mode_1 = __webpack_require__(/*! ./states/glarses-mode */ "./src/scripts/states/glarses-mode.ts");
__webpack_require__(/*! ./test/caps-warning */ "./src/scripts/test/caps-warning.ts");
__webpack_require__(/*! ./popups/support-popup */ "./src/scripts/popups/support-popup.ts");
__webpack_require__(/*! ./popups/contact-popup */ "./src/scripts/popups/contact-popup.ts");
__webpack_require__(/*! ./popups/version-popup */ "./src/scripts/popups/version-popup.ts");
__webpack_require__(/*! ./popups/edit-preset-popup */ "./src/scripts/popups/edit-preset-popup.ts");
__webpack_require__(/*! ./popups/simple-popups */ "./src/scripts/popups/simple-popups.ts");
__webpack_require__(/*! ./controllers/input-controller */ "./src/scripts/controllers/input-controller.ts");
__webpack_require__(/*! ./ready */ "./src/scripts/ready.ts");
__webpack_require__(/*! ./ui */ "./src/scripts/ui.ts");
__webpack_require__(/*! ./pages/about */ "./src/scripts/pages/about.ts");
__webpack_require__(/*! ./popups/pb-tables-popup */ "./src/scripts/popups/pb-tables-popup.ts");
__webpack_require__(/*! ./elements/scroll-to-top */ "./src/scripts/elements/scroll-to-top.ts");
__webpack_require__(/*! ./popups/mobile-test-config-popup */ "./src/scripts/popups/mobile-test-config-popup.ts");
__webpack_require__(/*! ./popups/edit-tags-popup */ "./src/scripts/popups/edit-tags-popup.ts");
const Account = __importStar(__webpack_require__(/*! ./pages/account */ "./src/scripts/pages/account.ts"));
const extendedGlobal = __webpack_require__.g;
extendedGlobal.snapshot = DB.getSnapshot;
extendedGlobal.config = config_1.default;
extendedGlobal.toggleFilterDebug = Account.toggleFilterDebug;
extendedGlobal.glarsesMode = glarses_mode_1.enable;
extendedGlobal.stats = TestStats.getStats;
extendedGlobal.replay = Replay.getReplayExport;
extendedGlobal.enableTimerDebug = TestTimer.enableTimerDebug;
extendedGlobal.getTimerStats = TestTimer.getTimerStats;
extendedGlobal.toggleUnsmoothedRaw = Result.toggleUnsmoothedRaw;
extendedGlobal.enableSpacingDebug = TestInput.enableSpacingDebug;


/***/ }),

/***/ "./src/scripts/observables/config-event.ts":
/*!*************************************************!*\
  !*** ./src/scripts/observables/config-event.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dispatch = exports.subscribe = void 0;
const subscribers = [];
function subscribe(fn) {
    subscribers.push(fn);
}
exports.subscribe = subscribe;
function dispatch(key, newValue, nosave, previousValue, fullConfig) {
    subscribers.forEach((fn) => {
        try {
            fn(key, newValue, nosave, previousValue, fullConfig);
        }
        catch (e) {
            console.error("Config event subscriber threw an error");
            console.error(e);
        }
    });
}
exports.dispatch = dispatch;


/***/ }),

/***/ "./src/scripts/observables/page-change-event.ts":
/*!******************************************************!*\
  !*** ./src/scripts/observables/page-change-event.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dispatch = exports.subscribe = void 0;
const subscribers = [];
function subscribe(fn) {
    subscribers.push(fn);
}
exports.subscribe = subscribe;
function dispatch(previousPage, newPage) {
    subscribers.forEach((fn) => {
        try {
            fn(previousPage, newPage);
        }
        catch (e) {
            console.error("Page change event subscriber threw an error");
            console.error(e);
        }
    });
}
exports.dispatch = dispatch;


/***/ }),

/***/ "./src/scripts/observables/reset-requested-event.ts":
/*!**********************************************************!*\
  !*** ./src/scripts/observables/reset-requested-event.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dispatch = exports.subscribe = void 0;
const subscribers = [];
function subscribe(fn) {
    subscribers.push(fn);
}
exports.subscribe = subscribe;
function dispatch() {
    subscribers.forEach((fn) => {
        try {
            fn();
        }
        catch (e) {
            console.error("Reset requested event subscriber threw an error");
            console.error(e);
        }
    });
}
exports.dispatch = dispatch;


/***/ }),

/***/ "./src/scripts/observables/results-shown-event.ts":
/*!********************************************************!*\
  !*** ./src/scripts/observables/results-shown-event.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dispatch = exports.subscribe = void 0;
const subscribers = [];
function subscribe(fn) {
    subscribers.push(fn);
}
exports.subscribe = subscribe;
function dispatch(results) {
    subscribers.forEach((fn) => {
        try {
            fn(results);
        }
        catch (e) {
            console.error("Page change event subscriber threw an error");
            console.error(e);
        }
    });
}
exports.dispatch = dispatch;


/***/ }),

/***/ "./src/scripts/observables/timer-event.ts":
/*!************************************************!*\
  !*** ./src/scripts/observables/timer-event.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dispatch = exports.subscribe = void 0;
const subscribers = [];
function subscribe(fn) {
    subscribers.push(fn);
}
exports.subscribe = subscribe;
function dispatch(key, value, value2) {
    subscribers.forEach((fn) => {
        try {
            fn(key, value, value2);
        }
        catch (e) {
            console.error("Timer event subscriber threw an error");
            console.error(e);
        }
    });
}
exports.dispatch = dispatch;


/***/ }),

/***/ "./src/scripts/observables/word-typed-event.ts":
/*!*****************************************************!*\
  !*** ./src/scripts/observables/word-typed-event.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dispatch = exports.subscribe = void 0;
const subscribers = [];
function subscribe(fn) {
    subscribers.push(fn);
}
exports.subscribe = subscribe;
function dispatch(word, typedCorrectly, burst, currentTestWord) {
    subscribers.forEach((fn) => {
        try {
            fn(word, typedCorrectly, burst, currentTestWord);
        }
        catch (e) {
            console.error("Word Typed event subscriber threw an error");
            console.error(e);
        }
    });
}
exports.dispatch = dispatch;


/***/ }),

/***/ "./src/scripts/pages/about.ts":
/*!************************************!*\
  !*** ./src/scripts/pages/about.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.page = exports.fill = exports.reset = void 0;
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const page_1 = __importDefault(__webpack_require__(/*! ./page */ "./src/scripts/pages/page.ts"));
function reset() {
    $(".pageAbout .contributors").empty();
    $(".pageAbout .supporters").empty();
}
exports.reset = reset;
function fill() {
    return __awaiter(this, void 0, void 0, function* () {
        const supporters = yield Misc.getSupportersList();
        const contributors = yield Misc.getContributorsList();
        supporters.forEach((supporter) => {
            $(".pageAbout .supporters").append(`
      <div>${supporter}</div>
    `);
        });
        contributors.forEach((contributor) => {
            $(".pageAbout .contributors").append(`
      <div>${contributor}</div>
    `);
        });
    });
}
exports.fill = fill;
exports.page = new page_1.default("about", $(".page.pageAbout"), "/about", () => {
    //
}, () => __awaiter(void 0, void 0, void 0, function* () {
    reset();
}), () => {
    fill();
}, () => {
    //
});


/***/ }),

/***/ "./src/scripts/pages/account.ts":
/*!**************************************!*\
  !*** ./src/scripts/pages/account.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.page = exports.update = exports.smoothHistory = exports.reset = exports.toggleFilterDebug = void 0;
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const ResultFilters = __importStar(__webpack_require__(/*! ../account/result-filters */ "./src/scripts/account/result-filters.ts"));
const ThemeColors = __importStar(__webpack_require__(/*! ../elements/theme-colors */ "./src/scripts/elements/theme-colors.ts"));
const ChartController = __importStar(__webpack_require__(/*! ../controllers/chart-controller */ "./src/scripts/controllers/chart-controller.ts"));
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const MiniResultChart = __importStar(__webpack_require__(/*! ../account/mini-result-chart */ "./src/scripts/account/mini-result-chart.ts"));
const AllTimeStats = __importStar(__webpack_require__(/*! ../account/all-time-stats */ "./src/scripts/account/all-time-stats.ts"));
const PbTables = __importStar(__webpack_require__(/*! ../account/pb-tables */ "./src/scripts/account/pb-tables.ts"));
const LoadingPage = __importStar(__webpack_require__(/*! ./loading */ "./src/scripts/pages/loading.ts"));
const Focus = __importStar(__webpack_require__(/*! ../test/focus */ "./src/scripts/test/focus.ts"));
const SignOutButton = __importStar(__webpack_require__(/*! ../account/sign-out-button */ "./src/scripts/account/sign-out-button.ts"));
const TodayTracker = __importStar(__webpack_require__(/*! ../test/today-tracker */ "./src/scripts/test/today-tracker.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const page_1 = __importDefault(__webpack_require__(/*! ./page */ "./src/scripts/pages/page.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const ActivePage = __importStar(__webpack_require__(/*! ../states/active-page */ "./src/scripts/states/active-page.ts"));
const format_1 = __importDefault(__webpack_require__(/*! date-fns/format */ "./node_modules/date-fns/esm/format/index.js"));
let filterDebug = false;
//toggle filterdebug
function toggleFilterDebug() {
    filterDebug = !filterDebug;
    if (filterDebug) {
        console.log("filterDebug is on");
    }
}
exports.toggleFilterDebug = toggleFilterDebug;
let filteredResults = [];
let visibleTableLines = 0;
function loadMoreLines(lineIndex) {
    var _a, _b;
    if (filteredResults == [] || filteredResults.length == 0)
        return;
    let newVisibleLines;
    if (lineIndex && lineIndex > visibleTableLines) {
        newVisibleLines = Math.ceil(lineIndex / 10) * 10;
    }
    else {
        newVisibleLines = visibleTableLines + 10;
    }
    for (let i = visibleTableLines; i < newVisibleLines; i++) {
        const result = filteredResults[i];
        if (!result)
            continue;
        let diff = result.difficulty;
        if (diff == undefined) {
            diff = "normal";
        }
        let raw;
        try {
            raw = config_1.default.alwaysShowCPM
                ? (result.rawWpm * 5).toFixed(2)
                : result.rawWpm.toFixed(2);
            if (raw == undefined) {
                raw = "-";
            }
        }
        catch (e) {
            raw = "-";
        }
        let icons = `<span aria-label="${(_a = result.language) === null || _a === void 0 ? void 0 : _a.replace("_", " ")}" data-balloon-pos="up"><i class="fas fa-fw fa-globe-americas"></i></span>`;
        if (diff === "normal") {
            icons += `<span aria-label="${result.difficulty}" data-balloon-pos="up"><i class="far fa-fw fa-star"></i></span>`;
        }
        else if (diff === "expert") {
            icons += `<span aria-label="${result.difficulty}" data-balloon-pos="up"><i class="fas fa-fw fa-star-half-alt"></i></span>`;
        }
        else if (diff === "master") {
            icons += `<span aria-label="${result.difficulty}" data-balloon-pos="up"><i class="fas fa-fw fa-star"></i></span>`;
        }
        if (result.punctuation) {
            icons += `<span aria-label="punctuation" data-balloon-pos="up" style="font-weight:900">!?</span>`;
        }
        if (result.numbers) {
            icons += `<span aria-label="numbers" data-balloon-pos="up" style="font-weight:900">15</span>`;
        }
        if (result.blindMode) {
            icons += `<span aria-label="blind mode" data-balloon-pos="up"><i class="fas fa-fw fa-eye-slash"></i></span>`;
        }
        if (result.lazyMode) {
            icons += `<span aria-label="lazy mode" data-balloon-pos="up"><i class="fas fa-fw fa-couch"></i></span>`;
        }
        if (result.funbox !== "none" && result.funbox !== undefined) {
            icons += `<span aria-label="${result.funbox.replace(/_/g, " ")}" data-balloon-pos="up"><i class="fas fa-gamepad"></i></span>`;
        }
        if (result.chartData === undefined) {
            icons += `<span class="miniResultChartButton" aria-label="No chart data found" data-balloon-pos="up"><i class="fas fa-chart-line"></i></span>`;
        }
        else if (result.chartData === "toolong") {
            icons += `<span class="miniResultChartButton" aria-label="Chart history is not available for long tests" data-balloon-pos="up"><i class="fas fa-chart-line"></i></span>`;
        }
        else {
            icons += `<span class="miniResultChartButton" aria-label="View graph" data-balloon-pos="up" filteredResultsId="${i}" style="opacity: 1"><i class="fas fa-chart-line"></i></span>`;
        }
        let tagNames = "";
        if (result.tags !== undefined && result.tags.length > 0) {
            result.tags.forEach((tag) => {
                var _a;
                (_a = DB.getSnapshot().tags) === null || _a === void 0 ? void 0 : _a.forEach((snaptag) => {
                    if (tag === snaptag._id) {
                        tagNames += snaptag.name + ", ";
                    }
                });
            });
            tagNames = tagNames.substring(0, tagNames.length - 2);
        }
        let restags;
        if (result.tags === undefined) {
            restags = "[]";
        }
        else {
            restags = JSON.stringify(result.tags);
        }
        let tagIcons = `<span id="resultEditTags" resultId="${result._id}" tags='${restags}' aria-label="no tags" data-balloon-pos="up" style="opacity: .25"><i class="fas fa-fw fa-tag"></i></span>`;
        if (tagNames !== "") {
            if (result.tags !== undefined && result.tags.length > 1) {
                tagIcons = `<span id="resultEditTags" resultId="${result._id}" tags='${restags}' aria-label="${tagNames}" data-balloon-pos="up"><i class="fas fa-fw fa-tags"></i></span>`;
            }
            else {
                tagIcons = `<span id="resultEditTags" resultId="${result._id}" tags='${restags}' aria-label="${tagNames}" data-balloon-pos="up"><i class="fas fa-fw fa-tag"></i></span>`;
            }
        }
        let consistency = "-";
        if (result.consistency) {
            consistency = result.consistency.toFixed(2) + "%";
        }
        let pb = (_b = result.isPb) === null || _b === void 0 ? void 0 : _b.toString();
        if (pb) {
            pb = '<i class="fas fa-fw fa-crown"></i>';
        }
        else {
            pb = "";
        }
        let charStats = "-";
        if (result.charStats) {
            charStats = result.charStats.join("/");
        }
        else {
            charStats = result.correctChars + "/" + result.incorrectChars + "/-/-";
        }
        const date = new Date(result.timestamp);
        $(".pageAccount .history table tbody").append(`
    <tr class="resultRow" id="result-${i}">
    <td>${pb}</td>
    <td>${(config_1.default.alwaysShowCPM ? result.wpm * 5 : result.wpm).toFixed(2)}</td>
    <td>${raw}</td>
    <td>${result.acc.toFixed(2)}%</td>
    <td>${consistency}</td>
    <td>${charStats}</td>
    <td>${result.mode} ${result.mode2}</td>
    <td class="infoIcons">${icons}</td>
    <td>${tagIcons}</td>
    <td>${(0, format_1.default)(date, "dd MMM yyyy")}<br>
    ${(0, format_1.default)(date, "HH:mm")}
    </td>
    </tr>`);
    }
    visibleTableLines = newVisibleLines;
    if (visibleTableLines >= filteredResults.length) {
        $(".pageAccount .loadMoreButton").addClass("hidden");
    }
    else {
        $(".pageAccount .loadMoreButton").removeClass("hidden");
    }
}
function reset() {
    $(".pageAccount .history table tbody").empty();
    ChartController.accountActivity.data.datasets[0].data = [];
    ChartController.accountActivity.data.datasets[1].data = [];
    ChartController.accountHistory.data.datasets[0].data = [];
    ChartController.accountHistory.data.datasets[1].data = [];
    ChartController.accountActivity.updateColors();
    ChartController.accountHistory.updateColors();
}
exports.reset = reset;
let totalSecondsFiltered = 0;
let chartData = [];
let accChartData = [];
function smoothHistory(factor) {
    const smoothedWpmData = Misc.smooth(chartData.map((a) => a.y), factor);
    const smoothedAccData = Misc.smooth(accChartData.map((a) => a.y), factor);
    const chartData2 = chartData.map((a, i) => {
        const ret = Object.assign({}, a);
        ret.y = smoothedWpmData[i];
        return ret;
    });
    const accChartData2 = accChartData.map((a, i) => {
        const ret = Object.assign({}, a);
        ret.y = smoothedAccData[i];
        return ret;
    });
    ChartController.accountHistory.data.datasets[0].data = chartData2;
    ChartController.accountHistory.data.datasets[1].data = accChartData2;
    if (chartData2.length || accChartData2.length) {
        ChartController.accountHistory.update();
    }
}
exports.smoothHistory = smoothHistory;
function applyHistorySmoothing() {
    const smoothing = $(".pageAccount .content .below .smoothing input").val();
    $(".pageAccount .content .below .smoothing .value").text(smoothing);
    smoothHistory(parseInt(smoothing));
}
function update() {
    function cont() {
        var _a;
        LoadingPage.updateText("Displaying stats...");
        LoadingPage.updateBar(100);
        console.log("updating account page");
        ThemeColors.update();
        ChartController.accountHistory.updateColors();
        ChartController.accountActivity.updateColors();
        AllTimeStats.update();
        PbTables.update();
        chartData = [];
        accChartData = [];
        const wpmChartData = [];
        visibleTableLines = 0;
        let topWpm = 0;
        let topMode = "";
        let testRestarts = 0;
        let totalWpm = 0;
        let testCount = 0;
        let last10 = 0;
        let wpmLast10total = 0;
        let topAcc = 0;
        let totalAcc = 0;
        let totalAcc10 = 0;
        const rawWpm = {
            total: 0,
            count: 0,
            last10Total: 0,
            last10Count: 0,
            max: 0,
        };
        // let totalSeconds = 0;
        totalSecondsFiltered = 0;
        let topCons = 0;
        let totalCons = 0;
        let totalCons10 = 0;
        let consCount = 0;
        const activityChartData = {};
        filteredResults = [];
        $(".pageAccount .history table tbody").empty();
        (_a = DB.getSnapshot().results) === null || _a === void 0 ? void 0 : _a.forEach((result) => {
            // totalSeconds += tt;
            var _a, _b, _c, _d, _e;
            //apply filters
            try {
                let resdiff = result.difficulty;
                if (resdiff == undefined) {
                    resdiff = "normal";
                }
                if (!ResultFilters.getFilter("difficulty", resdiff)) {
                    if (filterDebug) {
                        console.log(`skipping result due to difficulty filter`, result);
                    }
                    return;
                }
                if (!ResultFilters.getFilter("mode", result.mode)) {
                    if (filterDebug) {
                        console.log(`skipping result due to mode filter`, result);
                    }
                    return;
                }
                if (result.mode == "time") {
                    let timefilter = "custom";
                    if ([15, 30, 60, 120].includes(parseInt(result.mode2))) {
                        timefilter = result.mode2;
                    }
                    if (!ResultFilters.getFilter("time", timefilter)) {
                        if (filterDebug) {
                            console.log(`skipping result due to time filter`, result);
                        }
                        return;
                    }
                }
                else if (result.mode == "words") {
                    let wordfilter = "custom";
                    if ([10, 25, 50, 100, 200].includes(parseInt(result.mode2))) {
                        wordfilter = result.mode2;
                    }
                    if (!ResultFilters.getFilter("words", wordfilter)) {
                        if (filterDebug) {
                            console.log(`skipping result due to word filter`, result);
                        }
                        return;
                    }
                }
                if (result.quoteLength != null) {
                    let filter = undefined;
                    if (result.quoteLength === 0) {
                        filter = "short";
                    }
                    else if (result.quoteLength === 1) {
                        filter = "medium";
                    }
                    else if (result.quoteLength === 2) {
                        filter = "long";
                    }
                    else if (result.quoteLength === 3) {
                        filter = "thicc";
                    }
                    if (filter !== undefined &&
                        !ResultFilters.getFilter("quoteLength", filter)) {
                        if (filterDebug) {
                            console.log(`skipping result due to quoteLength filter`, result);
                        }
                        return;
                    }
                }
                let langFilter = ResultFilters.getFilter("language", (_a = result.language) !== null && _a !== void 0 ? _a : "english");
                if (result.language === "english_expanded" &&
                    ResultFilters.getFilter("language", "english_1k")) {
                    langFilter = true;
                }
                if (!langFilter) {
                    if (filterDebug) {
                        console.log(`skipping result due to language filter`, result);
                    }
                    return;
                }
                let puncfilter = "off";
                if (result.punctuation) {
                    puncfilter = "on";
                }
                if (!ResultFilters.getFilter("punctuation", puncfilter)) {
                    if (filterDebug) {
                        console.log(`skipping result due to punctuation filter`, result);
                    }
                    return;
                }
                let numfilter = "off";
                if (result.numbers) {
                    numfilter = "on";
                }
                if (!ResultFilters.getFilter("numbers", numfilter)) {
                    if (filterDebug) {
                        console.log(`skipping result due to numbers filter`, result);
                    }
                    return;
                }
                if (result.funbox === "none" || result.funbox === undefined) {
                    if (!ResultFilters.getFilter("funbox", "none")) {
                        if (filterDebug) {
                            console.log(`skipping result due to funbox filter`, result);
                        }
                        return;
                    }
                }
                else {
                    if (!ResultFilters.getFilter("funbox", result.funbox)) {
                        if (filterDebug) {
                            console.log(`skipping result due to funbox filter`, result);
                        }
                        return;
                    }
                }
                let tagHide = true;
                if (result.tags === undefined || result.tags.length === 0) {
                    //no tags, show when no tag is enabled
                    if (((_b = DB.getSnapshot().tags) === null || _b === void 0 ? void 0 : _b.length) || 0 > 0) {
                        if (ResultFilters.getFilter("tags", "none"))
                            tagHide = false;
                    }
                    else {
                        tagHide = false;
                    }
                }
                else {
                    //tags exist
                    const validTags = (_c = DB.getSnapshot().tags) === null || _c === void 0 ? void 0 : _c.map((t) => t._id);
                    if (validTags === undefined)
                        return;
                    result.tags.forEach((tag) => {
                        //check if i even need to check tags anymore
                        if (!tagHide)
                            return;
                        //check if tag is valid
                        if (validTags === null || validTags === void 0 ? void 0 : validTags.includes(tag)) {
                            //tag valid, check if filter is on
                            if (ResultFilters.getFilter("tags", tag))
                                tagHide = false;
                        }
                        else {
                            //tag not found in valid tags, meaning probably deleted
                            if (ResultFilters.getFilter("tags", "none"))
                                tagHide = false;
                        }
                    });
                }
                if (tagHide) {
                    if (filterDebug) {
                        console.log(`skipping result due to tag filter`, result);
                    }
                    return;
                }
                const timeSinceTest = Math.abs(result.timestamp - Date.now()) / 1000;
                let datehide = true;
                if (ResultFilters.getFilter("date", "all") ||
                    (ResultFilters.getFilter("date", "last_day") &&
                        timeSinceTest <= 86400) ||
                    (ResultFilters.getFilter("date", "last_week") &&
                        timeSinceTest <= 604800) ||
                    (ResultFilters.getFilter("date", "last_month") &&
                        timeSinceTest <= 2592000) ||
                    (ResultFilters.getFilter("date", "last_3months") &&
                        timeSinceTest <= 7776000)) {
                    datehide = false;
                }
                if (datehide) {
                    if (filterDebug) {
                        console.log(`skipping result due to date filter`, result);
                    }
                    return;
                }
                filteredResults.push(result);
            }
            catch (e) {
                Notifications.add("Something went wrong when filtering. Resetting filters.", 0);
                console.log(result);
                console.error(e);
                ResultFilters.reset();
                ResultFilters.updateActive();
                update();
            }
            //filters done
            //=======================================
            const resultDate = new Date(result.timestamp);
            resultDate.setSeconds(0);
            resultDate.setMinutes(0);
            resultDate.setHours(0);
            resultDate.setMilliseconds(0);
            const resultTimestamp = resultDate.getTime();
            if (Object.keys(activityChartData).includes(String(resultTimestamp))) {
                activityChartData[resultTimestamp].amount++;
                activityChartData[resultTimestamp].time +=
                    result.testDuration +
                        result.incompleteTestSeconds -
                        ((_d = result.afkDuration) !== null && _d !== void 0 ? _d : 0);
                activityChartData[resultTimestamp].totalWpm += result.wpm;
            }
            else {
                activityChartData[resultTimestamp] = {
                    amount: 1,
                    time: result.testDuration +
                        result.incompleteTestSeconds -
                        ((_e = result.afkDuration) !== null && _e !== void 0 ? _e : 0),
                    totalWpm: result.wpm,
                };
            }
            let tt = 0;
            if (result.testDuration == undefined &&
                result.mode2 !== "custom" &&
                result.mode2 !== "zen") {
                //test finished before testDuration field was introduced - estimate
                if (result.mode == "time") {
                    tt = result.mode2;
                }
                else if (result.mode == "words") {
                    tt = (result.mode2 / result.wpm) * 60;
                }
            }
            else {
                tt = parseFloat(result.testDuration); //legacy results could have a string here
            }
            if (result.incompleteTestSeconds != undefined) {
                tt += result.incompleteTestSeconds;
            }
            else if (result.restartCount != undefined &&
                result.restartCount > 0) {
                tt += (tt / 4) * result.restartCount;
            }
            // if (result.incompleteTestSeconds != undefined) {
            //   tt += result.incompleteTestSeconds;
            // } else if (result.restartCount != undefined && result.restartCount > 0) {
            //   tt += (tt / 4) * result.restartCount;
            // }
            totalSecondsFiltered += tt;
            if (last10 < 10) {
                last10++;
                wpmLast10total += result.wpm;
                totalAcc10 += result.acc;
                result.consistency !== undefined
                    ? (totalCons10 += result.consistency)
                    : 0;
            }
            testCount++;
            if (result.consistency !== undefined) {
                consCount++;
                totalCons += result.consistency;
                if (result.consistency > topCons) {
                    topCons = result.consistency;
                }
            }
            if (result.rawWpm != null) {
                if (rawWpm.last10Count < 10) {
                    rawWpm.last10Count++;
                    rawWpm.last10Total += result.rawWpm;
                }
                rawWpm.total += result.rawWpm;
                rawWpm.count++;
                if (result.rawWpm > rawWpm.max) {
                    rawWpm.max = result.rawWpm;
                }
            }
            if (result.acc > topAcc) {
                topAcc = result.acc;
            }
            totalAcc += result.acc;
            if (result.restartCount != undefined) {
                testRestarts += result.restartCount;
            }
            chartData.push({
                x: result.timestamp,
                y: config_1.default.alwaysShowCPM ? Misc.roundTo2(result.wpm * 5) : result.wpm,
                wpm: config_1.default.alwaysShowCPM
                    ? Misc.roundTo2(result.wpm * 5)
                    : result.wpm,
                acc: result.acc,
                mode: result.mode,
                mode2: result.mode2,
                punctuation: result.punctuation,
                language: result.language,
                timestamp: result.timestamp,
                difficulty: result.difficulty,
                raw: config_1.default.alwaysShowCPM
                    ? Misc.roundTo2(result.rawWpm * 5)
                    : result.rawWpm,
            });
            wpmChartData.push(result.wpm);
            accChartData.push({
                x: result.timestamp,
                y: 100 - result.acc,
                errorRate: 100 - result.acc,
            });
            if (result.wpm > topWpm) {
                const puncsctring = result.punctuation ? ",<br>with punctuation" : "";
                const numbsctring = result.numbers
                    ? ",<br> " + (result.punctuation ? "&" : "") + "with numbers"
                    : "";
                topWpm = result.wpm;
                if (result.mode == "custom")
                    topMode = result.mode;
                else {
                    topMode =
                        result.mode + " " + result.mode2 + puncsctring + numbsctring;
                }
            }
            totalWpm += result.wpm;
        });
        if (config_1.default.alwaysShowCPM) {
            $(".pageAccount .group.history table thead tr td:nth-child(2)").text("cpm");
        }
        else {
            $(".pageAccount .group.history table thead tr td:nth-child(2)").text("wpm");
        }
        loadMoreLines();
        ////////
        const activityChartData_amount = [];
        const activityChartData_time = [];
        const activityChartData_avgWpm = [];
        // let lastTimestamp = 0;
        Object.keys(activityChartData).forEach((date) => {
            const dateInt = parseInt(date);
            activityChartData_amount.push({
                x: dateInt,
                y: activityChartData[dateInt].amount,
            });
            activityChartData_time.push({
                x: dateInt,
                y: Misc.roundTo2(activityChartData[dateInt].time),
                amount: activityChartData[dateInt].amount,
            });
            activityChartData_avgWpm.push({
                x: dateInt,
                y: Misc.roundTo2((config_1.default.alwaysShowCPM
                    ? activityChartData[dateInt].totalWpm * 5
                    : activityChartData[dateInt].totalWpm) /
                    activityChartData[dateInt].amount),
            });
            // lastTimestamp = date;
        });
        const accountActivityScaleOptions = ChartController.accountActivity.options.scales;
        if (config_1.default.alwaysShowCPM) {
            accountActivityScaleOptions["avgWpm"].title.text = "Average Cpm";
        }
        else {
            accountActivityScaleOptions["avgWpm"].title.text = "Average Wpm";
        }
        ChartController.accountActivity.data.datasets[0].data =
            activityChartData_time;
        ChartController.accountActivity.data.datasets[1].data =
            activityChartData_avgWpm;
        const accountHistoryScaleOptions = ChartController.accountHistory.options.scales;
        if (config_1.default.alwaysShowCPM) {
            accountHistoryScaleOptions["wpm"].title.text = "Characters per Minute";
        }
        else {
            accountHistoryScaleOptions["wpm"].title.text = "Words per Minute";
        }
        ChartController.accountHistory.data.datasets[0].data = chartData;
        ChartController.accountHistory.data.datasets[1].data = accChartData;
        const wpms = chartData.map((r) => r.y);
        const minWpmChartVal = Math.min(...wpms);
        const maxWpmChartVal = Math.max(...wpms);
        // let accuracies = accChartData.map((r) => r.y);
        accountHistoryScaleOptions["wpm"].max =
            Math.floor(maxWpmChartVal) + (10 - (Math.floor(maxWpmChartVal) % 10));
        if (!config_1.default.startGraphsAtZero) {
            accountHistoryScaleOptions["wpm"].min = Math.floor(minWpmChartVal);
        }
        else {
            accountHistoryScaleOptions["wpm"].min = 0;
        }
        if (chartData == [] || chartData.length == 0) {
            $(".pageAccount .group.noDataError").removeClass("hidden");
            $(".pageAccount .group.chart").addClass("hidden");
            $(".pageAccount .group.dailyActivityChart").addClass("hidden");
            $(".pageAccount .group.history").addClass("hidden");
            $(".pageAccount .triplegroup.stats").addClass("hidden");
        }
        else {
            $(".pageAccount .group.noDataError").addClass("hidden");
            $(".pageAccount .group.chart").removeClass("hidden");
            $(".pageAccount .group.dailyActivityChart").removeClass("hidden");
            $(".pageAccount .group.history").removeClass("hidden");
            $(".pageAccount .triplegroup.stats").removeClass("hidden");
        }
        $(".pageAccount .timeTotalFiltered .val").text(Misc.secondsToString(Math.round(totalSecondsFiltered), true, true));
        if (config_1.default.alwaysShowCPM) {
            $(".pageAccount .highestWpm .title").text("highest cpm");
            $(".pageAccount .highestWpm .val").text(Misc.roundTo2(topWpm * 5));
        }
        else {
            $(".pageAccount .highestWpm .title").text("highest wpm");
            $(".pageAccount .highestWpm .val").text(Misc.roundTo2(topWpm));
        }
        if (config_1.default.alwaysShowCPM) {
            $(".pageAccount .averageWpm .title").text("average cpm");
            $(".pageAccount .averageWpm .val").text(Math.round((totalWpm * 5) / testCount));
        }
        else {
            $(".pageAccount .averageWpm .title").text("average wpm");
            $(".pageAccount .averageWpm .val").text(Math.round(totalWpm / testCount));
        }
        if (config_1.default.alwaysShowCPM) {
            $(".pageAccount .averageWpm10 .title").text("average cpm (last 10 tests)");
            $(".pageAccount .averageWpm10 .val").text(Math.round((wpmLast10total * 5) / last10));
        }
        else {
            $(".pageAccount .averageWpm10 .title").text("average wpm (last 10 tests)");
            $(".pageAccount .averageWpm10 .val").text(Math.round(wpmLast10total / last10));
        }
        if (config_1.default.alwaysShowCPM) {
            $(".pageAccount .highestRaw .title").text("highest raw cpm");
            $(".pageAccount .highestRaw .val").text(Misc.roundTo2(rawWpm.max * 5));
        }
        else {
            $(".pageAccount .highestRaw .title").text("highest raw wpm");
            $(".pageAccount .highestRaw .val").text(Misc.roundTo2(rawWpm.max));
        }
        if (config_1.default.alwaysShowCPM) {
            $(".pageAccount .averageRaw .title").text("average raw cpm");
            $(".pageAccount .averageRaw .val").text(Math.round((rawWpm.total * 5) / rawWpm.count));
        }
        else {
            $(".pageAccount .averageRaw .title").text("average raw wpm");
            $(".pageAccount .averageRaw .val").text(Math.round(rawWpm.total / rawWpm.count));
        }
        if (config_1.default.alwaysShowCPM) {
            $(".pageAccount .averageRaw10 .title").text("average raw cpm (last 10 tests)");
            $(".pageAccount .averageRaw10 .val").text(Math.round((rawWpm.last10Total * 5) / rawWpm.last10Count));
        }
        else {
            $(".pageAccount .averageRaw10 .title").text("average raw wpm (last 10 tests)");
            $(".pageAccount .averageRaw10 .val").text(Math.round(rawWpm.last10Total / rawWpm.last10Count));
        }
        $(".pageAccount .highestWpm .mode").html(topMode);
        $(".pageAccount .testsTaken .val").text(testCount);
        $(".pageAccount .highestAcc .val").text(topAcc + "%");
        $(".pageAccount .avgAcc .val").text(Math.round(totalAcc / testCount) + "%");
        $(".pageAccount .avgAcc10 .val").text(Math.round(totalAcc10 / last10) + "%");
        if (totalCons == 0 || totalCons == undefined) {
            $(".pageAccount .avgCons .val").text("-");
            $(".pageAccount .avgCons10 .val").text("-");
        }
        else {
            $(".pageAccount .highestCons .val").text(topCons + "%");
            $(".pageAccount .avgCons .val").text(Math.round(totalCons / consCount) + "%");
            $(".pageAccount .avgCons10 .val").text(Math.round(totalCons10 / Math.min(last10, consCount)) + "%");
        }
        $(".pageAccount .testsStarted .val").text(`${testCount + testRestarts}`);
        $(".pageAccount .testsCompleted .val").text(`${testCount}(${Math.floor((testCount / (testCount + testRestarts)) * 100)}%)`);
        $(".pageAccount .testsCompleted .avgres").text(`
      ${(testRestarts / testCount).toFixed(1)} restarts per completed test
    `);
        const wpmPoints = filteredResults.map((r) => r.wpm).reverse();
        const trend = Misc.findLineByLeastSquares(wpmPoints);
        const wpmChange = trend[1][1] - trend[0][1];
        const wpmChangePerHour = wpmChange * (3600 / totalSecondsFiltered);
        const plus = wpmChangePerHour > 0 ? "+" : "";
        $(".pageAccount .group.chart .below .text").text(`Speed change per hour spent typing: ${plus +
            Misc.roundTo2(config_1.default.alwaysShowCPM ? wpmChangePerHour * 5 : wpmChangePerHour)} ${config_1.default.alwaysShowCPM ? "cpm" : "wpm"}.`);
        applyHistorySmoothing();
        ChartController.accountActivity.updateColors();
        LoadingPage.updateBar(100, true);
        setTimeout(() => {
            if (ActivePage.get() == "account")
                SignOutButton.show();
        }, 125);
        Focus.set(false);
        Misc.swapElements($(".pageAccount .preloader"), $(".pageAccount .content"), 250);
    }
    if (DB.getSnapshot() === null) {
        Notifications.add(`Missing account data. Please refresh.`, -1);
        $(".pageAccount .preloader").html("Missing account data. Please refresh.");
    }
    else if (DB.getSnapshot().results === undefined) {
        LoadingPage.updateBar(45, true);
        DB.getUserResults().then((d) => {
            TodayTracker.addAllFromToday();
            if (d) {
                ResultFilters.updateActive();
                update();
            }
        });
    }
    else {
        console.log("using db snap");
        try {
            cont();
        }
        catch (e) {
            console.error(e);
            Notifications.add(`Something went wrong: ${e}`, -1);
        }
    }
}
exports.update = update;
function sortAndRefreshHistory(keyString, headerClass, forceDescending = null) {
    // Removes styling from previous sorting requests:
    $("td").removeClass("header-sorted");
    $("td").children("i").remove();
    $(headerClass).addClass("header-sorted");
    if (filteredResults.length < 2)
        return;
    const key = keyString;
    // This allows to reverse the sorting order when clicking multiple times on the table header
    let descending = true;
    if (forceDescending !== null) {
        if (forceDescending == true) {
            $(headerClass).append('<i class="fas fa-sort-down" aria-hidden="true"></i>');
        }
        else {
            descending = false;
            $(headerClass).append('<i class="fas fa-sort-up" aria-hidden="true"></i>');
        }
    }
    else if (parseInt(filteredResults[0][key]) <=
        parseInt(filteredResults[filteredResults.length - 1][key])) {
        descending = true;
        $(headerClass).append('<i class="fas fa-sort-down" aria-hidden="true"></i>');
    }
    else {
        descending = false;
        $(headerClass).append('<i class="fas fa-sort-up", aria-hidden="true"></i>');
    }
    const temp = [];
    const parsedIndexes = [];
    while (temp.length < filteredResults.length) {
        let lowest = Number.MAX_VALUE;
        let highest = -1;
        let idx = -1;
        for (let i = 0; i < filteredResults.length; i++) {
            //find the lowest wpm with index not already parsed
            if (!descending) {
                if (filteredResults[i][key] <= lowest &&
                    !parsedIndexes.includes(i)) {
                    lowest = filteredResults[i][key];
                    idx = i;
                }
            }
            else {
                if (filteredResults[i][key] >= highest &&
                    !parsedIndexes.includes(i)) {
                    highest = filteredResults[i][key];
                    idx = i;
                }
            }
        }
        temp.push(filteredResults[idx]);
        parsedIndexes.push(idx);
    }
    filteredResults = temp;
    $(".pageAccount .history table tbody").empty();
    visibleTableLines = 0;
    loadMoreLines();
}
$(".pageAccount .toggleAccuracyOnChart").on("click", () => {
    UpdateConfig.setChartAccuracy(!config_1.default.chartAccuracy);
});
$(".pageAccount .toggleChartStyle").on("click", () => {
    if (config_1.default.chartStyle == "line") {
        UpdateConfig.setChartStyle("scatter");
    }
    else {
        UpdateConfig.setChartStyle("line");
    }
});
$(".pageAccount .loadMoreButton").on("click", () => {
    loadMoreLines();
});
$(".pageAccount #accountHistoryChart").on("click", () => {
    var _a, _b, _c;
    const index = ChartController.accountHistoryActiveIndex;
    loadMoreLines(index);
    if (!window)
        return;
    const windowHeight = (_a = $(window).height()) !== null && _a !== void 0 ? _a : 0;
    const offset = (_c = (_b = $(`#result-${index}`).offset()) === null || _b === void 0 ? void 0 : _b.top) !== null && _c !== void 0 ? _c : 0;
    const scrollTo = offset - windowHeight / 2;
    $([document.documentElement, document.body]).animate({
        scrollTop: scrollTo,
    }, 500);
    $(".resultRow").removeClass("active");
    $(`#result-${index}`).addClass("active");
});
$(document).on("click", ".pageAccount .miniResultChartButton", (event) => {
    var _a;
    console.log("updating");
    const filteredId = $(event.currentTarget).attr("filteredResultsId");
    if (filteredId === undefined)
        return;
    MiniResultChart.updateData(filteredResults[parseInt(filteredId)].chartData);
    MiniResultChart.show();
    MiniResultChart.updatePosition(event.pageX - ((_a = $(".pageAccount .miniResultChartWrapper").outerWidth()) !== null && _a !== void 0 ? _a : 0), event.pageY + 30);
});
$(document).on("click", ".history-wpm-header", () => {
    sortAndRefreshHistory("wpm", ".history-wpm-header");
});
$(document).on("click", ".history-raw-header", () => {
    sortAndRefreshHistory("rawWpm", ".history-raw-header");
});
$(document).on("click", ".history-acc-header", () => {
    sortAndRefreshHistory("acc", ".history-acc-header");
});
$(document).on("click", ".history-correct-chars-header", () => {
    sortAndRefreshHistory("correctChars", ".history-correct-chars-header");
});
$(document).on("click", ".history-incorrect-chars-header", () => {
    sortAndRefreshHistory("incorrectChars", ".history-incorrect-chars-header");
});
$(document).on("click", ".history-consistency-header", () => {
    sortAndRefreshHistory("consistency", ".history-consistency-header");
});
$(document).on("click", ".history-date-header", () => {
    sortAndRefreshHistory("timestamp", ".history-date-header");
});
// Resets sorting to by date' when applying filers (normal or advanced)
$(document).on("click", ".buttonsAndTitle .buttons .button", () => {
    // We want to 'force' descending sort:
    sortAndRefreshHistory("timestamp", ".history-date-header", true);
});
$(".pageAccount .topFilters .button, .pageAccount .filterButtons .button ").click(() => {
    setTimeout(() => {
        update();
    }, 0);
});
$(".pageAccount .content .below .smoothing input").on("input", () => {
    applyHistorySmoothing();
});
$(".pageAccount .content .group.aboveHistory .exportCSV").on("click", () => {
    Misc.downloadResultsCSV(filteredResults);
});
exports.page = new page_1.default("account", $(".page.pageAccount"), "/account", () => {
    SignOutButton.hide();
}, () => __awaiter(void 0, void 0, void 0, function* () {
    reset();
}), () => {
    update();
    // SignOutButton.show();
}, () => {
    //
});


/***/ }),

/***/ "./src/scripts/pages/loading.ts":
/*!**************************************!*\
  !*** ./src/scripts/pages/loading.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.page = exports.showBar = exports.updateText = exports.updateBar = void 0;
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const page_1 = __importDefault(__webpack_require__(/*! ./page */ "./src/scripts/pages/page.ts"));
function updateBar(percentage, fast) {
    const speed = fast ? 100 : 1000;
    $(".pageLoading .fill, .pageAccount .fill")
        .stop(true, true)
        .animate({
        width: percentage + "%",
    }, speed);
}
exports.updateBar = updateBar;
function updateText(text) {
    $(".pageLoading .text, .pageAccount .text").text(text);
}
exports.updateText = updateText;
function showBar() {
    return new Promise((resolve) => {
        Misc.swapElements($(".pageLoading .icon"), $(".pageLoading .barWrapper"), 125, () => {
            resolve();
        });
        Misc.swapElements($(".pageAccount .icon"), $(".pageAccount .barWrapper"), 125, () => {
            resolve();
        });
    });
}
exports.showBar = showBar;
exports.page = new page_1.default("loading", $(".page.pageLoading"), "/", () => __awaiter(void 0, void 0, void 0, function* () {
    //
}), () => __awaiter(void 0, void 0, void 0, function* () {
    //
}), () => {
    //
}, () => {
    //
});


/***/ }),

/***/ "./src/scripts/pages/login.ts":
/*!************************************!*\
  !*** ./src/scripts/pages/login.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.page = void 0;
const page_1 = __importDefault(__webpack_require__(/*! ./page */ "./src/scripts/pages/page.ts"));
exports.page = new page_1.default("login", $(".page.pageLogin"), "/login", () => {
    //
}, () => {
    //
}, () => {
    //
}, () => {
    //
});


/***/ }),

/***/ "./src/scripts/pages/page.ts":
/*!***********************************!*\
  !*** ./src/scripts/pages/page.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
class Page {
    constructor(name, element, pathname, beforeHide, afterHide, beforeShow, afterShow) {
        this.name = name;
        this.element = element;
        this.pathname = pathname;
        this.beforeHide = beforeHide;
        this.afterHide = afterHide;
        this.beforeShow = beforeShow;
        this.afterShow = afterShow;
    }
}
exports["default"] = Page;


/***/ }),

/***/ "./src/scripts/pages/settings.ts":
/*!***************************************!*\
  !*** ./src/scripts/pages/settings.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.page = exports.setEventDisabled = exports.update = exports.showAccountSection = exports.updateAuthSections = exports.updateDiscordSection = exports.hideAccountSection = exports.fillSettingsPage = exports.reset = exports.groups = void 0;
const settings_group_1 = __importDefault(__webpack_require__(/*! ../settings/settings-group */ "./src/scripts/settings/settings-group.ts"));
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const Sound = __importStar(__webpack_require__(/*! ../controllers/sound-controller */ "./src/scripts/controllers/sound-controller.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const Funbox = __importStar(__webpack_require__(/*! ../test/funbox */ "./src/scripts/test/funbox.ts"));
const TagController = __importStar(__webpack_require__(/*! ../controllers/tag-controller */ "./src/scripts/controllers/tag-controller.ts"));
const PresetController = __importStar(__webpack_require__(/*! ../controllers/preset-controller */ "./src/scripts/controllers/preset-controller.ts"));
const ThemePicker = __importStar(__webpack_require__(/*! ../settings/theme-picker */ "./src/scripts/settings/theme-picker.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const ImportExportSettingsPopup = __importStar(__webpack_require__(/*! ../popups/import-export-settings-popup */ "./src/scripts/popups/import-export-settings-popup.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const ActivePage = __importStar(__webpack_require__(/*! ../states/active-page */ "./src/scripts/states/active-page.ts"));
const ApeKeysPopup = __importStar(__webpack_require__(/*! ../popups/ape-keys-popup */ "./src/scripts/popups/ape-keys-popup.ts"));
const page_1 = __importDefault(__webpack_require__(/*! ./page */ "./src/scripts/pages/page.ts"));
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
exports.groups = {};
function initGroups() {
    return __awaiter(this, void 0, void 0, function* () {
        yield UpdateConfig.loadPromise;
        exports.groups.smoothCaret = new settings_group_1.default("smoothCaret", UpdateConfig.setSmoothCaret, "button");
        exports.groups.difficulty = new settings_group_1.default("difficulty", UpdateConfig.setDifficulty, "button");
        exports.groups.quickTab = new settings_group_1.default("quickTab", UpdateConfig.setQuickTabMode, "button");
        exports.groups.showLiveWpm = new settings_group_1.default("showLiveWpm", UpdateConfig.setShowLiveWpm, "button", () => {
            exports.groups["keymapMode"].updateInput();
        });
        exports.groups.showLiveAcc = new settings_group_1.default("showLiveAcc", UpdateConfig.setShowLiveAcc, "button");
        exports.groups.showLiveBurst = new settings_group_1.default("showLiveBurst", UpdateConfig.setShowLiveBurst, "button");
        exports.groups.showTimerProgress = new settings_group_1.default("showTimerProgress", UpdateConfig.setShowTimerProgress, "button");
        exports.groups.showAverage = new settings_group_1.default("showAverage", UpdateConfig.setShowAverage, "button");
        exports.groups.keymapMode = new settings_group_1.default("keymapMode", UpdateConfig.setKeymapMode, "button", () => {
            exports.groups["showLiveWpm"].updateInput();
        }, () => {
            if (config_1.default.keymapMode === "off") {
                $(".pageSettings .section.keymapStyle").addClass("hidden");
                $(".pageSettings .section.keymapLayout").addClass("hidden");
                $(".pageSettings .section.keymapLegendStyle").addClass("hidden");
            }
            else {
                $(".pageSettings .section.keymapStyle").removeClass("hidden");
                $(".pageSettings .section.keymapLayout").removeClass("hidden");
                $(".pageSettings .section.keymapLegendStyle").removeClass("hidden");
            }
        });
        exports.groups.keymapMatrix = new settings_group_1.default("keymapStyle", UpdateConfig.setKeymapStyle, "button");
        exports.groups.keymapLayout = new settings_group_1.default("keymapLayout", UpdateConfig.setKeymapLayout, "select");
        exports.groups.keymapLegendStyle = new settings_group_1.default("keymapLegendStyle", UpdateConfig.setKeymapLegendStyle, "button");
        exports.groups.showKeyTips = new settings_group_1.default("showKeyTips", UpdateConfig.setKeyTips, "button", undefined, () => {
            if (config_1.default.showKeyTips) {
                $(".pageSettings .tip").removeClass("hidden");
            }
            else {
                $(".pageSettings .tip").addClass("hidden");
            }
        });
        exports.groups.freedomMode = new settings_group_1.default("freedomMode", UpdateConfig.setFreedomMode, "button", () => {
            exports.groups["confidenceMode"].updateInput();
        });
        exports.groups.strictSpace = new settings_group_1.default("strictSpace", UpdateConfig.setStrictSpace, "button");
        exports.groups.oppositeShiftMode = new settings_group_1.default("oppositeShiftMode", UpdateConfig.setOppositeShiftMode, "button");
        exports.groups.confidenceMode = new settings_group_1.default("confidenceMode", UpdateConfig.setConfidenceMode, "button", () => {
            exports.groups["freedomMode"].updateInput();
            exports.groups["stopOnError"].updateInput();
        });
        exports.groups.indicateTypos = new settings_group_1.default("indicateTypos", UpdateConfig.setIndicateTypos, "button");
        exports.groups.hideExtraLetters = new settings_group_1.default("hideExtraLetters", UpdateConfig.setHideExtraLetters, "button");
        exports.groups.blindMode = new settings_group_1.default("blindMode", UpdateConfig.setBlindMode, "button");
        exports.groups.quickEnd = new settings_group_1.default("quickEnd", UpdateConfig.setQuickEnd, "button");
        exports.groups.repeatQuotes = new settings_group_1.default("repeatQuotes", UpdateConfig.setRepeatQuotes, "button");
        exports.groups.enableAds = new settings_group_1.default("enableAds", UpdateConfig.setEnableAds, "button");
        exports.groups.alwaysShowWordsHistory = new settings_group_1.default("alwaysShowWordsHistory", UpdateConfig.setAlwaysShowWordsHistory, "button");
        exports.groups.britishEnglish = new settings_group_1.default("britishEnglish", UpdateConfig.setBritishEnglish, "button");
        exports.groups.singleListCommandLine = new settings_group_1.default("singleListCommandLine", UpdateConfig.setSingleListCommandLine, "button");
        exports.groups.capsLockWarning = new settings_group_1.default("capsLockWarning", UpdateConfig.setCapsLockWarning, "button");
        exports.groups.flipTestColors = new settings_group_1.default("flipTestColors", UpdateConfig.setFlipTestColors, "button");
        exports.groups.swapEscAndTab = new settings_group_1.default("swapEscAndTab", UpdateConfig.setSwapEscAndTab, "button");
        exports.groups.showOutOfFocusWarning = new settings_group_1.default("showOutOfFocusWarning", UpdateConfig.setShowOutOfFocusWarning, "button");
        exports.groups.colorfulMode = new settings_group_1.default("colorfulMode", UpdateConfig.setColorfulMode, "button");
        exports.groups.startGraphsAtZero = new settings_group_1.default("startGraphsAtZero", UpdateConfig.setStartGraphsAtZero, "button");
        exports.groups.autoSwitchTheme = new settings_group_1.default("autoSwitchTheme", UpdateConfig.setAutoSwitchTheme, "button");
        exports.groups.randomTheme = new settings_group_1.default("randomTheme", UpdateConfig.setRandomTheme, "button");
        exports.groups.stopOnError = new settings_group_1.default("stopOnError", UpdateConfig.setStopOnError, "button", () => {
            exports.groups["confidenceMode"].updateInput();
        });
        exports.groups.soundVolume = new settings_group_1.default("soundVolume", UpdateConfig.setSoundVolume, "button");
        exports.groups.playSoundOnError = new settings_group_1.default("playSoundOnError", UpdateConfig.setPlaySoundOnError, "button", () => {
            if (config_1.default.playSoundOnError)
                Sound.playError();
        });
        exports.groups.playSoundOnClick = new settings_group_1.default("playSoundOnClick", UpdateConfig.setPlaySoundOnClick, "button", () => {
            if (config_1.default.playSoundOnClick !== "off")
                Sound.playClick();
        });
        exports.groups.showAllLines = new settings_group_1.default("showAllLines", UpdateConfig.setShowAllLines, "button");
        exports.groups.paceCaret = new settings_group_1.default("paceCaret", UpdateConfig.setPaceCaret, "button");
        exports.groups.repeatedPace = new settings_group_1.default("repeatedPace", UpdateConfig.setRepeatedPace, "button");
        exports.groups.minWpm = new settings_group_1.default("minWpm", UpdateConfig.setMinWpm, "button");
        exports.groups.minAcc = new settings_group_1.default("minAcc", UpdateConfig.setMinAcc, "button");
        exports.groups.minBurst = new settings_group_1.default("minBurst", UpdateConfig.setMinBurst, "button");
        exports.groups.smoothLineScroll = new settings_group_1.default("smoothLineScroll", UpdateConfig.setSmoothLineScroll, "button");
        exports.groups.lazyMode = new settings_group_1.default("lazyMode", UpdateConfig.setLazyMode, "button");
        exports.groups.layout = new settings_group_1.default("layout", UpdateConfig.setLayout, "select");
        exports.groups.language = new settings_group_1.default("language", UpdateConfig.setLanguage, "select");
        exports.groups.fontSize = new settings_group_1.default("fontSize", UpdateConfig.setFontSize, "button");
        exports.groups.pageWidth = new settings_group_1.default("pageWidth", UpdateConfig.setPageWidth, "button");
        exports.groups.caretStyle = new settings_group_1.default("caretStyle", UpdateConfig.setCaretStyle, "button");
        exports.groups.paceCaretStyle = new settings_group_1.default("paceCaretStyle", UpdateConfig.setPaceCaretStyle, "button");
        exports.groups.timerStyle = new settings_group_1.default("timerStyle", UpdateConfig.setTimerStyle, "button");
        exports.groups.highlightMode = new settings_group_1.default("highlightMode", UpdateConfig.setHighlightMode, "button");
        exports.groups.timerOpacity = new settings_group_1.default("timerOpacity", UpdateConfig.setTimerOpacity, "button");
        exports.groups.timerColor = new settings_group_1.default("timerColor", UpdateConfig.setTimerColor, "button");
        exports.groups.fontFamily = new settings_group_1.default("fontFamily", UpdateConfig.setFontFamily, "button", undefined, () => {
            const customButton = $(".pageSettings .section.fontFamily .buttons .custom");
            if ($(".pageSettings .section.fontFamily .buttons .active").length === 0) {
                customButton.addClass("active");
                customButton.text(`Custom (${config_1.default.fontFamily.replace(/_/g, " ")})`);
            }
            else {
                customButton.text("Custom");
            }
        });
        exports.groups.alwaysShowDecimalPlaces = new settings_group_1.default("alwaysShowDecimalPlaces", UpdateConfig.setAlwaysShowDecimalPlaces, "button");
        exports.groups.alwaysShowCPM = new settings_group_1.default("alwaysShowCPM", UpdateConfig.setAlwaysShowCPM, "button");
        exports.groups.customBackgroundSize = new settings_group_1.default("customBackgroundSize", UpdateConfig.setCustomBackgroundSize, "button");
        // groups.customLayoutfluid = new SettingsGroup(
        //   "customLayoutfluid",
        //   UpdateConfig.setCustomLayoutfluid
        // );
    });
}
function reset() {
    $(".pageSettings .section.themes .favThemes.buttons").empty();
    $(".pageSettings .section.themes .allThemes.buttons").empty();
    $(".pageSettings .section.themes .allCustomThemes.buttons").empty();
    $(".pageSettings .section.languageGroups .buttons").empty();
    $(".pageSettings select").empty().select2("destroy");
    $(".pageSettings .section.funbox .buttons").empty();
    $(".pageSettings .section.fontFamily .buttons").empty();
}
exports.reset = reset;
let groupsInitialized = false;
function fillSettingsPage() {
    return __awaiter(this, void 0, void 0, function* () {
        if (config_1.default.showKeyTips) {
            $(".pageSettings .tip").removeClass("hidden");
        }
        else {
            $(".pageSettings .tip").addClass("hidden");
        }
        // Language Selection Combobox
        const languageEl = $(".pageSettings .section.language select").empty();
        const languageGroups = yield Misc.getLanguageGroups();
        languageGroups.forEach((group) => {
            let langComboBox = `<optgroup label="${group.name}">`;
            group.languages.forEach((language) => {
                langComboBox += `<option value="${language}">
        ${language.replace(/_/g, " ")}
      </option>`;
            });
            langComboBox += `</optgroup>`;
            languageEl.append(langComboBox);
        });
        languageEl.select2({
            width: "100%",
        });
        const layoutEl = $(".pageSettings .section.layout select").empty();
        layoutEl.append(`<option value='default'>off</option>`);
        Object.keys(yield Misc.getLayoutsList()).forEach((layout) => {
            layoutEl.append(`<option value='${layout}'>${layout.replace(/_/g, " ")}</option>`);
        });
        layoutEl.select2({
            width: "100%",
        });
        const keymapEl = $(".pageSettings .section.keymapLayout select").empty();
        keymapEl.append(`<option value='overrideSync'>emulator sync</option>`);
        Object.keys(yield Misc.getLayoutsList()).forEach((layout) => {
            if (layout.toString() != "default") {
                keymapEl.append(`<option value='${layout}'>${layout.replace(/_/g, " ")}</option>`);
            }
        });
        keymapEl.select2({
            width: "100%",
        });
        const themeEl1 = $(".pageSettings .section.autoSwitchThemeInputs select.light").empty();
        const themeEl2 = $(".pageSettings .section.autoSwitchThemeInputs select.dark").empty();
        for (const theme of yield Misc.getThemesList()) {
            themeEl1.append(`<option value='${theme.name}'>${theme.name.replace(/_/g, " ")}</option>`);
            themeEl2.append(`<option value='${theme.name}'>${theme.name.replace(/_/g, " ")}</option>`);
        }
        themeEl1.select2({
            width: "100%",
        });
        themeEl2.select2({
            width: "100%",
        });
        $(`.pageSettings .section.autoSwitchThemeInputs select.light`)
            .val(config_1.default.themeLight)
            .trigger("change.select2");
        $(`.pageSettings .section.autoSwitchThemeInputs select.dark`)
            .val(config_1.default.themeDark)
            .trigger("change.select2");
        const funboxEl = $(".pageSettings .section.funbox .buttons").empty();
        funboxEl.append(`<div class="funbox button" funbox='none'>none</div>`);
        Misc.getFunboxList().then((funboxModes) => {
            funboxModes.forEach((funbox) => {
                if (funbox.name === "mirror") {
                    funboxEl.append(`<div class="funbox button" funbox='${funbox.name}' aria-label="${funbox.info}" data-balloon-pos="up" data-balloon-length="fit" type="${funbox.type}" style="transform:scaleX(-1);">${funbox.name.replace(/_/g, " ")}</div>`);
                }
                else {
                    funboxEl.append(`<div class="funbox button" funbox='${funbox.name}' aria-label="${funbox.info}" data-balloon-pos="up" data-balloon-length="fit" type="${funbox.type}">${funbox.name.replace(/_/g, " ")}</div>`);
                }
            });
        });
        let isCustomFont = true;
        const fontsEl = $(".pageSettings .section.fontFamily .buttons").empty();
        Misc.getFontsList().then((fonts) => {
            fonts.forEach((font) => {
                if (config_1.default.fontFamily === font.name)
                    isCustomFont = false;
                fontsEl.append(`<div class="button${config_1.default.fontFamily === font.name ? " active" : ""}" style="font-family:${font.display !== undefined ? font.display : font.name}" fontFamily="${font.name.replace(/ /g, "_")}" tabindex="0"
        onclick="this.blur();">${font.display !== undefined ? font.display : font.name}</div>`);
            });
            fontsEl.append(isCustomFont
                ? `<div class="button no-auto-handle custom active" onclick="this.blur();">Custom (${config_1.default.fontFamily.replace(/_/g, " ")})</div>`
                : '<div class="button no-auto-handle custom" onclick="this.blur();">Custom</div>');
        });
        $(".pageSettings .section.customBackgroundSize input").val(config_1.default.customBackground);
        $(".pageSettings .section.customLayoutfluid input").val(config_1.default.customLayoutfluid.replace(/#/g, " "));
        setEventDisabled(true);
        if (!groupsInitialized) {
            yield initGroups();
            groupsInitialized = true;
        }
        else {
            Object.keys(exports.groups).forEach((groupKey) => {
                exports.groups[groupKey].updateInput();
            });
        }
        setEventDisabled(false);
        yield ThemePicker.refreshButtons();
        yield UpdateConfig.loadPromise;
    });
}
exports.fillSettingsPage = fillSettingsPage;
// export let settingsFillPromise = fillSettingsPage();
function hideAccountSection() {
    $(`.sectionGroupTitle[group='account']`).addClass("hidden");
    $(`.settingsGroup.account`).addClass("hidden");
    $(`.pageSettings .section.needsAccount`).addClass("hidden");
}
exports.hideAccountSection = hideAccountSection;
function updateDiscordSection() {
    //no code and no discord
    if (firebase_1.Auth.currentUser == null) {
        $(".pageSettings .section.discordIntegration").addClass("hidden");
    }
    else {
        if (DB.getSnapshot() == null)
            return;
        $(".pageSettings .section.discordIntegration").removeClass("hidden");
        if (DB.getSnapshot().discordId == undefined) {
            //show button
            $(".pageSettings .section.discordIntegration .buttons").removeClass("hidden");
            $(".pageSettings .section.discordIntegration .info").addClass("hidden");
        }
        else {
            $(".pageSettings .section.discordIntegration .buttons").addClass("hidden");
            $(".pageSettings .section.discordIntegration .info").removeClass("hidden");
        }
    }
}
exports.updateDiscordSection = updateDiscordSection;
function updateAuthSections() {
    $(".pageSettings .section.passwordAuthSettings .button").addClass("hidden");
    $(".pageSettings .section.googleAuthSettings .button").addClass("hidden");
    const user = firebase_1.Auth.currentUser;
    if (!user)
        return;
    const passwordProvider = user.providerData.find((provider) => provider.providerId === "password");
    const googleProvider = user.providerData.find((provider) => provider.providerId === "google.com");
    if (passwordProvider) {
        $(".pageSettings .section.passwordAuthSettings #emailPasswordAuth").removeClass("hidden");
        $(".pageSettings .section.passwordAuthSettings #passPasswordAuth").removeClass("hidden");
    }
    else {
        $(".pageSettings .section.passwordAuthSettings #addPasswordAuth").removeClass("hidden");
    }
    if (googleProvider) {
        $(".pageSettings .section.googleAuthSettings #removeGoogleAuth").removeClass("hidden");
        if (passwordProvider) {
            $(".pageSettings .section.googleAuthSettings #removeGoogleAuth").removeClass("disabled");
        }
        else {
            $(".pageSettings .section.googleAuthSettings #removeGoogleAuth").addClass("disabled");
        }
    }
    else {
        $(".pageSettings .section.googleAuthSettings #addGoogleAuth").removeClass("hidden");
    }
}
exports.updateAuthSections = updateAuthSections;
function setActiveFunboxButton() {
    $(`.pageSettings .section.funbox .button`).removeClass("active");
    $(`.pageSettings .section.funbox .button[funbox='${config_1.default.funbox}']`).addClass("active");
}
function refreshTagsSettingsSection() {
    var _a;
    if (firebase_1.Auth.currentUser !== null && DB.getSnapshot() !== null) {
        const tagsEl = $(".pageSettings .section.tags .tagsList").empty();
        (_a = DB.getSnapshot().tags) === null || _a === void 0 ? void 0 : _a.forEach((tag) => {
            // let tagPbString = "No PB found";
            // if (tag.pb != undefined && tag.pb > 0) {
            //   tagPbString = `PB: ${tag.pb}`;
            // }
            tagsEl.append(`

      <div class="buttons tag" id="${tag._id}">
        <div class="button tagButton ${tag.active ? "active" : ""}" active="${tag.active}">
          <div class="title">${tag.name}</div>
        </div>
        <div class="clearPbButton button">
          <i class="fas fa-crown fa-fw"></i>
        </div>
        <div class="editButton button">
          <i class="fas fa-pen fa-fw"></i>
        </div>
        <div class="removeButton button">
          <i class="fas fa-trash fa-fw"></i>
        </div>
      </div>

      `);
        });
        $(".pageSettings .section.tags").removeClass("hidden");
    }
    else {
        $(".pageSettings .section.tags").addClass("hidden");
    }
}
function refreshPresetsSettingsSection() {
    var _a;
    if (firebase_1.Auth.currentUser !== null && DB.getSnapshot() !== null) {
        const presetsEl = $(".pageSettings .section.presets .presetsList").empty();
        (_a = DB.getSnapshot().presets) === null || _a === void 0 ? void 0 : _a.forEach((preset) => {
            presetsEl.append(`
      <div class="buttons preset" id="${preset._id}">
        <div class="button presetButton">
          <div class="title">${preset.name}</div>
        </div>
        <div class="editButton button">
          <i class="fas fa-pen fa-fw"></i>
        </div>
        <div class="removeButton button">
          <i class="fas fa-trash fa-fw"></i>
        </div>
      </div>
      
      `);
        });
        $(".pageSettings .section.presets").removeClass("hidden");
    }
    else {
        $(".pageSettings .section.presets").addClass("hidden");
    }
}
function showAccountSection() {
    $(`.sectionGroupTitle[group='account']`).removeClass("hidden");
    $(`.settingsGroup.account`).removeClass("hidden");
    $(`.pageSettings .section.needsAccount`).removeClass("hidden");
    refreshTagsSettingsSection();
    refreshPresetsSettingsSection();
    updateDiscordSection();
}
exports.showAccountSection = showAccountSection;
function update() {
    Object.keys(exports.groups).forEach((group) => {
        exports.groups[group].updateInput();
    });
    refreshTagsSettingsSection();
    refreshPresetsSettingsSection();
    // LanguagePicker.setActiveGroup(); Shifted from grouped btns to combo-box
    setActiveFunboxButton();
    ThemePicker.updateActiveTab(true);
    ThemePicker.setCustomInputs(true);
    updateDiscordSection();
    updateAuthSections();
    // ThemePicker.updateActiveButton();
    $(".pageSettings .section.paceCaret input.customPaceCaretSpeed").val(config_1.default.paceCaretCustomSpeed);
    $(".pageSettings .section.minWpm input.customMinWpmSpeed").val(config_1.default.minWpmCustomSpeed);
    $(".pageSettings .section.minAcc input.customMinAcc").val(config_1.default.minAccCustom);
    $(".pageSettings .section.minBurst input.customMinBurst").val(config_1.default.minBurstCustomSpeed);
    if (config_1.default.autoSwitchTheme) {
        $(".pageSettings .section.autoSwitchThemeInputs").removeClass("hidden");
    }
    else {
        $(".pageSettings .section.autoSwitchThemeInputs").addClass("hidden");
    }
    if (config_1.default.customBackground !== "") {
        $(".pageSettings .section.customBackgroundFilter").removeClass("hidden");
    }
    else {
        $(".pageSettings .section.customBackgroundFilter").addClass("hidden");
    }
}
exports.update = update;
function toggleSettingsGroup(groupName) {
    $(`.pageSettings .settingsGroup.${groupName}`)
        .stop(true, true)
        .slideToggle(250)
        .toggleClass("slideup");
    if ($(`.pageSettings .settingsGroup.${groupName}`).hasClass("slideup")) {
        $(`.pageSettings .sectionGroupTitle[group=${groupName}] .fas`)
            .stop(true, true)
            .animate({
            deg: -90,
        }, {
            duration: 250,
            step: function (now) {
                $(this).css({
                    transform: "rotate(" + now + "deg)",
                });
            },
        });
    }
    else {
        $(`.pageSettings .sectionGroupTitle[group=${groupName}] .fas`)
            .stop(true, true)
            .animate({
            deg: 0,
        }, {
            duration: 250,
            step: function (now) {
                $(this).css({
                    transform: "rotate(" + now + "deg)",
                });
            },
        });
    }
}
$(document).on("focusout", ".pageSettings .section.paceCaret input.customPaceCaretSpeed", () => {
    UpdateConfig.setPaceCaretCustomSpeed(parseInt($(".pageSettings .section.paceCaret input.customPaceCaretSpeed").val()));
});
$(document).on("click", ".pageSettings .section.paceCaret .button.save", () => {
    UpdateConfig.setPaceCaretCustomSpeed(parseInt($(".pageSettings .section.paceCaret input.customPaceCaretSpeed").val()));
});
$(document).on("focusout", ".pageSettings .section.minWpm input.customMinWpmSpeed", () => {
    UpdateConfig.setMinWpmCustomSpeed(parseInt($(".pageSettings .section.minWpm input.customMinWpmSpeed").val()));
});
$(document).on("click", ".pageSettings .section.minWpm .button.save", () => {
    UpdateConfig.setMinWpmCustomSpeed(parseInt($(".pageSettings .section.minWpm input.customMinWpmSpeed").val()));
});
$(document).on("focusout", ".pageSettings .section.minAcc input.customMinAcc", () => {
    UpdateConfig.setMinAccCustom(parseInt($(".pageSettings .section.minAcc input.customMinAcc").val()));
});
$(document).on("click", ".pageSettings .section.minAcc .button.save", () => {
    UpdateConfig.setMinAccCustom(parseInt($(".pageSettings .section.minAcc input.customMinAcc").val()));
});
$(document).on("focusout", ".pageSettings .section.minBurst input.customMinBurst", () => {
    UpdateConfig.setMinBurstCustomSpeed(parseInt($(".pageSettings .section.minBurst input.customMinBurst").val()));
});
$(document).on("click", ".pageSettings .section.minBurst .button.save", () => {
    UpdateConfig.setMinBurstCustomSpeed(parseInt($(".pageSettings .section.minBurst input.customMinBurst").val()));
});
// Commented because started using combo-box for choosing languages instead of grouped buttons
// languages
// $(document).on(
//   "click",
//   ".pageSettings .section.languageGroups .button",
//   (e) => {
//     const group = $(e.currentTarget).attr("group");
//     LanguagePicker.setActiveGroup(group, true);
//   }
// );
//funbox
$(document).on("click", ".pageSettings .section.funbox .button", (e) => {
    const funbox = $(e.currentTarget).attr("funbox");
    const type = $(e.currentTarget).attr("type");
    Funbox.setFunbox(funbox, type);
    setActiveFunboxButton();
});
//tags
$(document).on("click", ".pageSettings .section.tags .tagsList .tag .tagButton", (e) => {
    const target = e.currentTarget;
    const tagid = $(target).parent(".tag").attr("id");
    TagController.toggle(tagid);
    $(target).toggleClass("active");
});
$(document).on("click", ".pageSettings .section.presets .presetsList .preset .presetButton", (e) => {
    const target = e.currentTarget;
    const presetid = $(target).parent(".preset").attr("id");
    console.log("Applying Preset");
    configEventDisabled = true;
    PresetController.apply(presetid);
    configEventDisabled = false;
    update();
});
$("#importSettingsButton").on("click", () => {
    ImportExportSettingsPopup.show("import");
});
$("#exportSettingsButton").on("click", () => {
    const configJSON = JSON.stringify(config_1.default);
    navigator.clipboard.writeText(configJSON).then(function () {
        Notifications.add("JSON Copied to clipboard", 0);
    }, function () {
        ImportExportSettingsPopup.show("export");
    });
});
$(".pageSettings .sectionGroupTitle").on("click", (e) => {
    toggleSettingsGroup($(e.currentTarget).attr("group"));
});
$(".pageSettings .section.apeKeys #showApeKeysPopup").on("click", () => {
    ApeKeysPopup.show();
});
$(".pageSettings .section.customBackgroundSize .inputAndButton .save").on("click", () => {
    UpdateConfig.setCustomBackground($(".pageSettings .section.customBackgroundSize .inputAndButton input").val());
});
$(".pageSettings .section.customBackgroundSize .inputAndButton input").keypress((e) => {
    if (e.key === "Enter") {
        UpdateConfig.setCustomBackground($(".pageSettings .section.customBackgroundSize .inputAndButton input").val());
    }
});
$(".pageSettings .section.customLayoutfluid .inputAndButton .save").on("click", () => {
    UpdateConfig.setCustomLayoutfluid($(".pageSettings .section.customLayoutfluid .inputAndButton input").val()).then((bool) => {
        if (bool) {
            Notifications.add("Custom layoutfluid saved", 1);
        }
    });
});
$(".pageSettings .section.customLayoutfluid .inputAndButton .input").keypress((e) => {
    if (e.key === "Enter") {
        UpdateConfig.setCustomLayoutfluid($(".pageSettings .section.customLayoutfluid .inputAndButton input").val()).then((bool) => {
            if (bool) {
                Notifications.add("Custom layoutfluid saved", 1);
            }
        });
    }
});
$(".quickNav .links a").on("click", (e) => {
    const settingsGroup = e.target.innerText;
    const isOpen = $(`.pageSettings .settingsGroup.${settingsGroup}`).hasClass("slideup");
    isOpen && toggleSettingsGroup(settingsGroup);
});
$(document).on("change", `.pageSettings .section.autoSwitchThemeInputs select.light`, (e) => {
    const target = $(e.currentTarget);
    if (target.hasClass("disabled") || target.hasClass("no-auto-handle")) {
        return;
    }
    UpdateConfig.setThemeLight(target.val());
});
$(document).on("change", `.pageSettings .section.autoSwitchThemeInputs select.dark`, (e) => {
    const target = $(e.currentTarget);
    if (target.hasClass("disabled") || target.hasClass("no-auto-handle")) {
        return;
    }
    UpdateConfig.setThemeDark(target.val());
});
let configEventDisabled = false;
function setEventDisabled(value) {
    configEventDisabled = value;
}
exports.setEventDisabled = setEventDisabled;
ConfigEvent.subscribe((eventKey) => {
    if (eventKey === "fullConfigChange")
        setEventDisabled(true);
    if (eventKey === "fullConfigChangeFinished") {
        setEventDisabled(false);
    }
    if (configEventDisabled || eventKey === "saveToLocalStorage")
        return;
    if (ActivePage.get() === "settings" && eventKey !== "theme") {
        update();
    }
});
exports.page = new page_1.default("settings", $(".page.pageSettings"), "/settings", () => {
    //
}, () => __awaiter(void 0, void 0, void 0, function* () {
    reset();
}), () => __awaiter(void 0, void 0, void 0, function* () {
    yield fillSettingsPage();
    update();
}), () => {
    //
});


/***/ }),

/***/ "./src/scripts/pages/test.ts":
/*!***********************************!*\
  !*** ./src/scripts/pages/test.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.page = void 0;
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const TestStats = __importStar(__webpack_require__(/*! ../test/test-stats */ "./src/scripts/test/test-stats.ts"));
const TestUI = __importStar(__webpack_require__(/*! ../test/test-ui */ "./src/scripts/test/test-ui.ts"));
const ManualRestart = __importStar(__webpack_require__(/*! ../test/manual-restart-tracker */ "./src/scripts/test/manual-restart-tracker.ts"));
const TestConfig = __importStar(__webpack_require__(/*! ../test/test-config */ "./src/scripts/test/test-config.ts"));
const TestLogic = __importStar(__webpack_require__(/*! ../test/test-logic */ "./src/scripts/test/test-logic.ts"));
const Funbox = __importStar(__webpack_require__(/*! ../test/funbox */ "./src/scripts/test/funbox.ts"));
const page_1 = __importDefault(__webpack_require__(/*! ./page */ "./src/scripts/pages/page.ts"));
exports.page = new page_1.default("test", $(".page.pageTest"), "/", () => __awaiter(void 0, void 0, void 0, function* () {
    TestLogic.restart();
    Funbox.clear();
    TestConfig.hide();
    $("#wordsInput").focusout();
}), () => __awaiter(void 0, void 0, void 0, function* () {
    //
}), () => {
    TestConfig.show();
    TestStats.resetIncomplete();
    ManualRestart.set();
    TestLogic.restart(undefined, undefined, undefined, undefined, true);
    Funbox.activate(config_1.default.funbox);
}, () => {
    TestUI.focusWords();
});


/***/ }),

/***/ "./src/scripts/popups/ape-keys-popup.ts":
/*!**********************************************!*\
  !*** ./src/scripts/popups/ape-keys-popup.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.show = exports.hide = void 0;
const ape_1 = __importDefault(__webpack_require__(/*! ../ape */ "./src/scripts/ape/index.ts"));
const Loader = __importStar(__webpack_require__(/*! ../elements/loader */ "./src/scripts/elements/loader.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const format_1 = __importDefault(__webpack_require__(/*! date-fns/format */ "./node_modules/date-fns/esm/format/index.js"));
let apeKeys = {};
function getData() {
    return __awaiter(this, void 0, void 0, function* () {
        Loader.show();
        const response = yield ape_1.default.apeKeys.get();
        Loader.hide();
        if (response.status !== 200) {
            Notifications.add("Error getting ape keys: " + response.message, -1);
            return undefined;
        }
        apeKeys = response.data;
    });
}
function refreshList() {
    const data = apeKeys;
    if (!data)
        return;
    const table = $("#apeKeysPopupWrapper table tbody");
    table.empty();
    const apeKeyIds = Object.keys(data);
    if (apeKeyIds.length === 0) {
        table.append("<tr><td colspan='6' style='text-align: center;'>No keys found</td></tr>");
        return;
    }
    apeKeyIds.forEach((apeKeyId) => {
        const key = data[apeKeyId];
        table.append(`
      <tr keyId="${apeKeyId}">
        <td>
          <div class="icon-button">
            ${key.enabled
            ? `<i class="fas fa-check-square"></i>`
            : `<i class="far fa-fw fa-square"></i>`}
          </div>
        </td>
        <td>${key.name}</td>
        <td>${(0, format_1.default)(new Date(key.createdOn), "dd MMM yyyy HH:mm")}</td>
        <td>${(0, format_1.default)(new Date(key.modifiedOn), "dd MMM yyyy HH:mm")}</td>
        <td>${key.lastUsedOn === -1
            ? "-"
            : (0, format_1.default)(new Date(key.lastUsedOn), "dd MMM yyyy HH:mm")}</td>
        <td>
          <div class="keyButtons">
            <div class="button edit">
              <i class="fas fa-fw fa-pen"></i>
            </div>
            <div class="button delete">
              <i class="fas fa-fw fa-trash-alt"></i>
            </div>
          </div>
        </td>
      </tr>
    `);
    });
}
function hide() {
    if (!$("#apeKeysPopupWrapper").hasClass("hidden")) {
        $("#apeKeysPopupWrapper")
            .stop(true, true)
            .css("opacity", 1)
            .animate({
            opacity: 0,
        }, 100, () => {
            $("#apeKeysPopupWrapper").addClass("hidden");
        });
    }
}
exports.hide = hide;
//show the popup
function show() {
    return __awaiter(this, void 0, void 0, function* () {
        if ($("#apeKeysPopupWrapper").hasClass("hidden")) {
            yield getData();
            refreshList();
            $("#apeKeysPopupWrapper")
                .stop(true, true)
                .css("opacity", 0)
                .removeClass("hidden")
                .animate({
                opacity: 1,
            }, 100, () => {
                $("#apeKeysPopup textarea").trigger("focus").select();
            });
        }
    });
}
exports.show = show;
$("#apeKeysPopupWrapper").on("mousedown", (e) => {
    if ($(e.target).attr("id") === "apeKeysPopupWrapper") {
        hide();
    }
});
$("#apeKeysPopup .generateApeKey").on("click", () => {
    hide();
});
$(document).on("click", "#apeKeysPopup table .keyButtons .button", () => {
    hide();
});
$(document).on("click", "#apeKeysPopup table .icon-button", (e) => __awaiter(void 0, void 0, void 0, function* () {
    const keyId = $(e.target).closest("tr").attr("keyId");
    const key = apeKeys === null || apeKeys === void 0 ? void 0 : apeKeys[keyId];
    if (!key || !apeKeys)
        return;
    Loader.show();
    const response = yield ape_1.default.apeKeys.update(keyId, { enabled: !key.enabled });
    Loader.hide();
    if (response.status !== 200) {
        return Notifications.add("Failed to update key: " + response.message, -1);
    }
    apeKeys[keyId].enabled = !key.enabled;
    refreshList();
    if (key.enabled) {
        Notifications.add("Key active", 1);
    }
    else {
        Notifications.add("Key inactive", 1);
    }
}));


/***/ }),

/***/ "./src/scripts/popups/contact-popup.ts":
/*!*********************************************!*\
  !*** ./src/scripts/popups/contact-popup.ts ***!
  \*********************************************/
/***/ (() => {


$(document.body).on("click", "#contactPopupButton", () => {
    $("#contactPopupWrapper")
        .css("opacity", 0)
        .removeClass("hidden")
        .animate({ opacity: 1 }, 125);
});
$(document.body).on("click", "#contactPopupWrapper", (e) => {
    if ($(e.target).attr("id") === "contactPopupWrapper") {
        $("#contactPopupWrapper")
            .css("opacity", 1)
            .animate({ opacity: 0 }, 125, () => {
            $("#contactPopupWrapper").addClass("hidden");
        });
    }
});


/***/ }),

/***/ "./src/scripts/popups/custom-test-duration-popup.ts":
/*!**********************************************************!*\
  !*** ./src/scripts/popups/custom-test-duration-popup.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hide = exports.show = void 0;
const UpdateConfig = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const ManualRestart = __importStar(__webpack_require__(/*! ../test/manual-restart-tracker */ "./src/scripts/test/manual-restart-tracker.ts"));
const TestLogic = __importStar(__webpack_require__(/*! ../test/test-logic */ "./src/scripts/test/test-logic.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
function parseInput(input) {
    const re = /((-\s*)?\d+(\.\d+)?\s*[hms]?)/g;
    const seconds = [...input.toLowerCase().matchAll(re)]
        .map((match) => {
        const part = match[0];
        const duration = parseFloat(part.replace(/\s+/g, ""));
        if (part.includes("h")) {
            return 3600 * duration;
        }
        else if (part.includes("m")) {
            return 60 * duration;
        }
        else {
            return duration;
        }
    })
        .reduce((total, dur) => total + dur, 0);
    return Math.floor(seconds);
}
function format(duration) {
    const hours = Math.floor(duration / 3600);
    const minutes = Math.floor((duration % 3600) / 60);
    const seconds = (duration % 3600) % 60;
    const time = [];
    if (hours > 0) {
        time.push(`${hours} hour${hours === 1 ? "" : "s"}`);
    }
    if (minutes > 0) {
        time.push(`${minutes} minute${minutes === 1 ? "" : "s"}`);
    }
    if (seconds > 0) {
        time.push(`${seconds} second${seconds === 1 ? "" : "s"}`);
    }
    if (time.length === 3) {
        return `${time[0]}, ${time[1]} and ${time[2]}`;
    }
    else if (time.length === 2) {
        return `${time[0]} and ${time[1]}`;
    }
    else {
        return `${time[0]}`;
    }
}
function previewDuration() {
    const input = $("#customTestDurationPopup input").val();
    const duration = parseInput(input);
    let formattedDuration = "";
    if (duration < 0) {
        formattedDuration = "NEGATIVE TIME";
    }
    else if (duration == 0) {
        formattedDuration = "Infinite test";
    }
    else {
        formattedDuration = "Total time: " + format(duration);
    }
    $("#customTestDurationPopup .preview").text(formattedDuration);
}
function show() {
    if ($("#customTestDurationPopupWrapper").hasClass("hidden")) {
        $("#customTestDurationPopupWrapper")
            .stop(true, true)
            .css("opacity", 0)
            .removeClass("hidden")
            .animate({ opacity: 1 }, 100, () => {
            $("#customTestDurationPopup input").trigger("focus").select();
        });
    }
    previewDuration();
}
exports.show = show;
function hide() {
    if (!$("#customTestDurationPopupWrapper").hasClass("hidden")) {
        $("#customTestDurationPopupWrapper")
            .stop(true, true)
            .css("opacity", 1)
            .animate({
            opacity: 0,
        }, 100, () => {
            $("#customTestDurationPopupWrapper").addClass("hidden");
        });
    }
}
exports.hide = hide;
function apply() {
    const val = parseInput($("#customTestDurationPopup input").val());
    if (val !== null && !isNaN(val) && val >= 0) {
        UpdateConfig.setTimeConfig(val);
        ManualRestart.set();
        TestLogic.restart();
        if (val >= 1800) {
            Notifications.add("Stay safe and take breaks!", 0);
        }
        else if (val == 0) {
            Notifications.add("Infinite time! Make sure to use Bail Out from the command line to save your result.", 0, 7);
        }
    }
    else {
        Notifications.add("Custom time must be at least 1", 0);
    }
    hide();
}
$("#customTestDurationPopupWrapper").on("click", (e) => {
    if ($(e.target).attr("id") === "customTestDurationPopupWrapper") {
        hide();
    }
});
$("#customTestDurationPopup input").keyup((e) => {
    previewDuration();
    if (e.key === "Enter") {
        apply();
    }
});
$("#customTestDurationPopup .button").on("click", () => {
    apply();
});
$(document).on("click", "#top .config .time .text-button", (e) => {
    const mode = $(e.currentTarget).attr("timeConfig");
    if (mode == "custom") {
        show();
    }
});
$(document).on("keydown", (event) => {
    if (event.key === "Escape" &&
        !$("#customTestDurationPopupWrapper").hasClass("hidden")) {
        hide();
        event.preventDefault();
    }
});


/***/ }),

/***/ "./src/scripts/popups/custom-text-popup.ts":
/*!*************************************************!*\
  !*** ./src/scripts/popups/custom-text-popup.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isVisible = exports.hide = exports.show = void 0;
const CustomText = __importStar(__webpack_require__(/*! ../test/custom-text */ "./src/scripts/test/custom-text.ts"));
const ManualRestart = __importStar(__webpack_require__(/*! ../test/manual-restart-tracker */ "./src/scripts/test/manual-restart-tracker.ts"));
const TestLogic = __importStar(__webpack_require__(/*! ../test/test-logic */ "./src/scripts/test/test-logic.ts"));
const ChallengeController = __importStar(__webpack_require__(/*! ../controllers/challenge-controller */ "./src/scripts/controllers/challenge-controller.ts"));
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const WordFilterPopup = __importStar(__webpack_require__(/*! ./word-filter-popup */ "./src/scripts/popups/word-filter-popup.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const SavedTextsPopup = __importStar(__webpack_require__(/*! ./saved-texts-popup */ "./src/scripts/popups/saved-texts-popup.ts"));
const wrapper = "#customTextPopupWrapper";
const popup = "#customTextPopup";
function show() {
    if ($(wrapper).hasClass("hidden")) {
        if ($(`${popup} .checkbox input`).prop("checked")) {
            $(`${popup} .inputs .randomInputFields`).removeClass("hidden");
        }
        else {
            $(`${popup} .inputs .randomInputFields`).addClass("hidden");
        }
        $(wrapper)
            .stop(true, true)
            .css("opacity", 0)
            .removeClass("hidden")
            .animate({ opacity: 1 }, 100, () => {
            let newtext = CustomText.text.join(CustomText.delimiter);
            newtext = newtext.replace(/\n /g, "\n");
            $(`${popup} textarea`).val(newtext);
            $(`${popup} .wordcount input`).val(CustomText.word === -1 ? "" : CustomText.word);
            $(`${popup} .time input`).val(CustomText.time === -1 ? "" : CustomText.time);
            $(`${popup} textarea`).trigger("focus");
        });
    }
    setTimeout(() => {
        $(`${popup} textarea`).trigger("focus");
    }, 150);
}
exports.show = show;
$(`${popup} .delimiterCheck input`).change(() => {
    let delimiter;
    if ($(`${popup} .delimiterCheck input`).prop("checked")) {
        delimiter = "|";
    }
    else {
        delimiter = " ";
    }
    if ($(`${popup} textarea`).val() != CustomText.text.join(CustomText.delimiter)) {
        const currentText = $(`${popup} textarea`).val();
        const currentTextSplit = currentText.split(CustomText.delimiter);
        let newtext = currentTextSplit.join(delimiter);
        newtext = newtext.replace(/\n /g, "\n");
        $(`${popup} textarea`).val(newtext);
    }
    else {
        let newtext = CustomText.text.join(delimiter);
        newtext = newtext.replace(/\n /g, "\n");
        $(`${popup} textarea`).val(newtext);
    }
    CustomText.setDelimiter(delimiter);
});
function hide() {
    if (!$(wrapper).hasClass("hidden")) {
        $(wrapper)
            .stop(true, true)
            .css("opacity", 1)
            .animate({
            opacity: 0,
        }, 100, () => {
            $(wrapper).addClass("hidden");
        });
    }
}
exports.hide = hide;
function isVisible() {
    return !$(wrapper).hasClass("hidden");
}
exports.isVisible = isVisible;
$(wrapper).mousedown((e) => {
    if ($(e.target).attr("id") === "customTextPopupWrapper") {
        hide();
    }
});
$(`${popup} .inputs .checkbox input`).change(() => {
    if ($(`${popup} .checkbox input`).prop("checked")) {
        $(`${popup} .inputs .randomInputFields`).removeClass("hidden");
    }
    else {
        $(`${popup} .inputs .randomInputFields`).addClass("hidden");
    }
});
$(`${popup} textarea`).on("keypress", (e) => {
    if (e.code === "Enter" && e.ctrlKey) {
        $(`${popup} .button.apply`).click();
    }
});
$(`${popup} .randomInputFields .wordcount input`).on("keypress", () => {
    $(`${popup} .randomInputFields .time input`).val("");
});
$(`${popup} .randomInputFields .time input`).on("keypress", () => {
    $(`${popup} .randomInputFields .wordcount input`).val("");
});
$(`${popup} .buttonsTop .showSavedTexts`).on("click", () => {
    SavedTextsPopup.show();
});
$(`${popup} .buttonsTop .saveCustomText`).on("click", () => {
    hide();
});
function apply() {
    let text = $(`${popup} textarea`).val().normalize();
    text = text.trim();
    // text = text.replace(/[\r]/gm, " ");
    text = text.replace(/\\\\t/gm, "\t");
    text = text.replace(/\\\\n/gm, "\n");
    text = text.replace(/\\t/gm, "\t");
    text = text.replace(/\\n/gm, "\n");
    text = text.replace(/ +/gm, " ");
    // text = text.replace(/(\r\n)+/g, "\r\n");
    // text = text.replace(/(\n)+/g, "\n");
    // text = text.replace(/(\r)+/g, "\r");
    text = text.replace(/( *(\r\n|\r|\n) *)/g, "\n ");
    if ($(`${popup} .typographyCheck input`).prop("checked")) {
        text = Misc.cleanTypographySymbols(text);
    }
    // text = Misc.remove_non_ascii(text);
    text = text.replace(/[\u2060]/g, "");
    CustomText.setText(text.split(CustomText.delimiter));
    CustomText.setWord(parseInt($(`${popup} .wordcount input`).val()) || -1);
    CustomText.setTime(parseInt($(`${popup} .time input`).val()) || -1);
    CustomText.setIsWordRandom($(`${popup} .checkbox input`).prop("checked") && CustomText.word > -1);
    CustomText.setIsTimeRandom($(`${popup} .checkbox input`).prop("checked") && CustomText.time > -1);
    if ($(`${popup} .checkbox input`).prop("checked") &&
        !CustomText.isTimeRandom &&
        !CustomText.isWordRandom) {
        Notifications.add("You need to specify word count or time in seconds to start a random custom test.", 0, 5);
        return;
    }
    if ($(`${popup} .checkbox input`).prop("checked") &&
        CustomText.isTimeRandom &&
        CustomText.isWordRandom) {
        Notifications.add("You need to pick between word count or time in seconds to start a random custom test.", 0, 5);
        return;
    }
    if ((CustomText.isWordRandom && CustomText.word === 0) ||
        (CustomText.isTimeRandom && CustomText.time === 0)) {
        Notifications.add("Infinite words! Make sure to use Bail Out from the command line to save your result.", 0, 7);
    }
    ChallengeController.clearActive();
    ManualRestart.set();
    if (config_1.default.mode !== "custom")
        UpdateConfig.setMode("custom");
    TestLogic.restart();
    hide();
}
$(document).on("click", `${popup} .button.apply`, () => {
    apply();
});
$(document).on("click", `${popup} .wordfilter`, () => {
    WordFilterPopup.show();
});
$(document).on("click", "#top .config .customText .text-button", () => {
    show();
});
$(document).on("keydown", (event) => {
    if (event.key === "Escape" &&
        !$("#customTextPopupWrapper").hasClass("hidden")) {
        hide();
        event.preventDefault();
    }
});


/***/ }),

/***/ "./src/scripts/popups/custom-theme-popup.ts":
/*!**************************************************!*\
  !*** ./src/scripts/popups/custom-theme-popup.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {


// import Config, * as UpdateConfig from "./config";
// import * as Notifications from "./notifications";
// import * as ThemePicker from "./theme-picker";
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.show = void 0;
function show(value) {
    if ($("#customThemeShareWrapper").hasClass("hidden")) {
        // let save = [];
        // $.each(
        //   $(".pageSettings .section.customTheme [type='color']"),
        //   (index, element) => {
        //     save.push($(element).attr("value"));
        //   }
        // );
        // $("#customThemeShareWrapper input").val(JSON.stringify(save));
        $("#customThemeShareWrapper input").val(value);
        $("#customThemeShareWrapper")
            .stop(true, true)
            .css("opacity", 0)
            .removeClass("hidden")
            .animate({ opacity: 1 }, 100, () => {
            $("#customThemeShare input").trigger("focus");
            $("#customThemeShare input").select();
            $("#customThemeShare input").trigger("focus");
        });
    }
}
exports.show = show;
function hide() {
    if (!$("#customThemeShareWrapper").hasClass("hidden")) {
        // try {
        //   UpdateConfig.setCustomThemeColors(
        //     JSON.parse($("#customThemeShareWrapper input").val())
        //   );
        // } catch (e) {
        //   Notifications.add(
        //     "Something went wrong. Reverting to default custom colors.",
        //     0,
        //     4
        //   );
        //   UpdateConfig.setCustomThemeColors(Config.defaultConfig.customThemeColors);
        // }
        // ThemePicker.setCustomInputs();
        $("#customThemeShareWrapper input").val("");
        $("#customThemeShareWrapper")
            .stop(true, true)
            .css("opacity", 1)
            .animate({
            opacity: 0,
        }, 100, () => {
            $("#customThemeShareWrapper").addClass("hidden");
        });
    }
}
$("#customThemeShareWrapper").on("click", (e) => {
    if ($(e.target).attr("id") === "customThemeShareWrapper") {
        hide();
    }
});
$("#customThemeShare .button").on("click", () => {
    hide();
});


/***/ }),

/***/ "./src/scripts/popups/custom-word-amount-popup.ts":
/*!********************************************************!*\
  !*** ./src/scripts/popups/custom-word-amount-popup.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hide = exports.show = void 0;
const UpdateConfig = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const ManualRestart = __importStar(__webpack_require__(/*! ../test/manual-restart-tracker */ "./src/scripts/test/manual-restart-tracker.ts"));
const TestLogic = __importStar(__webpack_require__(/*! ../test/test-logic */ "./src/scripts/test/test-logic.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
function show() {
    if ($("#customWordAmountPopupWrapper").hasClass("hidden")) {
        $("#customWordAmountPopupWrapper")
            .stop(true, true)
            .css("opacity", 0)
            .removeClass("hidden")
            .animate({ opacity: 1 }, 100, () => {
            $("#customWordAmountPopup input").trigger("focus").select();
        });
    }
}
exports.show = show;
function hide() {
    if (!$("#customWordAmountPopupWrapper").hasClass("hidden")) {
        $("#customWordAmountPopupWrapper")
            .stop(true, true)
            .css("opacity", 1)
            .animate({
            opacity: 0,
        }, 100, () => {
            $("#customWordAmountPopupWrapper").addClass("hidden");
        });
    }
}
exports.hide = hide;
function apply() {
    const val = parseInt($("#customWordAmountPopup input").val());
    if (val !== null && !isNaN(val) && val >= 0) {
        UpdateConfig.setWordCount(val);
        ManualRestart.set();
        TestLogic.restart();
        if (val > 2000) {
            Notifications.add("Stay safe and take breaks!", 0);
        }
        else if (val == 0) {
            Notifications.add("Infinite words! Make sure to use Bail Out from the command line to save your result.", 0, 7);
        }
    }
    else {
        Notifications.add("Custom word amount must be at least 1", 0);
    }
    hide();
}
$("#customWordAmountPopupWrapper").on("click", (e) => {
    if ($(e.target).attr("id") === "customWordAmountPopupWrapper") {
        hide();
    }
});
$("#customWordAmountPopup input").on("keypress", (e) => {
    if (e.key === "Enter") {
        apply();
    }
});
$("#customWordAmountPopup .button").on("click", () => {
    apply();
});
$(document).on("click", "#top .config .wordCount .text-button", (e) => {
    const wrd = $(e.currentTarget).attr("wordCount");
    if (wrd == "custom") {
        show();
    }
});
$(document).on("keydown", (event) => {
    if (event.key === "Escape" &&
        !$("#customWordAmountPopupWrapper").hasClass("hidden")) {
        hide();
        event.preventDefault();
    }
});


/***/ }),

/***/ "./src/scripts/popups/edit-preset-popup.ts":
/*!*************************************************!*\
  !*** ./src/scripts/popups/edit-preset-popup.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.show = void 0;
const ape_1 = __importDefault(__webpack_require__(/*! ../ape */ "./src/scripts/ape/index.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const Config = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const Loader = __importStar(__webpack_require__(/*! ../elements/loader */ "./src/scripts/elements/loader.ts"));
const Settings = __importStar(__webpack_require__(/*! ../pages/settings */ "./src/scripts/pages/settings.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
function show(action, id, name) {
    if (action === "add") {
        $("#presetWrapper #presetEdit").attr("action", "add");
        $("#presetWrapper #presetEdit .title").html("Create new preset");
        $("#presetWrapper #presetEdit .button").html(`<i class="fas fa-plus"></i>`);
        $("#presetWrapper #presetEdit input.text").val("");
        $("#presetWrapper #presetEdit input.text").removeClass("hidden");
        $("#presetWrapper #presetEdit label").addClass("hidden");
    }
    else if (action === "edit" && id && name) {
        $("#presetWrapper #presetEdit").attr("action", "edit");
        $("#presetWrapper #presetEdit").attr("presetid", id);
        $("#presetWrapper #presetEdit .title").html("Edit preset");
        $("#presetWrapper #presetEdit .button").html(`<i class="fas fa-pen"></i>`);
        $("#presetWrapper #presetEdit input.text").val(name);
        $("#presetWrapper #presetEdit input.text").removeClass("hidden");
        $("#presetWrapper #presetEdit label input").prop("checked", false);
        $("#presetWrapper #presetEdit label").removeClass("hidden");
    }
    else if (action === "remove" && id) {
        $("#presetWrapper #presetEdit").attr("action", "remove");
        $("#presetWrapper #presetEdit").attr("presetid", id);
        $("#presetWrapper #presetEdit .title").html("Remove preset " + name);
        $("#presetWrapper #presetEdit .button").html(`<i class="fas fa-check"></i>`);
        $("#presetWrapper #presetEdit input.text").addClass("hidden");
        $("#presetWrapper #presetEdit label").addClass("hidden");
    }
    if ($("#presetWrapper").hasClass("hidden")) {
        $("#presetWrapper")
            .stop(true, true)
            .css("opacity", 0)
            .removeClass("hidden")
            .animate({ opacity: 1 }, 100, () => {
            $("#presetWrapper #presetEdit input").trigger("focus");
        });
    }
}
exports.show = show;
function hide() {
    if (!$("#presetWrapper").hasClass("hidden")) {
        $("#presetWrapper #presetEdit").attr("action", "");
        $("#presetWrapper #presetEdit").attr("tagid", "");
        $("#presetWrapper")
            .stop(true, true)
            .css("opacity", 1)
            .animate({
            opacity: 0,
        }, 100, () => {
            $("#presetWrapper").addClass("hidden");
        });
    }
}
function apply() {
    return __awaiter(this, void 0, void 0, function* () {
        const action = $("#presetWrapper #presetEdit").attr("action");
        const presetName = $("#presetWrapper #presetEdit input").val();
        const presetId = $("#presetWrapper #presetEdit").attr("presetId");
        const updateConfig = $("#presetWrapper #presetEdit label input").prop("checked");
        let configChanges = {};
        if ((updateConfig && action === "edit") || action === "add") {
            configChanges = Config.getConfigChanges();
            const tags = DB.getSnapshot().tags || [];
            const activeTagIds = tags
                .filter((tag) => tag.active)
                .map((tag) => tag._id);
            configChanges.tags = activeTagIds;
        }
        const snapshotPresets = DB.getSnapshot().presets || [];
        hide();
        Loader.show();
        if (action === "add") {
            const response = yield ape_1.default.presets.add(presetName, configChanges);
            if (response.status !== 200) {
                Notifications.add("Failed to add preset: " + response.message, -1);
            }
            else {
                Notifications.add("Preset added", 1, 2);
                snapshotPresets.push({
                    name: presetName,
                    config: configChanges,
                    _id: response.data.presetId,
                });
            }
        }
        else if (action === "edit") {
            const response = yield ape_1.default.presets.edit(presetId, presetName, configChanges);
            if (response.status !== 200) {
                Notifications.add("Failed to edit preset: " + response.message, -1);
            }
            else {
                Notifications.add("Preset updated", 1);
                const preset = snapshotPresets.filter((preset) => preset._id === presetId)[0];
                preset.name = presetName;
                if (updateConfig) {
                    preset.config = configChanges;
                }
            }
        }
        else if (action === "remove") {
            const response = yield ape_1.default.presets.delete(presetId);
            if (response.status !== 200) {
                Notifications.add("Failed to remove preset: " + response.message, -1);
            }
            else {
                Notifications.add("Preset removed", 1);
                snapshotPresets.forEach((preset, index) => {
                    if (preset._id === presetId) {
                        snapshotPresets.splice(index, 1);
                    }
                });
            }
        }
        Settings.update();
        Loader.hide();
    });
}
$("#presetWrapper").on("click", (e) => {
    if ($(e.target).attr("id") === "presetWrapper") {
        hide();
    }
});
$("#presetWrapper #presetEdit .button").on("click", () => {
    apply();
});
$("#presetWrapper #presetEdit input").on("keypress", (e) => {
    if (e.key === "Enter") {
        apply();
    }
});
$(document).on("click", ".pageSettings .section.presets .addPresetButton", () => {
    show("add");
});
$(document).on("click", ".pageSettings .section.presets .editButton", (e) => {
    const presetid = $(e.currentTarget).parent(".preset").attr("id");
    const name = $(e.currentTarget).siblings(".button").children(".title").text();
    show("edit", presetid, name);
});
$(document).on("click", ".pageSettings .section.presets .removeButton", (e) => {
    const presetid = $(e.currentTarget).parent(".preset").attr("id");
    const name = $(e.currentTarget).siblings(".button").children(".title").text();
    show("remove", presetid, name);
});


/***/ }),

/***/ "./src/scripts/popups/edit-tags-popup.ts":
/*!***********************************************!*\
  !*** ./src/scripts/popups/edit-tags-popup.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.show = void 0;
const ape_1 = __importDefault(__webpack_require__(/*! ../ape */ "./src/scripts/ape/index.ts"));
const ResultFilters = __importStar(__webpack_require__(/*! ../account/result-filters */ "./src/scripts/account/result-filters.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const Loader = __importStar(__webpack_require__(/*! ../elements/loader */ "./src/scripts/elements/loader.ts"));
const Settings = __importStar(__webpack_require__(/*! ../pages/settings */ "./src/scripts/pages/settings.ts"));
const ResultTagsPopup = __importStar(__webpack_require__(/*! ./result-tags-popup */ "./src/scripts/popups/result-tags-popup.ts"));
function show(action, id, name) {
    if (action === "add") {
        $("#tagsWrapper #tagsEdit").attr("action", "add");
        $("#tagsWrapper #tagsEdit .title").html("Add new tag");
        $("#tagsWrapper #tagsEdit .button").html(`<i class="fas fa-plus"></i>`);
        $("#tagsWrapper #tagsEdit input").val("");
        $("#tagsWrapper #tagsEdit input").removeClass("hidden");
    }
    else if (action === "edit" && id && name) {
        $("#tagsWrapper #tagsEdit").attr("action", "edit");
        $("#tagsWrapper #tagsEdit").attr("tagid", id);
        $("#tagsWrapper #tagsEdit .title").html("Edit tag name");
        $("#tagsWrapper #tagsEdit .button").html(`<i class="fas fa-pen"></i>`);
        $("#tagsWrapper #tagsEdit input").val(name);
        $("#tagsWrapper #tagsEdit input").removeClass("hidden");
    }
    else if (action === "remove" && id && name) {
        $("#tagsWrapper #tagsEdit").attr("action", "remove");
        $("#tagsWrapper #tagsEdit").attr("tagid", id);
        $("#tagsWrapper #tagsEdit .title").html("Remove tag " + name);
        $("#tagsWrapper #tagsEdit .button").html(`<i class="fas fa-check"></i>`);
        $("#tagsWrapper #tagsEdit input").addClass("hidden");
    }
    else if (action === "clearPb" && id && name) {
        $("#tagsWrapper #tagsEdit").attr("action", "clearPb");
        $("#tagsWrapper #tagsEdit").attr("tagid", id);
        $("#tagsWrapper #tagsEdit .title").html("Clear PB for tag " + name);
        $("#tagsWrapper #tagsEdit .button").html(`<i class="fas fa-check"></i>`);
        $("#tagsWrapper #tagsEdit input").addClass("hidden");
    }
    if ($("#tagsWrapper").hasClass("hidden")) {
        $("#tagsWrapper")
            .stop(true, true)
            .css("opacity", 0)
            .removeClass("hidden")
            .animate({ opacity: 1 }, 100, () => {
            $("#tagsWrapper #tagsEdit input").trigger("focus");
        });
    }
}
exports.show = show;
function hide() {
    if (!$("#tagsWrapper").hasClass("hidden")) {
        $("#tagsWrapper #tagsEdit").attr("action", "");
        $("#tagsWrapper #tagsEdit").attr("tagid", "");
        $("#tagsWrapper")
            .stop(true, true)
            .css("opacity", 1)
            .animate({
            opacity: 0,
        }, 100, () => {
            $("#tagsWrapper").addClass("hidden");
        });
    }
}
function apply() {
    var _a, _b, _c, _d;
    return __awaiter(this, void 0, void 0, function* () {
        const action = $("#tagsWrapper #tagsEdit").attr("action");
        const tagName = $("#tagsWrapper #tagsEdit input").val();
        const tagId = $("#tagsWrapper #tagsEdit").attr("tagid");
        hide();
        Loader.show();
        if (action === "add") {
            const response = yield ape_1.default.users.createTag(tagName);
            if (response.status !== 200) {
                Notifications.add("Failed to add tag: " + response.message, -1);
            }
            else {
                Notifications.add("Tag added", 1);
                (_a = DB.getSnapshot().tags) === null || _a === void 0 ? void 0 : _a.push({
                    name: response.data.name,
                    _id: response.data._id,
                });
                ResultTagsPopup.updateButtons();
                Settings.update();
                ResultFilters.updateTags();
            }
        }
        else if (action === "edit") {
            const response = yield ape_1.default.users.editTag(tagId, tagName);
            if (response.status !== 200) {
                Notifications.add("Failed to edit tag: " + response.message, -1);
            }
            else {
                Notifications.add("Tag updated", 1);
                (_b = DB.getSnapshot().tags) === null || _b === void 0 ? void 0 : _b.forEach((tag) => {
                    if (tag._id === tagId) {
                        tag.name = tagName;
                    }
                });
                ResultTagsPopup.updateButtons();
                Settings.update();
                ResultFilters.updateTags();
            }
        }
        else if (action === "remove") {
            const response = yield ape_1.default.users.deleteTag(tagId);
            if (response.status !== 200) {
                Notifications.add("Failed to remove tag: " + response.message, -1);
            }
            else {
                Notifications.add("Tag removed", 1);
                (_c = DB.getSnapshot().tags) === null || _c === void 0 ? void 0 : _c.forEach((tag, index) => {
                    var _a;
                    if (tag._id === tagId) {
                        (_a = DB.getSnapshot().tags) === null || _a === void 0 ? void 0 : _a.splice(index, 1);
                    }
                });
                ResultTagsPopup.updateButtons();
                Settings.update();
                ResultFilters.updateTags();
            }
        }
        else if (action === "clearPb") {
            const response = yield ape_1.default.users.deleteTagPersonalBest(tagId);
            if (response.status !== 200) {
                Notifications.add("Failed to clear tag pb: " + response.message, -1);
            }
            else {
                Notifications.add("Tag PB cleared", 1);
                (_d = DB.getSnapshot().tags) === null || _d === void 0 ? void 0 : _d.forEach((tag) => {
                    if (tag._id === tagId) {
                        tag.personalBests = {
                            time: {},
                            words: {},
                            custom: { custom: [] },
                            zen: { zen: [] },
                            quote: { custom: [] },
                        };
                    }
                });
                ResultTagsPopup.updateButtons();
                Settings.update();
                ResultFilters.updateTags();
            }
        }
        Loader.hide();
    });
}
$("#tagsWrapper").on("click", (e) => {
    if ($(e.target).attr("id") === "tagsWrapper") {
        hide();
    }
});
$("#tagsWrapper #tagsEdit .button").on("click", () => {
    apply();
});
$("#tagsWrapper #tagsEdit input").on("keypress", (e) => {
    if (e.key === "Enter") {
        apply();
    }
});
$(document).on("click", ".pageSettings .section.tags .addTagButton", () => {
    show("add");
});
$(document).on("click", ".pageSettings .section.tags .tagsList .tag .editButton", (e) => {
    const tagid = $(e.currentTarget).parent(".tag").attr("id");
    const name = $(e.currentTarget)
        .siblings(".tagButton")
        .children(".title")
        .text();
    show("edit", tagid, name);
});
$(document).on("click", ".pageSettings .section.tags .tagsList .tag .clearPbButton", (e) => {
    const tagid = $(e.currentTarget).parent(".tag").attr("id");
    const name = $(e.currentTarget)
        .siblings(".tagButton")
        .children(".title")
        .text();
    show("clearPb", tagid, name);
});
$(document).on("click", ".pageSettings .section.tags .tagsList .tag .removeButton", (e) => {
    const tagid = $(e.currentTarget).parent(".tag").attr("id");
    const name = $(e.currentTarget)
        .siblings(".tagButton")
        .children(".title")
        .text();
    show("remove", tagid, name);
});


/***/ }),

/***/ "./src/scripts/popups/import-export-settings-popup.ts":
/*!************************************************************!*\
  !*** ./src/scripts/popups/import-export-settings-popup.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.show = void 0;
const UpdateConfig = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
function show(mode, config) {
    if ($("#settingsImportWrapper").hasClass("hidden")) {
        $("#settingsImportWrapper").attr("mode", mode);
        if (mode === "export") {
            $("#settingsImportWrapper .button").addClass("hidden");
            $("#settingsImportWrapper input").val(config !== null && config !== void 0 ? config : "");
        }
        else if (mode === "import") {
            $("#settingsImportWrapper .button").removeClass("hidden");
        }
        $("#settingsImportWrapper")
            .stop(true, true)
            .css("opacity", 0)
            .removeClass("hidden")
            .animate({ opacity: 1 }, 100, () => {
            $("#settingsImportWrapper input").trigger("focus");
            $("#settingsImportWrapper input").select();
            $("#settingsImportWrapper input").trigger("focus");
        });
    }
}
exports.show = show;
function hide() {
    if (!$("#settingsImportWrapper").hasClass("hidden")) {
        if ($("#settingsImportWrapper input").val() !== "") {
            try {
                UpdateConfig.apply(JSON.parse($("#settingsImportWrapper input").val()));
            }
            catch (e) {
                Notifications.add("An error occured while importing settings: " + e, -1);
            }
            UpdateConfig.saveFullConfigToLocalStorage();
        }
        $("#settingsImportWrapper")
            .stop(true, true)
            .css("opacity", 1)
            .animate({ opacity: 0 }, 100, () => {
            $("#settingsImportWrapper").addClass("hidden");
        });
    }
}
$("#settingsImport .button").on("click", () => {
    hide();
});
$("#settingsImportWrapper").on("click", (e) => {
    if ($(e.target).attr("id") === "settingsImportWrapper") {
        hide();
    }
});


/***/ }),

/***/ "./src/scripts/popups/mobile-test-config-popup.ts":
/*!********************************************************!*\
  !*** ./src/scripts/popups/mobile-test-config-popup.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.update = void 0;
const TestLogic = __importStar(__webpack_require__(/*! ../test/test-logic */ "./src/scripts/test/test-logic.ts"));
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const UpdateConfig = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const ManualRestart = __importStar(__webpack_require__(/*! ../test/manual-restart-tracker */ "./src/scripts/test/manual-restart-tracker.ts"));
const CustomWordAmountPopup = __importStar(__webpack_require__(/*! ./custom-word-amount-popup */ "./src/scripts/popups/custom-word-amount-popup.ts"));
const CustomTestDurationPopup = __importStar(__webpack_require__(/*! ./custom-test-duration-popup */ "./src/scripts/popups/custom-test-duration-popup.ts"));
const QuoteSearchPopup = __importStar(__webpack_require__(/*! ./quote-search-popup */ "./src/scripts/popups/quote-search-popup.ts"));
const CustomTextPopup = __importStar(__webpack_require__(/*! ./custom-text-popup */ "./src/scripts/popups/custom-text-popup.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const el = $("#mobileTestConfigPopup");
function update() {
    el.find(".button").removeClass("active");
    el.find(`.modeGroup .button[mode='${config_1.default.mode}']`).addClass("active");
    el.find(".timeGroup").addClass("hidden");
    el.find(".wordsGroup").addClass("hidden");
    el.find(".quoteGroup").addClass("hidden");
    el.find(".customGroup").addClass("hidden");
    el.find(`.${config_1.default.mode}Group`).removeClass("hidden");
    if (config_1.default.punctuation) {
        el.find(".punctuation").addClass("active");
    }
    else {
        el.find(".punctuation").removeClass("active");
    }
    if (config_1.default.numbers) {
        el.find(".numbers").addClass("active");
    }
    else {
        el.find(".numbers").removeClass("active");
    }
    if (config_1.default.mode === "time") {
        el.find(`.timeGroup .button[time='${config_1.default.time}']`).addClass("active");
        el.find(".punctuation").removeClass("disabled");
        el.find(".numbers").removeClass("disabled");
    }
    else if (config_1.default.mode === "words") {
        el.find(`.wordsGroup .button[words='${config_1.default.words}']`).addClass("active");
        el.find(".punctuation").removeClass("disabled");
        el.find(".numbers").removeClass("disabled");
    }
    else if (config_1.default.mode === "quote") {
        el.find(`.quoteGroup .button[quote='${config_1.default.quoteLength}']`).addClass("active");
        el.find(".punctuation").addClass("disabled");
        el.find(".numbers").addClass("disabled");
    }
    else if (config_1.default.mode === "zen") {
        el.find(".punctuation").addClass("disabled");
        el.find(".numbers").addClass("disabled");
    }
    else if (config_1.default.mode === "custom") {
        el.find(".punctuation").removeClass("disabled");
        el.find(".numbers").removeClass("disabled");
    }
}
exports.update = update;
function showPopup() {
    if ($("#mobileTestConfigPopupWrapper").hasClass("hidden")) {
        update();
        $("#mobileTestConfigPopupWrapper")
            .stop(true, true)
            .css("opacity", 0)
            .removeClass("hidden")
            .animate({ opacity: 1 }, 100);
    }
}
function hidePopup() {
    if (!$("#mobileTestConfigPopupWrapper").hasClass("hidden")) {
        $("#mobileTestConfigPopupWrapper")
            .stop(true, true)
            .css("opacity", 1)
            .animate({
            opacity: 0,
        }, 100, () => {
            $("#mobileTestConfigPopupWrapper").addClass("hidden");
        });
    }
}
$("#mobileTestConfigPopupWrapper").on("click", (e) => {
    if ($(e.target).attr("id") === "mobileTestConfigPopupWrapper") {
        hidePopup();
    }
});
$("#top .mobileConfig").on("click", () => {
    showPopup();
});
el.find(".wordsGroup .button").on("click", (e) => {
    const wrd = $(e.currentTarget).attr("words");
    if (wrd == "custom") {
        hidePopup();
        CustomWordAmountPopup.show();
    }
    else if (wrd !== undefined) {
        const wrdNum = parseInt(wrd);
        UpdateConfig.setWordCount(wrdNum);
        ManualRestart.set();
        TestLogic.restart();
    }
});
el.find(".timeGroup .button").on("click", (e) => {
    const time = $(e.currentTarget).attr("time");
    if (time == "custom") {
        hidePopup();
        CustomTestDurationPopup.show();
    }
    else if (time !== undefined) {
        const timeNum = parseInt(time);
        UpdateConfig.setTimeConfig(timeNum);
        ManualRestart.set();
        TestLogic.restart();
    }
});
el.find(".quoteGroup .button").on("click", (e) => {
    var _a;
    let len = ((_a = $(e.currentTarget).attr("quote")) !== null && _a !== void 0 ? _a : 0);
    if (len == -2) {
        // UpdateConfig.setQuoteLength(-2, false, e.shiftKey);
        hidePopup();
        QuoteSearchPopup.show();
    }
    else {
        if (len == -1) {
            len = [0, 1, 2, 3];
        }
        UpdateConfig.setQuoteLength(len, false, e.shiftKey);
        ManualRestart.set();
        TestLogic.restart();
    }
});
el.find(".customChange").on("click", () => {
    hidePopup();
    CustomTextPopup.show();
});
el.find(".punctuation").on("click", () => {
    UpdateConfig.setPunctuation(!config_1.default.punctuation);
    ManualRestart.set();
    TestLogic.restart();
});
el.find(".numbers").on("click", () => {
    UpdateConfig.setNumbers(!config_1.default.numbers);
    ManualRestart.set();
    TestLogic.restart();
});
el.find(".modeGroup .button").on("click", (e) => {
    if ($(e.currentTarget).hasClass("active"))
        return;
    const mode = $(e.currentTarget).attr("mode");
    UpdateConfig.setMode(mode);
    ManualRestart.set();
    TestLogic.restart();
});
$("#mobileTestConfigPopup .button").on("click", () => {
    // hidePopup();
    update();
});
ConfigEvent.subscribe((eventKey) => {
    if (eventKey === "mode")
        update();
});


/***/ }),

/***/ "./src/scripts/popups/pb-tables-popup.ts":
/*!***********************************************!*\
  !*** ./src/scripts/popups/pb-tables-popup.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const format_1 = __importDefault(__webpack_require__(/*! date-fns/format */ "./node_modules/date-fns/esm/format/index.js"));
function update(mode) {
    $("#pbTablesPopup table tbody").empty();
    $($("#pbTablesPopup table thead tr td")[0]).text(mode);
    const snapshot = DB.getSnapshot();
    const allmode2 = (snapshot.personalBests === undefined
        ? undefined
        : snapshot.personalBests[mode]);
    if (allmode2 === undefined)
        return;
    const list = [];
    Object.keys(allmode2).forEach(function (key) {
        let pbs = allmode2[key];
        pbs = pbs.sort(function (a, b) {
            return b.wpm - a.wpm;
            // if (a.difficulty === b.difficulty) {
            //   return (a.language < b.language ? -1 : 1);
            // }
            // return (a.difficulty < b.difficulty ? -1 : 1)
        });
        pbs.forEach(function (pb) {
            pb.mode2 = key;
            list.push(pb);
        });
    });
    let mode2memory;
    list.forEach((pb) => {
        let dateText = `-<br><span class="sub">-</span>`;
        const date = new Date(pb.timestamp);
        if (pb.timestamp) {
            dateText =
                (0, format_1.default)(date, "dd MMM yyyy") +
                    "<br><div class='sub'>" +
                    (0, format_1.default)(date, "HH:mm") +
                    "</div>";
        }
        $("#pbTablesPopup table tbody").append(`
      <tr>
        <td>${mode2memory === pb.mode2 ? "" : pb.mode2}</td>
        <td>
          ${pb.wpm}
          <br />
          <span class="sub">${pb.acc ? pb.acc + "%" : "-"}</span>
        </td>
        <td>
          ${pb.raw ? pb.raw : "-"}
          <br />
          <span class="sub">${pb.consistency ? pb.consistency + "%" : "-"}</span>
        </td>
        <td>${pb.difficulty}</td>
        <td>${pb.language ? pb.language.replace(/_/g, " ") : "-"}</td>
        <td>${pb.punctuation ? '<i class="fas fa-check"></i>' : ""}</td>
        <td>${pb.lazyMode ? '<i class="fas fa-check"></i>' : ""}</td>
        <td>${dateText}</td>
      </tr>
    `);
        mode2memory = pb.mode2;
    });
}
function show(mode) {
    if ($("#pbTablesPopupWrapper").hasClass("hidden")) {
        update(mode);
        $("#pbTablesPopup .title").text(`All ${mode} personal bests`);
        $("#pbTablesPopupWrapper")
            .stop(true, true)
            .css("opacity", 0)
            .removeClass("hidden")
            .animate({ opacity: 1 }, 100);
    }
}
function hide() {
    if (!$("#pbTablesPopupWrapper").hasClass("hidden")) {
        $("#pbTablesPopupWrapper")
            .stop(true, true)
            .css("opacity", 1)
            .animate({
            opacity: 0,
        }, 100, () => {
            $("#pbTablesPopupWrapper").addClass("hidden");
            $("#pbTablesPopup table tbody").empty();
        });
    }
}
$("#pbTablesPopupWrapper").on("click", (e) => {
    if ($(e.target).attr("id") === "pbTablesPopupWrapper") {
        hide();
    }
});
$(".pageAccount .button.showAllTimePbs").on("click", () => {
    show("time");
});
$(".pageAccount .button.showAllWordsPbs").on("click", () => {
    show("words");
});


/***/ }),

/***/ "./src/scripts/popups/quote-approve-popup.ts":
/*!***************************************************!*\
  !*** ./src/scripts/popups/quote-approve-popup.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hide = exports.show = void 0;
const ape_1 = __importDefault(__webpack_require__(/*! ../ape */ "./src/scripts/ape/index.ts"));
const Loader = __importStar(__webpack_require__(/*! ../elements/loader */ "./src/scripts/elements/loader.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const format_1 = __importDefault(__webpack_require__(/*! date-fns/format */ "./node_modules/date-fns/esm/format/index.js"));
let quotes = [];
function updateList() {
    $("#quoteApprovePopupWrapper .quotes").empty();
    quotes.forEach((quote, index) => {
        const quoteEl = $(`
      <div class="quote" id="${index}" dbid="${quote._id}">
        <textarea class="text">${quote.text}</textarea>
        <input type="text" class="source" placeholder="Source" value="${quote.source}">
        <div class="buttons">
          <div class="icon-button disabled undo" aria-label="Undo changes" data-balloon-pos="left"><i class="fas fa-fw fa-undo-alt"></i></div>
          <div class="icon-button refuse" aria-label="Refuse quote" data-balloon-pos="left"><i class="fas fa-fw fa-times"></i></div>
          <div class="icon-button approve" aria-label="Approve quote" data-balloon-pos="left"><i class="fas fa-fw fa-check"></i></div>
          <div class="icon-button edit hidden" aria-label="Edit and approve quote" data-balloon-pos="left"><i class="fas fa-fw fa-pen"></i></div>
        </div>
        <div class="bottom">
          <div class="length ${quote.text.length < 60 ? "red" : ""}">Quote length: ${quote.text.length}</div>
          <div class="language">Language: ${quote.language}</div>
          <div class="timestamp">Submitted on: ${(0, format_1.default)(new Date(quote.timestamp), "dd MMM yyyy HH:mm")}</div>
        </div>
      </div>
    `);
        $("#quoteApprovePopupWrapper .quotes").append(quoteEl);
    });
}
function updateQuoteLength(index) {
    var _a;
    const len = (_a = $(`#quoteApprovePopup .quote[id=${index}] .text`).val()) === null || _a === void 0 ? void 0 : _a.length;
    $(`#quoteApprovePopup .quote[id=${index}] .length`).text("Quote length: " + len);
    if (len < 60) {
        $(`#quoteApprovePopup .quote[id=${index}] .length`).addClass("red");
    }
    else {
        $(`#quoteApprovePopup .quote[id=${index}] .length`).removeClass("red");
    }
}
function getQuotes() {
    return __awaiter(this, void 0, void 0, function* () {
        Loader.show();
        const response = yield ape_1.default.quotes.get();
        Loader.hide();
        if (response.status !== 200) {
            return Notifications.add("Failed to get new quotes: " + response.message, -1);
        }
        quotes = response.data;
        updateList();
    });
}
function show(noAnim = false) {
    return __awaiter(this, void 0, void 0, function* () {
        if ($("#quoteApprovePopupWrapper").hasClass("hidden")) {
            quotes = [];
            getQuotes();
            $("#quoteApprovePopupWrapper")
                .stop(true, true)
                .css("opacity", 0)
                .removeClass("hidden")
                .animate({ opacity: 1 }, noAnim ? 0 : 100);
        }
    });
}
exports.show = show;
function hide() {
    if (!$("#quoteApprovePopupWrapper").hasClass("hidden")) {
        $("#quoteApprovePopupWrapper")
            .stop(true, true)
            .css("opacity", 1)
            .animate({
            opacity: 0,
        }, 100, () => {
            $("#quoteApprovePopupWrapper").addClass("hidden");
            $("#quoteApprovePopupWrapper .quotes").empty();
        });
    }
}
exports.hide = hide;
function resetButtons(target) {
    $(target).closest(".quote").find(".icon-button").removeClass("disabled");
    if ($(target).closest(".quote").find(".edit").hasClass("hidden")) {
        $(target).closest(".quote").find(".undo").addClass("disabled");
    }
}
$("#quoteApprovePopupWrapper").on("mousedown", (e) => {
    if ($(e.target).attr("id") === "quoteApprovePopupWrapper") {
        hide();
    }
});
$("#quoteApprovePopupWrapper .button.refreshList").on("click", () => {
    $("#quoteApprovePopupWrapper .quotes").empty();
    getQuotes();
});
$(document).on("click", "#quoteApprovePopup .quote .undo", (e) => __awaiter(void 0, void 0, void 0, function* () {
    const index = parseInt($(e.target).closest(".quote").attr("id"));
    $(`#quoteApprovePopup .quote[id=${index}] .text`).val(quotes[index].text);
    $(`#quoteApprovePopup .quote[id=${index}] .source`).val(quotes[index].source);
    $(`#quoteApprovePopup .quote[id=${index}] .undo`).addClass("disabled");
    $(`#quoteApprovePopup .quote[id=${index}] .approve`).removeClass("hidden");
    $(`#quoteApprovePopup .quote[id=${index}] .edit`).addClass("hidden");
    updateQuoteLength(index);
}));
$(document).on("click", "#quoteApprovePopup .quote .approve", (e) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (!confirm("Are you sure?"))
        return;
    const index = parseInt($(e.target).closest(".quote").attr("id"));
    const dbid = $(e.target).closest(".quote").attr("dbid");
    const target = e.target;
    $(target).closest(".quote").find(".icon-button").addClass("disabled");
    $(target).closest(".quote").find("textarea, input").prop("disabled", true);
    Loader.show();
    const response = yield ape_1.default.quotes.approveSubmission(dbid);
    Loader.hide();
    if (response.status !== 200) {
        resetButtons(target);
        $(target).closest(".quote").find("textarea, input").prop("disabled", false);
        return Notifications.add("Failed to approve quote: " + response.message, -1);
    }
    Notifications.add((_a = "Quote approved. " + response.message) !== null && _a !== void 0 ? _a : "", 1);
    quotes.splice(index, 1);
    updateList();
}));
$(document).on("click", "#quoteApprovePopup .quote .refuse", (e) => __awaiter(void 0, void 0, void 0, function* () {
    if (!confirm("Are you sure?"))
        return;
    const index = parseInt($(e.target).closest(".quote").attr("id"));
    const dbid = $(e.target).closest(".quote").attr("dbid");
    const target = e.target;
    $(target).closest(".quote").find(".icon-button").addClass("disabled");
    $(target).closest(".quote").find("textarea, input").prop("disabled", true);
    Loader.show();
    const response = yield ape_1.default.quotes.rejectSubmission(dbid);
    Loader.hide();
    if (response.status !== 200) {
        resetButtons(target);
        $(target).closest(".quote").find("textarea, input").prop("disabled", false);
        return Notifications.add("Failed to refuse quote: " + response.message, -1);
    }
    Notifications.add("Quote refused.", 1);
    quotes.splice(index, 1);
    updateList();
}));
$(document).on("click", "#quoteApprovePopup .quote .edit", (e) => __awaiter(void 0, void 0, void 0, function* () {
    var _b;
    if (!confirm("Are you sure?"))
        return;
    const index = parseInt($(e.target).closest(".quote").attr("id"));
    const dbid = $(e.target).closest(".quote").attr("dbid");
    const editText = $(`#quoteApprovePopup .quote[id=${index}] .text`).val();
    const editSource = $(`#quoteApprovePopup .quote[id=${index}] .source`).val();
    const target = e.target;
    $(target).closest(".quote").find(".icon-button").addClass("disabled");
    $(target).closest(".quote").find("textarea, input").prop("disabled", true);
    Loader.show();
    const response = yield ape_1.default.quotes.approveSubmission(dbid, editText, editSource);
    Loader.hide();
    if (response.status !== 200) {
        resetButtons(target);
        $(target).closest(".quote").find("textarea, input").prop("disabled", false);
        return Notifications.add("Failed to approve quote: " + response.message, -1);
    }
    Notifications.add((_b = "Quote edited and approved. " + response.message) !== null && _b !== void 0 ? _b : "", 1);
    quotes.splice(index, 1);
    updateList();
}));
$(document).on("input", "#quoteApprovePopup .quote .text", (e) => __awaiter(void 0, void 0, void 0, function* () {
    const index = parseInt($(e.target).closest(".quote").attr("id"));
    $(`#quoteApprovePopup .quote[id=${index}] .undo`).removeClass("disabled");
    $(`#quoteApprovePopup .quote[id=${index}] .approve`).addClass("hidden");
    $(`#quoteApprovePopup .quote[id=${index}] .edit`).removeClass("hidden");
    updateQuoteLength(index);
}));
$(document).on("input", "#quoteApprovePopup .quote .source", (e) => __awaiter(void 0, void 0, void 0, function* () {
    const index = parseInt($(e.target).closest(".quote").attr("id"));
    $(`#quoteApprovePopup .quote[id=${index}] .undo`).removeClass("disabled");
    $(`#quoteApprovePopup .quote[id=${index}] .approve`).addClass("hidden");
    $(`#quoteApprovePopup .quote[id=${index}] .edit`).removeClass("hidden");
}));


/***/ }),

/***/ "./src/scripts/popups/quote-rate-popup.ts":
/*!************************************************!*\
  !*** ./src/scripts/popups/quote-rate-popup.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.clearQuoteStats = exports.show = exports.getQuoteStats = void 0;
const ape_1 = __importDefault(__webpack_require__(/*! ../ape */ "./src/scripts/ape/index.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const TestWords = __importStar(__webpack_require__(/*! ../test/test-words */ "./src/scripts/test/test-words.ts"));
const Loader = __importStar(__webpack_require__(/*! ../elements/loader */ "./src/scripts/elements/loader.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
let rating = 0;
let quoteStats = null;
let currentQuote = null;
function reset() {
    $(`#quoteRatePopup .quote .text`).text("-");
    $(`#quoteRatePopup .quote .source .val`).text("-");
    $(`#quoteRatePopup .quote .id .val`).text("-");
    $(`#quoteRatePopup .quote .length .val`).text("-");
    $("#quoteRatePopup .ratingCount .val").text("-");
    $("#quoteRatePopup .ratingAverage .val").text("-");
}
function getRatingAverage(quoteStats) {
    if (!quoteStats.totalRating || !quoteStats.ratings) {
        return 0;
    }
    return Math.round((quoteStats.totalRating / quoteStats.ratings) * 10) / 10;
}
function getQuoteStats(quote) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!quote) {
            return;
        }
        currentQuote = quote;
        const response = yield ape_1.default.quotes.getRating(currentQuote);
        Loader.hide();
        if (response.status !== 200) {
            Notifications.add("Failed to get quote ratings: " + response.message, -1);
            return;
        }
        if (!response.data) {
            return {};
        }
        quoteStats = response.data;
        if (quoteStats && !quoteStats.average) {
            quoteStats.average = getRatingAverage(quoteStats);
        }
        return quoteStats;
    });
}
exports.getQuoteStats = getQuoteStats;
function refreshStars(force) {
    const limit = force ? force : rating;
    $(`#quoteRatePopup .star`).removeClass("active");
    for (let i = 1; i <= limit; i++) {
        $(`#quoteRatePopup .star[rating=${i}]`).addClass("active");
    }
}
function updateRatingStats() {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        if (!quoteStats)
            yield getQuoteStats();
        $("#quoteRatePopup .ratingCount .val").text((_a = quoteStats === null || quoteStats === void 0 ? void 0 : quoteStats.ratings) !== null && _a !== void 0 ? _a : "0");
        $("#quoteRatePopup .ratingAverage .val").text((_c = (_b = quoteStats === null || quoteStats === void 0 ? void 0 : quoteStats.average) === null || _b === void 0 ? void 0 : _b.toFixed(1)) !== null && _c !== void 0 ? _c : "-");
    });
}
function updateData() {
    if (!currentQuote)
        return;
    let lengthDesc;
    if (currentQuote.group == 0) {
        lengthDesc = "short";
    }
    else if (currentQuote.group == 1) {
        lengthDesc = "medium";
    }
    else if (currentQuote.group == 2) {
        lengthDesc = "long";
    }
    else if (currentQuote.group == 3) {
        lengthDesc = "thicc";
    }
    $(`#quoteRatePopup .quote .text`).text(currentQuote.text);
    $(`#quoteRatePopup .quote .source .val`).text(currentQuote.source);
    $(`#quoteRatePopup .quote .id .val`).text(currentQuote.id);
    $(`#quoteRatePopup .quote .length .val`).text(lengthDesc);
    updateRatingStats();
}
function show(quote, shouldReset = true) {
    var _a, _b;
    if ($("#quoteRatePopupWrapper").hasClass("hidden")) {
        if (shouldReset) {
            reset();
        }
        currentQuote = quote;
        rating = 0;
        const snapshot = DB.getSnapshot();
        const alreadyRated = (_b = (_a = snapshot === null || snapshot === void 0 ? void 0 : snapshot.quoteRatings) === null || _a === void 0 ? void 0 : _a[currentQuote.language]) === null || _b === void 0 ? void 0 : _b[currentQuote.id];
        if (alreadyRated) {
            rating = alreadyRated;
        }
        refreshStars();
        updateData();
        $("#quoteRatePopupWrapper")
            .stop(true, true)
            .css("opacity", 0)
            .removeClass("hidden")
            .animate({ opacity: 1 }, 125);
    }
}
exports.show = show;
function hide() {
    if (!$("#quoteRatePopupWrapper").hasClass("hidden")) {
        $("#quoteRatePopupWrapper")
            .stop(true, true)
            .css("opacity", 1)
            .animate({
            opacity: 0,
        }, 100, () => {
            $("#quoteRatePopupWrapper").addClass("hidden");
        });
    }
}
function clearQuoteStats() {
    quoteStats = null;
}
exports.clearQuoteStats = clearQuoteStats;
function submit() {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        if (rating === 0) {
            return Notifications.add("Please select a rating");
        }
        if (!currentQuote) {
            return;
        }
        hide();
        const response = yield ape_1.default.quotes.addRating(currentQuote, rating);
        Loader.hide();
        if (response.status !== 200) {
            return Notifications.add("Failed to submit quote rating: " + response.message, -1);
        }
        const snapshot = DB.getSnapshot();
        const quoteRatings = (_a = snapshot.quoteRatings) !== null && _a !== void 0 ? _a : {};
        if ((_b = quoteRatings === null || quoteRatings === void 0 ? void 0 : quoteRatings[currentQuote.language]) === null || _b === void 0 ? void 0 : _b[currentQuote.id]) {
            const oldRating = quoteRatings[currentQuote.language][currentQuote.id];
            const diff = rating - oldRating;
            quoteRatings[currentQuote.language][currentQuote.id] = rating;
            quoteStats = {
                ratings: quoteStats === null || quoteStats === void 0 ? void 0 : quoteStats.ratings,
                totalRating: isNaN(quoteStats === null || quoteStats === void 0 ? void 0 : quoteStats.totalRating)
                    ? 0
                    : (quoteStats === null || quoteStats === void 0 ? void 0 : quoteStats.totalRating) + diff,
                quoteId: currentQuote.id,
                language: currentQuote.language,
            };
            Notifications.add("Rating updated", 1);
        }
        else {
            if (!quoteRatings[currentQuote.language]) {
                quoteRatings[currentQuote.language] = {};
            }
            quoteRatings[currentQuote.language][currentQuote.id] = rating;
            if ((quoteStats === null || quoteStats === void 0 ? void 0 : quoteStats.ratings) && quoteStats.totalRating) {
                quoteStats.ratings++;
                quoteStats.totalRating += rating;
            }
            else {
                quoteStats = {
                    ratings: 1,
                    totalRating: rating,
                    quoteId: currentQuote.id,
                    language: currentQuote.language,
                };
            }
            Notifications.add("Rating submitted", 1);
        }
        snapshot.quoteRatings = quoteRatings;
        DB.setSnapshot(snapshot);
        quoteStats.average = getRatingAverage(quoteStats);
        $(".pageTest #result #rateQuoteButton .rating").text((_c = quoteStats.average) === null || _c === void 0 ? void 0 : _c.toFixed(1));
        $(".pageTest #result #rateQuoteButton .icon").removeClass("far");
        $(".pageTest #result #rateQuoteButton .icon").addClass("fas");
    });
}
$("#quoteRatePopupWrapper").on("click", (e) => {
    if ($(e.target).attr("id") === "quoteRatePopupWrapper") {
        hide();
    }
});
$("#quoteRatePopup .stars .star").hover((e) => {
    const ratingHover = parseInt($(e.currentTarget).attr("rating"));
    refreshStars(ratingHover);
});
$("#quoteRatePopup .stars .star").on("click", (e) => {
    const ratingHover = parseInt($(e.currentTarget).attr("rating"));
    rating = ratingHover;
});
$("#quoteRatePopup .stars .star").mouseout(() => {
    $(`#quoteRatePopup .star`).removeClass("active");
    refreshStars();
});
$("#quoteRatePopup .submitButton").on("click", () => {
    submit();
});
$(".pageTest #rateQuoteButton").on("click", () => __awaiter(void 0, void 0, void 0, function* () {
    // TODO remove this when done with TestWords
    show(TestWords.randomQuote);
}));


/***/ }),

/***/ "./src/scripts/popups/quote-report-popup.ts":
/*!**************************************************!*\
  !*** ./src/scripts/popups/quote-report-popup.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hide = exports.show = void 0;
const ape_1 = __importDefault(__webpack_require__(/*! ../ape */ "./src/scripts/ape/index.ts"));
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const TestWords = __importStar(__webpack_require__(/*! ../test/test-words */ "./src/scripts/test/test-words.ts"));
const Loader = __importStar(__webpack_require__(/*! ../elements/loader */ "./src/scripts/elements/loader.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const quotes_controller_1 = __importDefault(__webpack_require__(/*! ../controllers/quotes-controller */ "./src/scripts/controllers/quotes-controller.ts"));
const CAPTCHA_ID = 1;
const state = {
    previousPopupShowCallback: undefined,
    quoteToReport: undefined,
};
const defaultOptions = {
    quoteId: -1,
    previousPopupShowCallback: () => {
        //
    },
    noAnim: false,
};
function show(options = defaultOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        if ($("#quoteReportPopupWrapper").hasClass("hidden")) {
            const { quoteId, previousPopupShowCallback, noAnim } = options;
            state.previousPopupShowCallback = previousPopupShowCallback;
            const { quotes } = yield quotes_controller_1.default.getQuotes(config_1.default.language);
            state.quoteToReport = quotes.find((quote) => {
                return quote.id === quoteId;
            });
            $("#quoteReportPopup .quote").text((_a = state.quoteToReport) === null || _a === void 0 ? void 0 : _a.text);
            $("#quoteReportPopup .reason").val("Grammatical error");
            $("#quoteReportPopup .comment").val("");
            $("#quoteReportPopup .characterCount").text("-");
            $("#quoteReportPopup .reason").select2({
                minimumResultsForSearch: Infinity,
            });
            $("#quoteReportPopupWrapper")
                .stop(true, true)
                .css("opacity", 0)
                .removeClass("hidden")
                .animate({ opacity: 1 }, noAnim ? 0 : 100, () => {
                $("#quoteReportPopup textarea").trigger("focus").select();
            });
        }
    });
}
exports.show = show;
function hide() {
    return __awaiter(this, void 0, void 0, function* () {
        if (!$("#quoteReportPopupWrapper").hasClass("hidden")) {
            const noAnim = state.previousPopupShowCallback ? true : false;
            $("#quoteReportPopupWrapper")
                .stop(true, true)
                .css("opacity", 1)
                .animate({
                opacity: 0,
            }, noAnim ? 0 : 100, () => {
                grecaptcha.reset(CAPTCHA_ID);
                $("#quoteReportPopupWrapper").addClass("hidden");
                if (state.previousPopupShowCallback) {
                    state.previousPopupShowCallback();
                }
            });
        }
    });
}
exports.hide = hide;
function submitReport() {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const captchaResponse = grecaptcha.getResponse(CAPTCHA_ID);
        if (!captchaResponse) {
            return Notifications.add("Please complete the captcha.");
        }
        const quoteId = (_a = state.quoteToReport) === null || _a === void 0 ? void 0 : _a.id.toString();
        const quoteLanguage = config_1.default.language;
        const reason = $("#quoteReportPopup .reason").val();
        const comment = $("#quoteReportPopup .comment").val();
        const captcha = captchaResponse;
        if (!quoteId) {
            return Notifications.add("Please select a quote.");
        }
        if (!reason) {
            return Notifications.add("Please select a valid report reason.");
        }
        const characterDifference = comment.length - 250;
        if (characterDifference > 0) {
            return Notifications.add(`Report comment is ${characterDifference} character(s) too long.`);
        }
        Loader.show();
        const response = yield ape_1.default.quotes.report(quoteId, quoteLanguage, reason, comment, captcha);
        Loader.hide();
        if (response.status !== 200) {
            return Notifications.add("Failed to report quote: " + response.message, -1);
        }
        Notifications.add("Report submitted. Thank you!", 1);
        hide();
    });
}
$("#quoteReportPopupWrapper").on("mousedown", (e) => {
    if ($(e.target).attr("id") === "quoteReportPopupWrapper") {
        hide();
    }
});
$("#quoteReportPopup .comment").on("input", () => {
    setTimeout(() => {
        const len = $("#quoteReportPopup .comment").val().length;
        $("#quoteReportPopup .characterCount").text(len);
        if (len > 250) {
            $("#quoteReportPopup .characterCount").addClass("red");
        }
        else {
            $("#quoteReportPopup .characterCount").removeClass("red");
        }
    }, 1);
});
$("#quoteReportPopup .submit").on("click", () => __awaiter(void 0, void 0, void 0, function* () {
    yield submitReport();
}));
$(".pageTest #reportQuoteButton").on("click", () => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    show({
        quoteId: (_a = TestWords.randomQuote) === null || _a === void 0 ? void 0 : _a.id,
        noAnim: false,
    });
}));


/***/ }),

/***/ "./src/scripts/popups/quote-search-popup.ts":
/*!**************************************************!*\
  !*** ./src/scripts/popups/quote-search-popup.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.apply = exports.hide = exports.show = exports.setSelectedId = exports.selectedId = void 0;
const TestUI = __importStar(__webpack_require__(/*! ../test/test-ui */ "./src/scripts/test/test-ui.ts"));
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const ManualRestart = __importStar(__webpack_require__(/*! ../test/manual-restart-tracker */ "./src/scripts/test/manual-restart-tracker.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const QuoteSubmitPopup = __importStar(__webpack_require__(/*! ./quote-submit-popup */ "./src/scripts/popups/quote-submit-popup.ts"));
const QuoteApprovePopup = __importStar(__webpack_require__(/*! ./quote-approve-popup */ "./src/scripts/popups/quote-approve-popup.ts"));
const QuoteReportPopup = __importStar(__webpack_require__(/*! ./quote-report-popup */ "./src/scripts/popups/quote-report-popup.ts"));
const search_service_1 = __webpack_require__(/*! ../utils/search-service */ "./src/scripts/utils/search-service.ts");
const debounce_1 = __webpack_require__(/*! ../utils/debounce */ "./src/scripts/utils/debounce.ts");
const strings_1 = __webpack_require__(/*! ../utils/strings */ "./src/scripts/utils/strings.ts");
const quotes_controller_1 = __importDefault(__webpack_require__(/*! ../controllers/quotes-controller */ "./src/scripts/controllers/quotes-controller.ts"));
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
exports.selectedId = 1;
function setSelectedId(val) {
    exports.selectedId = val;
}
exports.setSelectedId = setSelectedId;
const searchServiceCache = {};
function getSearchService(language, data, textExtractor) {
    if (language in searchServiceCache) {
        return searchServiceCache[language];
    }
    const newSearchService = (0, search_service_1.buildSearchService)(data, textExtractor);
    searchServiceCache[language] = newSearchService;
    return newSearchService;
}
function highlightMatches(text, matchedText) {
    if (matchedText.length === 0) {
        return text;
    }
    const words = (0, strings_1.splitByAndKeep)(text, `.,"/#!$%^&*;:{}=-_\`~() `.split(""));
    const normalizedWords = words.map((word) => {
        const shouldHighlight = matchedText.find((match) => {
            return word.startsWith(match);
        });
        return shouldHighlight ? `<span class="highlight">${word}</span>` : word;
    });
    return normalizedWords.join("");
}
function applyQuoteLengthFilter(quotes) {
    const quoteLengthFilterValue = $("#quoteSearchPopup .quoteLengthFilter").val();
    if (quoteLengthFilterValue.length === 0) {
        return quotes;
    }
    const quoteLengthFilter = quoteLengthFilterValue.map((filterValue) => parseInt(filterValue, 10));
    const filteredQuotes = quotes.filter((quote) => quoteLengthFilter.includes(quote.group));
    return filteredQuotes;
}
function buildQuoteSearchResult(quote, matchedSearchTerms) {
    let lengthDesc;
    if (quote.length < 101) {
        lengthDesc = "short";
    }
    else if (quote.length < 301) {
        lengthDesc = "medium";
    }
    else if (quote.length < 601) {
        lengthDesc = "long";
    }
    else {
        lengthDesc = "thicc";
    }
    const isNotAuthed = !firebase_1.Auth.currentUser;
    return `
  <div class="searchResult" id="${quote.id}">
    <div class="text">
      ${highlightMatches(quote.text, matchedSearchTerms)}
    </div>
    <div class="id">
      <div class="sub">id</div>
      <span class="quote-id">
        ${highlightMatches(quote.id.toString(), matchedSearchTerms)}
      </span>
    </div>
    <div class="length">
      <div class="sub">length</div>
      ${lengthDesc}
    </div>
    <div class="source">
      <div class="sub">source</div>
      ${highlightMatches(quote.source, matchedSearchTerms)}</div>
    <div class="icon-button report ${isNotAuthed && "hidden"}" aria-label="Report quote" data-balloon-pos="left">
      <i class="fas fa-flag report"></i>
    </div>
  </div>
  `;
}
function updateResults(searchText) {
    return __awaiter(this, void 0, void 0, function* () {
        const { quotes } = yield quotes_controller_1.default.getQuotes(config_1.default.language);
        const quoteSearchService = getSearchService(config_1.default.language, quotes, (quote) => {
            return `${quote.text} ${quote.id} ${quote.source}`;
        });
        const { results: matches, matchedQueryTerms } = quoteSearchService.query(searchText);
        const quotesToShow = applyQuoteLengthFilter(searchText === "" ? quotes : matches);
        const resultsList = $("#quoteSearchResults");
        resultsList.empty();
        quotesToShow.slice(0, 100).forEach((quote) => {
            const quoteSearchResult = buildQuoteSearchResult(quote, matchedQueryTerms);
            resultsList.append(quoteSearchResult);
        });
        const resultsExceededText = quotesToShow.length > 100
            ? "<span style='opacity: 0.5'>(only showing 100)</span>"
            : "";
        $("#extraResults").html(`${quotesToShow.length} results ${resultsExceededText}`);
    });
}
function show(clearText = true) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        if ($("#quoteSearchPopupWrapper").hasClass("hidden")) {
            if (clearText) {
                $("#quoteSearchPopup input").val("");
            }
            const quoteSearchInputValue = $("#quoteSearchPopup input").val();
            if (!firebase_1.Auth.currentUser) {
                $("#quoteSearchPopup #gotoSubmitQuoteButton").addClass("hidden");
            }
            else {
                $("#quoteSearchPopup #gotoSubmitQuoteButton").removeClass("hidden");
            }
            if ((_a = DB.getSnapshot()) === null || _a === void 0 ? void 0 : _a.quoteMod) {
                $("#quoteSearchPopup #goToApproveQuotes").removeClass("hidden");
            }
            else {
                $("#quoteSearchPopup #goToApproveQuotes").addClass("hidden");
            }
            $("#quoteSearchPopup .quoteLengthFilter").select2({
                placeholder: "Filter by length",
                maximumSelectionLength: Infinity,
                multiple: true,
                width: "100%",
                data: [
                    {
                        id: 0,
                        text: "short",
                        selected: false,
                    },
                    {
                        id: 1,
                        text: "medium",
                        selected: false,
                    },
                    {
                        id: 2,
                        text: "long",
                        selected: false,
                    },
                    {
                        id: 3,
                        text: "thicc",
                        selected: false,
                    },
                ],
            });
            $("#quoteSearchPopupWrapper")
                .stop(true, true)
                .css("opacity", 0)
                .removeClass("hidden")
                .animate({ opacity: 1 }, 100, () => {
                if (clearText) {
                    $("#quoteSearchPopup input").trigger("focus").select();
                }
                updateResults(quoteSearchInputValue);
            });
        }
    });
}
exports.show = show;
function hide(noAnim = false, focusWords = true) {
    if (!$("#quoteSearchPopupWrapper").hasClass("hidden")) {
        $("#quoteSearchPopupWrapper")
            .stop(true, true)
            .css("opacity", 1)
            .animate({
            opacity: 0,
        }, noAnim ? 0 : 100, () => {
            $("#quoteSearchPopupWrapper").addClass("hidden");
            if (focusWords) {
                TestUI.focusWords();
                $("#quoteSearchPopup .quoteLengthFilter").val([]);
                $("#quoteSearchPopup .quoteLengthFilter").trigger("change");
            }
        });
    }
}
exports.hide = hide;
function apply(val) {
    if (isNaN(val)) {
        val = parseInt(document.getElementById("searchBox").value);
    }
    let ret;
    if (val !== null && !isNaN(val) && val >= 0) {
        UpdateConfig.setQuoteLength(-2, false);
        exports.selectedId = val;
        ManualRestart.set();
        ret = true;
    }
    else {
        Notifications.add("Quote ID must be at least 1", 0);
        ret = false;
    }
    hide();
    return ret;
}
exports.apply = apply;
const searchForQuotes = (0, debounce_1.debounce)(() => {
    const searchText = document.getElementById("searchBox")
        .value;
    updateResults(searchText);
});
$("#quoteSearchPopup .searchBox").on("keyup", (e) => {
    if (e.code === "Escape")
        return;
    searchForQuotes();
});
$("#quoteSearchPopup .quoteLengthFilter").on("change", searchForQuotes);
$("#quoteSearchPopupWrapper").on("click", (e) => {
    if ($(e.target).attr("id") === "quoteSearchPopupWrapper") {
        hide();
    }
});
$(document).on("click", "#quoteSearchPopup #gotoSubmitQuoteButton", () => {
    hide(true);
    QuoteSubmitPopup.show(true);
});
$(document).on("click", "#quoteSearchPopup #goToApproveQuotes", () => {
    hide(true);
    QuoteApprovePopup.show(true);
});
$(document).on("click", "#quoteSearchPopup .report", (e) => __awaiter(void 0, void 0, void 0, function* () {
    const quoteId = e.target.closest(".searchResult").id;
    const quoteIdSelectedForReport = parseInt(quoteId);
    hide(true, false);
    QuoteReportPopup.show({
        quoteId: quoteIdSelectedForReport,
        noAnim: true,
        previousPopupShowCallback: () => {
            show(false);
        },
    });
}));
$(document).on("click", "#top .config .quoteLength .text-button", (e) => {
    var _a;
    const len = (_a = $(e.currentTarget).attr("quoteLength")) !== null && _a !== void 0 ? _a : 0;
    if (len == -2) {
        show();
    }
});
$(document).on("keydown", (event) => {
    if (event.key === "Escape" &&
        !$("#quoteSearchPopupWrapper").hasClass("hidden")) {
        hide();
        event.preventDefault();
    }
});


/***/ }),

/***/ "./src/scripts/popups/quote-submit-popup.ts":
/*!**************************************************!*\
  !*** ./src/scripts/popups/quote-submit-popup.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hide = exports.show = void 0;
const ape_1 = __importDefault(__webpack_require__(/*! ../ape */ "./src/scripts/ape/index.ts"));
const Loader = __importStar(__webpack_require__(/*! ../elements/loader */ "./src/scripts/elements/loader.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
// import Config from "../config";
// import * as Misc from "../misc";
// let dropdownReady = false;
// async function initDropdown(): Promise<void> {
//   if (dropdownReady) return;
//   const languages = await Misc.getLanguageList();
//   languages.forEach((language) => {
//     if (
//       language === "english_commonly_misspelled" ||
//       language === "hungarian_2.5k"
//     )
//       return;
//     if (!/_\d*k$/g.test(language)) {
//       $("#quoteSubmitPopup #submitQuoteLanguage").append(
//         `<option value="${language}">${language.replace(/_/g, " ")}</option>`
//       );
//     }
//   });
//   $("#quoteSubmitPopup #submitQuoteLanguage").select2();
//   dropdownReady = true;
// }
function submitQuote() {
    return __awaiter(this, void 0, void 0, function* () {
        const text = $("#quoteSubmitPopup #submitQuoteText").val();
        const source = $("#quoteSubmitPopup #submitQuoteSource").val();
        const language = $("#quoteSubmitPopup #submitQuoteLanguage").val();
        const captcha = $("#quoteSubmitPopup #g-recaptcha-response").val();
        if (!text || !source || !language) {
            return Notifications.add("Please fill in all fields", 0);
        }
        Loader.show();
        const response = yield ape_1.default.quotes.submit(text, source, language, captcha);
        Loader.hide();
        if (response.status !== 200) {
            return Notifications.add("Failed to submit quote: " + response.message, -1);
        }
        Notifications.add("Quote submitted.", 1);
        $("#quoteSubmitPopup #submitQuoteText").val("");
        $("#quoteSubmitPopup #submitQuoteSource").val("");
        $("#quoteSubmitPopup .characterCount").removeClass("red");
        $("#quoteSubmitPopup .characterCount").text("-");
        grecaptcha.reset();
    });
}
// @ts-ignore
// eslint-disable-next-line
function show(noAnim = false) {
    return __awaiter(this, void 0, void 0, function* () {
        Notifications.add("Quote submission is disabled temporarily due to a large submission queue.", 0, 5);
        return;
        // if ($("#quoteSubmitPopupWrapper").hasClass("hidden")) {
        //   await initDropdown();
        //   $("#quoteSubmitPopup #submitQuoteLanguage").val(
        //     Config.language.replace(/_\d*k$/g, "")
        //   );
        //   $("#quoteSubmitPopup #submitQuoteLanguage").trigger("change");
        //   $("#quoteSubmitPopup input").val("");
        //   $("#quoteSubmitPopupWrapper")
        //     .stop(true, true)
        //     .css("opacity", 0)
        //     .removeClass("hidden")
        //     .animate({ opacity: 1 }, noAnim ? 0 : 100, () => {
        //       $("#quoteSubmitPopup textarea").trigger("focus").select();
        //     });
        // }
    });
}
exports.show = show;
function hide() {
    if (!$("#quoteSubmitPopupWrapper").hasClass("hidden")) {
        $("#quoteSubmitPopupWrapper")
            .stop(true, true)
            .css("opacity", 1)
            .animate({
            opacity: 0,
        }, 100, () => {
            $("#quoteSubmitPopupWrapper").addClass("hidden");
        });
    }
}
exports.hide = hide;
$("#quoteSubmitPopupWrapper").on("mousedown", (e) => {
    if ($(e.target).attr("id") === "quoteSubmitPopupWrapper") {
        hide();
    }
});
$(document).on("click", "#quoteSubmitPopup #submitQuoteButton", () => {
    submitQuote();
});
$("#quoteSubmitPopup textarea").on("input", () => {
    setTimeout(() => {
        var _a;
        const len = (_a = $("#quoteSubmitPopup textarea").val()) === null || _a === void 0 ? void 0 : _a.length;
        $("#quoteSubmitPopup .characterCount").text(len);
        if (len < 60) {
            $("#quoteSubmitPopup .characterCount").addClass("red");
        }
        else {
            $("#quoteSubmitPopup .characterCount").removeClass("red");
        }
    }, 1);
});
$("#quoteSubmitPopup input").on("keydown", (e) => {
    if (e.key === "Enter") {
        submitQuote();
    }
});


/***/ }),

/***/ "./src/scripts/popups/result-tags-popup.ts":
/*!*************************************************!*\
  !*** ./src/scripts/popups/result-tags-popup.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.updateButtons = void 0;
const ape_1 = __importDefault(__webpack_require__(/*! ../ape */ "./src/scripts/ape/index.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const Loader = __importStar(__webpack_require__(/*! ../elements/loader */ "./src/scripts/elements/loader.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
function show() {
    if ($("#resultEditTagsPanelWrapper").hasClass("hidden")) {
        $("#resultEditTagsPanelWrapper")
            .stop(true, true)
            .css("opacity", 0)
            .removeClass("hidden")
            .animate({ opacity: 1 }, 125);
    }
}
function hide() {
    if (!$("#resultEditTagsPanelWrapper").hasClass("hidden")) {
        $("#resultEditTagsPanelWrapper")
            .stop(true, true)
            .css("opacity", 1)
            .animate({
            opacity: 0,
        }, 100, () => {
            $("#resultEditTagsPanelWrapper").addClass("hidden");
        });
    }
}
function updateButtons() {
    var _a;
    $("#resultEditTagsPanel .buttons").empty();
    (_a = DB.getSnapshot().tags) === null || _a === void 0 ? void 0 : _a.forEach((tag) => {
        $("#resultEditTagsPanel .buttons").append(`<div class="button tag" tagid="${tag._id}">${tag.name}</div>`);
    });
}
exports.updateButtons = updateButtons;
function updateActiveButtons(active) {
    if (active === [])
        return;
    $.each($("#resultEditTagsPanel .buttons .button"), (_, obj) => {
        var _a;
        const tagid = (_a = $(obj).attr("tagid")) !== null && _a !== void 0 ? _a : "";
        if (active.includes(tagid)) {
            $(obj).addClass("active");
        }
        else {
            $(obj).removeClass("active");
        }
    });
}
$(document).on("click", ".pageAccount .group.history #resultEditTags", (f) => {
    var _a;
    if (((_a = DB.getSnapshot().tags) === null || _a === void 0 ? void 0 : _a.length) || 0 > 0) {
        const resultid = $(f.target).parents("span").attr("resultid");
        const tags = $(f.target).parents("span").attr("tags");
        $("#resultEditTagsPanel").attr("resultid", resultid);
        $("#resultEditTagsPanel").attr("tags", tags);
        updateActiveButtons(JSON.parse(tags));
        show();
    }
});
$(document).on("click", "#resultEditTagsPanelWrapper .button.tag", (f) => {
    $(f.target).toggleClass("active");
});
$("#resultEditTagsPanelWrapper").on("click", (e) => {
    if ($(e.target).attr("id") === "resultEditTagsPanelWrapper") {
        hide();
    }
});
$("#resultEditTagsPanel .confirmButton").on("click", () => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const resultId = $("#resultEditTagsPanel").attr("resultid");
    // let oldtags = JSON.parse($("#resultEditTagsPanel").attr("tags"));
    const newTags = [];
    $.each($("#resultEditTagsPanel .buttons .button"), (_, obj) => {
        var _a;
        const tagid = (_a = $(obj).attr("tagid")) !== null && _a !== void 0 ? _a : "";
        if ($(obj).hasClass("active")) {
            newTags.push(tagid);
        }
    });
    Loader.show();
    hide();
    const response = yield ape_1.default.results.updateTags(resultId, newTags);
    Loader.hide();
    if (response.status !== 200) {
        return Notifications.add("Failed to update result tags: " + response.message, -1);
    }
    Notifications.add("Tags updated.", 1, 2);
    (_a = DB.getSnapshot().results) === null || _a === void 0 ? void 0 : _a.forEach((result) => {
        if (result._id === resultId) {
            result.tags = newTags;
        }
    });
    let tagNames = "";
    if (newTags.length > 0) {
        newTags.forEach((tag) => {
            var _a;
            (_a = DB.getSnapshot().tags) === null || _a === void 0 ? void 0 : _a.forEach((snaptag) => {
                if (tag === snaptag._id) {
                    tagNames += snaptag.name + ", ";
                }
            });
        });
        tagNames = tagNames.substring(0, tagNames.length - 2);
    }
    let restags;
    if (newTags === undefined) {
        restags = "[]";
    }
    else {
        restags = JSON.stringify(newTags);
    }
    $(`.pageAccount #resultEditTags[resultid='${resultId}']`).attr("tags", restags);
    if (newTags.length > 0) {
        $(`.pageAccount #resultEditTags[resultid='${resultId}']`).css("opacity", 1);
        $(`.pageAccount #resultEditTags[resultid='${resultId}']`).attr("aria-label", tagNames);
    }
    else {
        $(`.pageAccount #resultEditTags[resultid='${resultId}']`).css("opacity", 0.25);
        $(`.pageAccount #resultEditTags[resultid='${resultId}']`).attr("aria-label", "no tags");
    }
}));


/***/ }),

/***/ "./src/scripts/popups/saved-texts-popup.ts":
/*!*************************************************!*\
  !*** ./src/scripts/popups/saved-texts-popup.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.show = void 0;
const CustomText = __importStar(__webpack_require__(/*! ../test/custom-text */ "./src/scripts/test/custom-text.ts"));
function show() {
    return __awaiter(this, void 0, void 0, function* () {
        const names = CustomText.getCustomTextNames();
        const listEl = $(`#savedTextsPopup .list`).empty();
        let list = "";
        if (names.length === 0) {
            list += "<div>No saved custom texts found</div>";
        }
        else {
            for (const name of names) {
                list += `<div class="savedText">
      <div class="button name">${name}</div>
      <div class="button delete">
      <i class="fas fa-fw fa-trash"></i>
      </div>
      </div>`;
            }
        }
        listEl.html(list);
        $("#savedTextsPopupWrapper").removeClass("hidden");
        $("#customTextPopupWrapper").addClass("hidden");
    });
}
exports.show = show;
function hide(full = false) {
    $("#savedTextsPopupWrapper").addClass("hidden");
    if (!full)
        $("#customTextPopupWrapper").removeClass("hidden");
}
function applySaved(name) {
    const text = CustomText.getCustomText(name);
    $(`#customTextPopupWrapper textarea`).val(text.join(CustomText.delimiter));
}
$(document).on("click", `#savedTextsPopupWrapper .list .savedText .button.name`, (e) => {
    const name = $(e.target).text();
    applySaved(name);
    hide();
});
$(document).on("click", `#savedTextsPopupWrapper .list .savedText .button.delete`, () => {
    hide(true);
});
$("#savedTextsPopupWrapper").mousedown((e) => {
    if ($(e.target).attr("id") === "savedTextsPopupWrapper") {
        hide();
    }
});


/***/ }),

/***/ "./src/scripts/popups/simple-popups.ts":
/*!*********************************************!*\
  !*** ./src/scripts/popups/simple-popups.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hide = exports.list = void 0;
const ape_1 = __importDefault(__webpack_require__(/*! ../ape */ "./src/scripts/ape/index.ts"));
const AccountController = __importStar(__webpack_require__(/*! ../controllers/account-controller */ "./src/scripts/controllers/account-controller.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const UpdateConfig = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const Loader = __importStar(__webpack_require__(/*! ../elements/loader */ "./src/scripts/elements/loader.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const Settings = __importStar(__webpack_require__(/*! ../pages/settings */ "./src/scripts/pages/settings.ts"));
const ApeKeysPopup = __importStar(__webpack_require__(/*! ../popups/ape-keys-popup */ "./src/scripts/popups/ape-keys-popup.ts"));
const ThemePicker = __importStar(__webpack_require__(/*! ../settings/theme-picker */ "./src/scripts/settings/theme-picker.ts"));
const CustomText = __importStar(__webpack_require__(/*! ../test/custom-text */ "./src/scripts/test/custom-text.ts"));
const CustomTextPopup = __importStar(__webpack_require__(/*! ../popups/custom-text-popup */ "./src/scripts/popups/custom-text-popup.ts"));
const SavedTextsPopup = __importStar(__webpack_require__(/*! ./saved-texts-popup */ "./src/scripts/popups/saved-texts-popup.ts"));
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
const auth_1 = __webpack_require__(/*! firebase/auth */ "./node_modules/firebase/auth/dist/index.esm.js");
let activePopup = null;
exports.list = {};
class SimplePopup {
    constructor(id, type, title, inputs = [], text = "", buttonText = "Confirm", execFn, beforeInitFn, beforeShowFn) {
        this.parameters = [];
        this.id = id;
        this.type = type;
        this.execFn = (thisPopup, ...vals) => execFn(thisPopup, ...vals);
        this.title = title;
        this.inputs = inputs;
        this.text = text;
        this.wrapper = $("#simplePopupWrapper");
        this.element = $("#simplePopup");
        this.buttonText = buttonText;
        this.beforeInitFn = (thisPopup) => beforeInitFn(thisPopup);
        this.beforeShowFn = (thisPopup) => beforeShowFn(thisPopup);
        this.canClose = true;
    }
    reset() {
        this.element.html(`
    <div class="title"></div>
    <div class="inputs"></div>
    <div class="text"></div>
    <div class="button"></div>`);
    }
    init() {
        const el = this.element;
        el.find("input").val("");
        // if (el.attr("popupId") !== this.id) {
        this.reset();
        el.attr("popupId", this.id);
        el.find(".title").text(this.title);
        el.find(".text").text(this.text);
        this.initInputs();
        if (this.buttonText === "") {
            el.find(".button").remove();
        }
        else {
            el.find(".button").text(this.buttonText);
        }
        if (this.text === "") {
            el.find(".text").addClass("hidden");
        }
        else {
            el.find(".text").removeClass("hidden");
        }
        // }
    }
    initInputs() {
        const el = this.element;
        if (this.inputs.length > 0) {
            if (this.type === "number") {
                this.inputs.forEach((input) => {
                    el.find(".inputs").append(`
            <input
              type="number"
              min="1"
              value="${input.initVal}"
              placeholder="${input.placeholder}"
              class="${input.hidden ? "hidden" : ""}"
              ${input.hidden ? "" : "required"}
              autocomplete="off"
            >
          `);
                });
            }
            else if (this.type === "text") {
                this.inputs.forEach((input) => {
                    if (input.type) {
                        if (input.type === "textarea") {
                            el.find(".inputs").append(`
                <textarea
                  placeholder="${input.placeholder}"
                  class="${input.hidden ? "hidden" : ""}"
                  ${input.hidden ? "" : "required"}
                  ${input.disabled ? "disabled" : ""}
                  autocomplete="off"
                >${input.initVal}</textarea>
              `);
                        }
                        else if (input.type === "checkbox") {
                            el.find(".inputs").append(`
                <label class="checkbox">
                  <input type="checkbox">
                  <div class="customTextCheckbox"></div>
                  ${input.label}
                </label>
              `);
                        }
                        else {
                            el.find(".inputs").append(`
              <input
              type="${input.type}"
              value="${input.initVal}"
              placeholder="${input.placeholder}"
              class="${input.hidden ? "hidden" : ""}"
              ${input.hidden ? "" : "required"}
              ${input.disabled ? "disabled" : ""}
              autocomplete="off"
              >
              `);
                        }
                    }
                    else {
                        el.find(".inputs").append(`
              <input
                type="text"
                value="${input.initVal}"
                placeholder="${input.placeholder}"
                class="${input.hidden ? "hidden" : ""}"
                ${input.hidden ? "" : "required"}
                ${input.disabled ? "disabled" : ""}
                autocomplete="off"
              >
            `);
                    }
                });
            }
            el.find(".inputs").removeClass("hidden");
        }
        else {
            el.find(".inputs").addClass("hidden");
        }
    }
    exec() {
        if (!this.canClose)
            return;
        const vals = [];
        $.each($("#simplePopup input"), (_, el) => {
            if ($(el).is(":checkbox")) {
                vals.push($(el).is(":checked") ? "true" : "false");
            }
            else {
                vals.push($(el).val());
            }
        });
        this.execFn(this, ...vals);
        this.hide();
    }
    show(parameters = []) {
        activePopup = this;
        this.parameters = parameters;
        this.beforeInitFn(this);
        this.init();
        this.beforeShowFn(this);
        this.wrapper
            .stop(true, true)
            .css("opacity", 0)
            .removeClass("hidden")
            .animate({ opacity: 1 }, 125, () => {
            $($("#simplePopup").find("input")[0]).trigger("focus");
        });
    }
    hide() {
        if (!this.canClose)
            return;
        activePopup = null;
        this.wrapper
            .stop(true, true)
            .css("opacity", 1)
            .removeClass("hidden")
            .animate({ opacity: 0 }, 125, () => {
            this.wrapper.addClass("hidden");
        });
    }
}
function hide() {
    if (activePopup)
        return activePopup.hide();
    $("#simplePopupWrapper")
        .stop(true, true)
        .css("opacity", 1)
        .removeClass("hidden")
        .animate({ opacity: 0 }, 125, () => {
        $("#simplePopupWrapper").addClass("hidden");
    });
}
exports.hide = hide;
$("#simplePopupWrapper").mousedown((e) => {
    if ($(e.target).attr("id") === "simplePopupWrapper") {
        if (activePopup)
            return activePopup.hide();
        $("#simplePopupWrapper")
            .stop(true, true)
            .css("opacity", 1)
            .removeClass("hidden")
            .animate({ opacity: 0 }, 125, () => {
            $("#simplePopupWrapper").addClass("hidden");
        });
    }
});
$(document).on("click", "#simplePopupWrapper .button", () => {
    var _a;
    const id = (_a = $("#simplePopup").attr("popupId")) !== null && _a !== void 0 ? _a : "";
    exports.list[id].exec();
});
$(document).on("keyup", "#simplePopupWrapper input", (e) => {
    var _a;
    if (e.key === "Enter") {
        e.preventDefault();
        const id = (_a = $("#simplePopup").attr("popupId")) !== null && _a !== void 0 ? _a : "";
        exports.list[id].exec();
    }
});
exports.list.updateEmail = new SimplePopup("updateEmail", "text", "Update Email", [
    {
        placeholder: "Password",
        type: "password",
        initVal: "",
    },
    {
        placeholder: "New email",
        initVal: "",
    },
    {
        placeholder: "Confirm new email",
        initVal: "",
    },
], "", "Update", (_thisPopup, password, email, emailConfirm) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const user = firebase_1.Auth.currentUser;
        if (user === null)
            return;
        if (email !== emailConfirm) {
            Notifications.add("Emails don't match", 0);
            return;
        }
        if (user.providerData[0].providerId === "password") {
            const credential = auth_1.EmailAuthProvider.credential(user.email, password);
            yield (0, auth_1.reauthenticateWithCredential)(user, credential);
        }
        Loader.show();
        const response = yield ape_1.default.users.updateEmail(email, user.email);
        Loader.hide();
        if (response.status !== 200) {
            return Notifications.add("Failed to update email: " + response.message, -1);
        }
        Notifications.add("Email updated", 1);
        setTimeout(() => {
            window.location.reload();
        }, 1000);
    }
    catch (e) {
        const typedError = e;
        if (typedError.code === "auth/wrong-password") {
            Notifications.add("Incorrect password", -1);
        }
        else {
            Notifications.add("Something went wrong: " + e, -1);
        }
    }
}), (thisPopup) => {
    const user = firebase_1.Auth.currentUser;
    if (user === null)
        return;
    if (!user.providerData.find((p) => (p === null || p === void 0 ? void 0 : p.providerId) === "password")) {
        thisPopup.inputs = [];
        thisPopup.buttonText = "";
        thisPopup.text = "Password authentication is not enabled";
    }
}, (_thisPopup) => {
    //
});
exports.list.updateName = new SimplePopup("updateName", "text", "Update Name", [
    {
        placeholder: "Password",
        type: "password",
        initVal: "",
    },
    {
        placeholder: "New name",
        type: "text",
        initVal: "",
    },
], "", "Update", (_thisPopup, pass, newName) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const user = firebase_1.Auth.currentUser;
        if (user === null)
            return;
        if (user.providerData[0].providerId === "password") {
            const credential = auth_1.EmailAuthProvider.credential(user.email, pass);
            yield (0, auth_1.reauthenticateWithCredential)(user, credential);
        }
        else if (user.providerData[0].providerId === "google.com") {
            yield (0, auth_1.reauthenticateWithPopup)(user, AccountController.gmailProvider);
        }
        Loader.show();
        const checkNameResponse = yield ape_1.default.users.getNameAvailability(newName);
        if (checkNameResponse.status !== 200) {
            Loader.hide();
            return Notifications.add("Failed to check name: " + checkNameResponse.message, -1);
        }
        const updateNameResponse = yield ape_1.default.users.updateName(newName);
        if (updateNameResponse.status !== 200) {
            Loader.hide();
            return Notifications.add("Failed to update name: " + updateNameResponse.message, -1);
        }
        Notifications.add("Name updated", 1);
        DB.getSnapshot().name = newName;
        $("#menu .icon-button.account .text").text(newName);
    }
    catch (e) {
        const typedError = e;
        if (typedError.code === "auth/wrong-password") {
            Notifications.add("Incorrect password", -1);
        }
        else {
            Notifications.add("Something went wrong: " + e, -1);
        }
    }
    Loader.hide();
}), (thisPopup) => {
    const user = firebase_1.Auth.currentUser;
    if (user === null)
        return;
    if (user.providerData[0].providerId === "google.com") {
        thisPopup.inputs[0].hidden = true;
        thisPopup.buttonText = "Reauthenticate to update";
    }
}, (_thisPopup) => {
    //
});
exports.list.updatePassword = new SimplePopup("updatePassword", "text", "Update Password", [
    {
        placeholder: "Password",
        type: "password",
        initVal: "",
    },
    {
        placeholder: "New password",
        type: "password",
        initVal: "",
    },
    {
        placeholder: "Confirm new password",
        type: "password",
        initVal: "",
    },
], "", "Update", (_thisPopup, previousPass, newPass, newPassConfirm) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const user = firebase_1.Auth.currentUser;
        if (user === null)
            return;
        const credential = auth_1.EmailAuthProvider.credential(user.email, previousPass);
        if (newPass !== newPassConfirm) {
            Notifications.add("New passwords don't match", 0);
            return;
        }
        Loader.show();
        yield (0, auth_1.reauthenticateWithCredential)(user, credential);
        yield (0, auth_1.updatePassword)(user, newPass);
        Loader.hide();
        Notifications.add("Password updated", 1);
        setTimeout(() => {
            window.location.reload();
        }, 1000);
    }
    catch (e) {
        const typedError = e;
        Loader.hide();
        if (typedError.code === "auth/wrong-password") {
            Notifications.add("Incorrect password", -1);
        }
        else {
            Notifications.add("Something went wrong: " + e, -1);
        }
    }
}), (thisPopup) => {
    const user = firebase_1.Auth.currentUser;
    if (user === null)
        return;
    if (!user.providerData.find((p) => (p === null || p === void 0 ? void 0 : p.providerId) === "password")) {
        thisPopup.inputs = [];
        thisPopup.buttonText = "";
        thisPopup.text = "Password authentication is not enabled";
    }
}, (_thisPopup) => {
    //
});
exports.list.addPasswordAuth = new SimplePopup("addPasswordAuth", "text", "Add Password Authentication", [
    {
        placeholder: "email",
        type: "email",
        initVal: "",
    },
    {
        placeholder: "confirm email",
        type: "email",
        initVal: "",
    },
    {
        placeholder: "new password",
        type: "password",
        initVal: "",
    },
    {
        placeholder: "confirm new password",
        type: "password",
        initVal: "",
    },
], "", "Add", (_thisPopup, email, emailConfirm, pass, passConfirm) => __awaiter(void 0, void 0, void 0, function* () {
    if (email !== emailConfirm) {
        Notifications.add("Emails don't match", 0);
        return;
    }
    if (pass !== passConfirm) {
        Notifications.add("Passwords don't match", 0);
        return;
    }
    yield AccountController.addPasswordAuth(email, pass);
}), () => {
    //
}, (_thisPopup) => {
    //
});
exports.list.deleteAccount = new SimplePopup("deleteAccount", "text", "Delete Account", [
    {
        placeholder: "Password",
        type: "password",
        initVal: "",
    },
], "This is the last time you can change your mind. After pressing the button everything is gone.", "Delete", (_thisPopup, password) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    //
    try {
        const user = firebase_1.Auth.currentUser;
        if (user === null)
            return;
        if (user.providerData[0].providerId === "password") {
            const credential = auth_1.EmailAuthProvider.credential(user.email, password);
            yield (0, auth_1.reauthenticateWithCredential)(user, credential);
        }
        else if (user.providerData[0].providerId === "google.com") {
            yield (0, auth_1.reauthenticateWithPopup)(user, AccountController.gmailProvider);
        }
        Loader.show();
        Notifications.add("Deleting stats...", 0);
        const usersResponse = yield ape_1.default.users.delete();
        Loader.hide();
        if (usersResponse.status !== 200) {
            return Notifications.add("Failed to delete user stats: " + usersResponse.message, -1);
        }
        Loader.show();
        Notifications.add("Deleting results...", 0);
        const resultsResponse = yield ape_1.default.results.deleteAll();
        Loader.hide();
        if (resultsResponse.status !== 200) {
            return Notifications.add("Failed to delete user results: " + resultsResponse.message, -1);
        }
        Notifications.add("Deleting login information...", 0);
        yield ((_a = firebase_1.Auth.currentUser) === null || _a === void 0 ? void 0 : _a.delete());
        Notifications.add("Goodbye", 1, 5);
        setTimeout(() => {
            location.reload();
        }, 3000);
    }
    catch (e) {
        const typedError = e;
        Loader.hide();
        if (typedError.code === "auth/wrong-password") {
            Notifications.add("Incorrect password", -1);
        }
        else {
            Notifications.add("Something went wrong: " + e, -1);
        }
    }
}), (thisPopup) => {
    const user = firebase_1.Auth.currentUser;
    if (user === null)
        return;
    if (user.providerData[0].providerId === "google.com") {
        thisPopup.inputs = [];
        thisPopup.buttonText = "Reauthenticate to delete";
    }
}, (_thisPopup) => {
    //
});
exports.list.clearTagPb = new SimplePopup("clearTagPb", "text", "Clear Tag PB", [], `Are you sure you want to clear this tags PB?`, "Clear", (thisPopup) => __awaiter(void 0, void 0, void 0, function* () {
    var _b;
    const tagId = thisPopup.parameters[0];
    Loader.show();
    const response = yield ape_1.default.users.deleteTagPersonalBest(tagId);
    Loader.hide();
    if (response.status !== 200) {
        return Notifications.add("Failed to delete tag's PB: " + response.message);
    }
    if (response.data.resultCode === 1) {
        const tag = (_b = DB.getSnapshot().tags) === null || _b === void 0 ? void 0 : _b.filter((t) => t._id === tagId)[0];
        if (tag === undefined)
            return;
        tag.personalBests = {
            time: {},
            words: {},
            zen: { zen: [] },
            quote: { custom: [] },
            custom: { custom: [] },
        };
        $(`.pageSettings .section.tags .tagsList .tag[id="${tagId}"] .clearPbButton`).attr("aria-label", "No PB found");
        Notifications.add("Tag PB cleared.", 0);
    }
    else {
        Notifications.add("Something went wrong: " + response.message, -1);
    }
}), (thisPopup) => {
    thisPopup.text = `Are you sure you want to clear PB for tag ${thisPopup.parameters[1]}?`;
}, (_thisPopup) => {
    //
});
exports.list.applyCustomFont = new SimplePopup("applyCustomFont", "text", "Custom font", [{ placeholder: "Font name", initVal: "" }], "Make sure you have the font installed on your computer before applying.", "Apply", (_thisPopup, fontName) => {
    var _a;
    if (fontName === "")
        return;
    (_a = Settings.groups["fontFamily"]) === null || _a === void 0 ? void 0 : _a.setValue(fontName.replace(/\s/g, "_"));
}, () => {
    //
}, (_thisPopup) => {
    //
});
exports.list.resetPersonalBests = new SimplePopup("resetPersonalBests", "text", "Reset Personal Bests", [
    {
        placeholder: "Password",
        type: "password",
        initVal: "",
    },
], "", "Reset", (_thisPopup, password) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const user = firebase_1.Auth.currentUser;
        if (user === null)
            return;
        if (user.providerData[0].providerId === "password") {
            const credential = auth_1.EmailAuthProvider.credential(user.email, password);
            yield (0, auth_1.reauthenticateWithCredential)(user, credential);
        }
        else if (user.providerData[0].providerId === "google.com") {
            yield (0, auth_1.reauthenticateWithPopup)(user, AccountController.gmailProvider);
        }
        Loader.show();
        const response = yield ape_1.default.users.deletePersonalBests();
        Loader.hide();
        if (response.status !== 200) {
            return Notifications.add("Failed to reset personal bests: " + response.message, -1);
        }
        Notifications.add("Personal bests have been reset", 1);
        DB.getSnapshot().personalBests = {
            time: {},
            words: {},
            zen: { zen: [] },
            quote: { custom: [] },
            custom: { custom: [] },
        };
    }
    catch (e) {
        Loader.hide();
        Notifications.add(e, -1);
    }
}), (thisPopup) => {
    const user = firebase_1.Auth.currentUser;
    if (user === null)
        return;
    if (user.providerData[0].providerId === "google.com") {
        thisPopup.inputs = [];
        thisPopup.buttonText = "Reauthenticate to reset";
    }
}, (_thisPopup) => {
    //
});
exports.list.resetSettings = new SimplePopup("resetSettings", "text", "Reset Settings", [], "Are you sure you want to reset all your settings?", "Reset", () => {
    UpdateConfig.reset();
    // setTimeout(() => {
    //   location.reload();
    // }, 1000);
}, () => {
    //
}, (_thisPopup) => {
    //
});
exports.list.unlinkDiscord = new SimplePopup("unlinkDiscord", "text", "Unlink Discord", [], "Are you sure you want to unlink your Discord account?", "Unlink", () => __awaiter(void 0, void 0, void 0, function* () {
    Loader.show();
    const response = yield ape_1.default.users.unlinkDiscord();
    Loader.hide();
    if (response.status !== 200) {
        return Notifications.add("Failed to unlink Discord: " + response.message, -1);
    }
    Notifications.add("Accounts unlinked", 1);
    DB.getSnapshot().discordId = undefined;
    Settings.updateDiscordSection();
}), () => {
    //
}, (_thisPopup) => {
    //
});
exports.list.generateApeKey = new SimplePopup("generateApeKey", "text", "Generate new key", [
    {
        placeholder: "Name",
        initVal: "",
    },
], "", "Generate", (_thisPopup, name) => __awaiter(void 0, void 0, void 0, function* () {
    Loader.show();
    const response = yield ape_1.default.apeKeys.generate(name, false);
    Loader.hide();
    if (response.status !== 200) {
        return Notifications.add("Failed to generate key: " + response.message, -1);
    }
    else {
        const data = response.data;
        exports.list["viewApeKey"].show([data.apeKey]);
    }
}), () => {
    //
}, (_thisPopup) => {
    //
});
exports.list.viewApeKey = new SimplePopup("viewApeKey", "text", "Ape Key", [
    {
        type: "textarea",
        disabled: true,
        placeholder: "Key",
        initVal: "",
    },
], "This is your new Ape Key. Please keep it safe. You will only see it once!", "Close", (_thisPopup) => {
    ApeKeysPopup.show();
}, (_thisPopup) => {
    _thisPopup.inputs[0].initVal = _thisPopup.parameters[0];
}, (_thisPopup) => {
    _thisPopup.canClose = false;
    $("#simplePopup textarea").css("height", "110px");
    $("#simplePopup .button").addClass("hidden");
    setTimeout(() => {
        _thisPopup.canClose = true;
        $("#simplePopup .button").removeClass("hidden");
    }, 3000);
});
exports.list.deleteApeKey = new SimplePopup("deleteApeKey", "text", "Delete Ape Key", [], "Are you sure?", "Delete", (_thisPopup) => __awaiter(void 0, void 0, void 0, function* () {
    Loader.show();
    const response = yield ape_1.default.apeKeys.delete(_thisPopup.parameters[0]);
    Loader.hide();
    if (response.status !== 200) {
        return Notifications.add("Failed to delete key: " + response.message, -1);
    }
    Notifications.add("Key deleted", 1);
    ApeKeysPopup.show();
}), (_thisPopup) => {
    //
}, (_thisPopup) => {
    //
});
exports.list.editApeKey = new SimplePopup("editApeKey", "text", "Edit Ape Key", [
    {
        placeholder: "Name",
        initVal: "",
    },
], "", "Edit", (_thisPopup, input) => __awaiter(void 0, void 0, void 0, function* () {
    Loader.show();
    const response = yield ape_1.default.apeKeys.update(_thisPopup.parameters[0], {
        name: input,
    });
    Loader.hide();
    if (response.status !== 200) {
        return Notifications.add("Failed to update key: " + response.message, -1);
    }
    Notifications.add("Key updated", 1);
    ApeKeysPopup.show();
}), (_thisPopup) => {
    //
}, (_thisPopup) => {
    //
});
exports.list.saveCustomText = new SimplePopup("saveCustomText", "text", "Save custom text", [
    {
        placeholder: "Name",
        initVal: "",
    },
], "", "Save", (_thisPopup, input) => {
    const text = $(`#customTextPopup textarea`).val().normalize();
    CustomText.setCustomText(input, text);
    Notifications.add("Custom text saved", 1);
    CustomTextPopup.show();
}, () => {
    //
}, () => {
    //
});
exports.list.deleteCustomText = new SimplePopup("deleteCustomText", "text", "Delete custom text", [], "Are you sure?", "Delete", (_thisPopup) => {
    CustomText.deleteCustomText(_thisPopup.parameters[0]);
    Notifications.add("Custom text deleted", 1);
    SavedTextsPopup.show();
}, (_thisPopup) => {
    _thisPopup.text = `Are you sure you want to delete custom text ${_thisPopup.parameters[0]}?`;
}, () => {
    //
});
exports.list.updateCustomTheme = new SimplePopup("updateCustomTheme", "text", "Update Custom Theme", [
    {
        type: "text",
        placeholder: "Name",
        initVal: "",
    },
    {
        type: "checkbox",
        initVal: "false",
        label: "Update custom theme to current colors",
    },
], "", "Update", (_thisPopup, name, updateColors) => __awaiter(void 0, void 0, void 0, function* () {
    const snapshot = DB.getSnapshot();
    const customTheme = snapshot.customThemes.find((t) => t._id === _thisPopup.parameters[0]);
    if (customTheme === undefined) {
        Notifications.add("Custom theme does not exist!", -1);
        return;
    }
    let newColors = [];
    if (updateColors === "true") {
        $.each($(".pageSettings .customTheme .customThemeEdit [type='color']"), (_index, element) => {
            newColors.push($(element).attr("value"));
        });
    }
    else {
        newColors = customTheme.colors;
    }
    const newTheme = {
        name: name,
        colors: newColors,
    };
    Loader.show();
    yield DB.editCustomTheme(customTheme._id, newTheme);
    Loader.hide();
    UpdateConfig.setCustomThemeColors(newColors);
    Notifications.add("Custom theme updated", 1);
    ThemePicker.refreshButtons();
}), (_thisPopup) => {
    const snapshot = DB.getSnapshot();
    const customTheme = snapshot.customThemes.find((t) => t._id === _thisPopup.parameters[0]);
    if (!customTheme)
        return;
    _thisPopup.inputs[0].initVal = customTheme.name;
}, (_thisPopup) => {
    //
});
exports.list.deleteCustomTheme = new SimplePopup("deleteCustomTheme", "text", "Delete Custom Theme", [], "Are you sure?", "Delete", (_thisPopup) => __awaiter(void 0, void 0, void 0, function* () {
    Loader.show();
    yield DB.deleteCustomTheme(_thisPopup.parameters[0]);
    Loader.hide();
    Notifications.add("Custom theme deleted", 1);
    ThemePicker.refreshButtons();
}), (_thisPopup) => {
    //
}, (_thisPopup) => {
    //
});
$(".pageSettings .section.discordIntegration #unlinkDiscordButton").on("click", () => {
    exports.list["unlinkDiscord"].show();
});
$("#resetSettingsButton").on("click", () => {
    exports.list["resetSettings"].show();
});
$(".pageSettings #resetPersonalBestsButton").on("click", () => {
    exports.list["resetPersonalBests"].show();
});
$(".pageSettings #updateAccountName").on("click", () => {
    exports.list["updateName"].show();
});
$(".pageSettings #addPasswordAuth").on("click", () => {
    exports.list["addPasswordAuth"].show();
});
$(".pageSettings #emailPasswordAuth").on("click", () => {
    exports.list["updateEmail"].show();
});
$(".pageSettings #passPasswordAuth").on("click", () => {
    exports.list["updatePassword"].show();
});
$(".pageSettings #deleteAccount").on("click", () => {
    exports.list["deleteAccount"].show();
});
$("#apeKeysPopup .generateApeKey").on("click", () => {
    exports.list["generateApeKey"].show();
});
$(`#customTextPopup .buttonsTop .saveCustomText`).on("click", () => {
    exports.list["saveCustomText"].show();
});
$(document).on("click", ".pageSettings .section.themes .customTheme .delButton", (e) => {
    const $parentElement = $(e.currentTarget).parent(".customTheme.button");
    const customThemeId = $parentElement.attr("customThemeId");
    exports.list["deleteCustomTheme"].show([customThemeId]);
});
$(document).on("click", ".pageSettings .section.themes .customTheme .editButton", (e) => {
    const $parentElement = $(e.currentTarget).parent(".customTheme.button");
    const customThemeId = $parentElement.attr("customThemeId");
    exports.list["updateCustomTheme"].show([customThemeId]);
});
$(document).on("click", `#savedTextsPopupWrapper .list .savedText .button.delete`, (e) => {
    const name = $(e.target).siblings(".button.name").text();
    exports.list["deleteCustomText"].show([name]);
});
$(document).on("click", "#apeKeysPopup table tbody tr .button.delete", (e) => {
    const keyId = $(e.target).closest("tr").attr("keyId");
    exports.list["deleteApeKey"].show([keyId]);
});
$(document).on("click", "#apeKeysPopup table tbody tr .button.edit", (e) => {
    const keyId = $(e.target).closest("tr").attr("keyId");
    exports.list["editApeKey"].show([keyId]);
});
$(document).on("click", ".pageSettings .section.fontFamily .button.custom", () => {
    exports.list["applyCustomFont"].show([]);
});
$(document).on("keydown", (event) => {
    if (event.key === "Escape" && !$("#simplePopupWrapper").hasClass("hidden")) {
        hide();
        event.preventDefault();
    }
});


/***/ }),

/***/ "./src/scripts/popups/support-popup.ts":
/*!*********************************************!*\
  !*** ./src/scripts/popups/support-popup.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Commandline = __importStar(__webpack_require__(/*! ../elements/commandline */ "./src/scripts/elements/commandline.ts"));
const CommandlineLists = __importStar(__webpack_require__(/*! ../elements/commandline-lists */ "./src/scripts/elements/commandline-lists.ts"));
$(document.body).on("click", "#supportMeButton", () => {
    $("#supportMeWrapper")
        .css("opacity", 0)
        .removeClass("hidden")
        .animate({ opacity: 1 }, 125);
});
$(document.body).on("click", "#supportMeWrapper", () => {
    $("#supportMeWrapper")
        .css("opacity", 1)
        .animate({ opacity: 0 }, 125, () => {
        $("#supportMeWrapper").addClass("hidden");
    });
});
$(document.body).on("click", "#supportMeWrapper .button.ads", () => {
    CommandlineLists.pushCurrent(CommandlineLists.commandsEnableAds);
    Commandline.show();
    $("#supportMeWrapper")
        .css("opacity", 1)
        .animate({ opacity: 0 }, 125, () => {
        $("#supportMeWrapper").addClass("hidden");
    });
});
$(document.body).on("click", "#supportMeWrapper a.button", () => {
    $("#supportMeWrapper")
        .css("opacity", 1)
        .animate({ opacity: 0 }, 125, () => {
        $("#supportMeWrapper").addClass("hidden");
    });
});


/***/ }),

/***/ "./src/scripts/popups/version-popup.ts":
/*!*********************************************!*\
  !*** ./src/scripts/popups/version-popup.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.show = void 0;
function show() {
    $("#versionHistoryWrapper")
        .css("opacity", 0)
        .removeClass("hidden")
        .animate({ opacity: 1 }, 125);
}
exports.show = show;
$(document.body).on("click", ".version", (e) => {
    if (e.shiftKey)
        return;
    show();
});
$(document.body).on("click", "#versionHistoryWrapper", (e) => {
    if ($(e.target).attr("id") === "versionHistoryWrapper") {
        $("#versionHistoryWrapper")
            .css("opacity", 1)
            .animate({ opacity: 0 }, 125, () => {
            $("#versionHistoryWrapper").addClass("hidden");
        });
    }
});


/***/ }),

/***/ "./src/scripts/popups/word-filter-popup.ts":
/*!*************************************************!*\
  !*** ./src/scripts/popups/word-filter-popup.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.show = void 0;
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const CustomText = __importStar(__webpack_require__(/*! ../test/custom-text */ "./src/scripts/test/custom-text.ts"));
let initialised = false;
function init() {
    return __awaiter(this, void 0, void 0, function* () {
        if (!initialised) {
            $("#wordFilterPopup .languageInput").empty();
            const LanguageList = yield Misc.getLanguageList();
            LanguageList.forEach((language) => {
                let prettyLang = language;
                prettyLang = prettyLang.replace("_", " ");
                $("#wordFilterPopup .languageInput").append(`
        <option value=${language}>${prettyLang}</option>
      `);
            });
            initialised = true;
        }
    });
}
function show() {
    return __awaiter(this, void 0, void 0, function* () {
        yield init();
        $("#wordFilterPopupWrapper").removeClass("hidden");
        $("#customTextPopupWrapper").addClass("hidden");
        $("#wordFilterPopup .languageInput").select2({
            width: "100%",
        });
    });
}
exports.show = show;
function hide() {
    $("#wordFilterPopupWrapper").addClass("hidden");
    $("#customTextPopupWrapper").removeClass("hidden");
}
function filter(language) {
    return __awaiter(this, void 0, void 0, function* () {
        let filterin = $("#wordFilterPopup .wordIncludeInput").val();
        filterin = Misc.escapeRegExp(filterin === null || filterin === void 0 ? void 0 : filterin.trim());
        filterin = filterin.replace(/\s+/gi, "|");
        const regincl = new RegExp(filterin, "i");
        let filterout = $("#wordFilterPopup .wordExcludeInput").val();
        filterout = Misc.escapeRegExp(filterout.trim());
        filterout = filterout.replace(/\s+/gi, "|");
        const regexcl = new RegExp(filterout, "i");
        const filteredWords = [];
        const languageWordList = yield Misc.getLanguage(language);
        const maxLengthInput = $("#wordFilterPopup .wordMaxInput").val();
        const minLengthInput = $("#wordFilterPopup .wordMinInput").val();
        let maxLength;
        let minLength;
        if (maxLengthInput == "") {
            maxLength = 999;
        }
        else {
            maxLength = parseInt(maxLengthInput);
        }
        if (minLengthInput == "") {
            minLength = 1;
        }
        else {
            minLength = parseInt(minLengthInput);
        }
        for (let i = 0; i < languageWordList.words.length; i++) {
            const word = languageWordList.words[i];
            const test1 = regincl.test(word);
            const test2 = regexcl.test(word);
            if (((test1 && !test2) || (test1 && filterout == "")) &&
                word.length <= maxLength &&
                word.length >= minLength) {
                filteredWords.push(word);
            }
        }
        return filteredWords;
    });
}
function apply(set) {
    return __awaiter(this, void 0, void 0, function* () {
        const language = $("#wordFilterPopup .languageInput").val();
        const filteredWords = yield filter(language);
        const customText = filteredWords.join(CustomText.delimiter);
        $("#customTextPopup textarea").val((_, val) => (set ? "" : val + " ") + customText);
        hide();
    });
}
$("#wordFilterPopupWrapper").mousedown((e) => {
    if ($(e.target).attr("id") === "wordFilterPopupWrapper") {
        hide();
    }
});
$("#wordFilterPopup .languageInput").one("select2:open", function () {
    $("input.select2-search__field").prop("placeholder", "search");
});
$("#wordFilterPopupWrapper .button").mousedown((e) => {
    $("#wordFilterPopupWrapper .loadingIndicator").removeClass("hidden");
    $("#wordFilterPopupWrapper .button").addClass("hidden");
    setTimeout(() => {
        apply($(e.target).is("#set")).then(() => {
            $("#wordFilterPopupWrapper .loadingIndicator").addClass("hidden");
            $("#wordFilterPopupWrapper .button").removeClass("hidden");
        });
    }, 1);
});


/***/ }),

/***/ "./src/scripts/ready.ts":
/*!******************************!*\
  !*** ./src/scripts/ready.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ManualRestart = __importStar(__webpack_require__(/*! ./test/manual-restart-tracker */ "./src/scripts/test/manual-restart-tracker.ts"));
const config_1 = __importStar(__webpack_require__(/*! ./config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const Misc = __importStar(__webpack_require__(/*! ./utils/misc */ "./src/scripts/utils/misc.ts"));
const VerificationController = __importStar(__webpack_require__(/*! ./controllers/verification-controller */ "./src/scripts/controllers/verification-controller.ts"));
const RouteController = __importStar(__webpack_require__(/*! ./controllers/route-controller */ "./src/scripts/controllers/route-controller.ts"));
const PageController = __importStar(__webpack_require__(/*! ./controllers/page-controller */ "./src/scripts/controllers/page-controller.ts"));
const MonkeyPower = __importStar(__webpack_require__(/*! ./elements/monkey-power */ "./src/scripts/elements/monkey-power.ts"));
const NewVersionNotification = __importStar(__webpack_require__(/*! ./elements/version-check */ "./src/scripts/elements/version-check.ts"));
const Notifications = __importStar(__webpack_require__(/*! ./elements/notifications */ "./src/scripts/elements/notifications.ts"));
const Focus = __importStar(__webpack_require__(/*! ./test/focus */ "./src/scripts/test/focus.ts"));
ManualRestart.set();
UpdateConfig.loadFromLocalStorage();
if (window.location.hostname === "localhost") {
    $("#bottom .version .text").text("localhost");
    $("#bottom .version").css("opacity", 1);
}
else {
    Misc.getReleasesFromGitHub().then((v) => {
        NewVersionNotification.show(v[0].name);
    });
}
Focus.set(true, true);
RouteController.handleInitialPageClasses(window.location.pathname);
$(document).ready(() => {
    if (window.location.pathname === "/") {
        // $("#top .config").removeClass("hidden");
    }
    $("body").css("transition", "all .25s, transform .05s");
    if (config_1.default.quickTab) {
        $("#restartTestButton").addClass("hidden");
    }
    if (!window.localStorage.getItem("merchbannerclosed")) {
        Notifications.addBanner(`Checkout our merchandise, available at <a target="_blank" href="https://monkeytype.store/">monkeytype.store</a>`, 1, "images/merchdropwebsite2.png", false, () => {
            window.localStorage.setItem("merchbannerclosed", "true");
        });
    }
    $("#centerContent")
        .css("opacity", "0")
        .removeClass("hidden")
        .stop(true, true)
        .animate({ opacity: 1 }, 250, () => {
        if (window.location.pathname === "/verify") {
            const fragment = new URLSearchParams(window.location.hash.slice(1));
            if (fragment.has("access_token")) {
                const accessToken = fragment.get("access_token");
                const tokenType = fragment.get("token_type");
                VerificationController.set({
                    accessToken: accessToken,
                    tokenType: tokenType,
                });
                history.replaceState("/", "", "/");
            }
            const page = window.location.pathname.replace("/", "");
            PageController.change(page);
        }
        else if (window.location.pathname === "/account") {
            // history.replaceState("/", null, "/");
        }
        else if (/challenge_.+/g.test(window.location.pathname)) {
            //do nothing
            // }
        }
        else if (window.location.pathname !== "/") {
            // let page = window.location.pathname.replace("/", "");
            // PageController.change(page);
        }
    });
    // Settings.settingsFillPromise.then(Settings.update);
    MonkeyPower.init();
});


/***/ }),

/***/ "./src/scripts/settings/settings-group.ts":
/*!************************************************!*\
  !*** ./src/scripts/settings/settings-group.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
class SettingsGroup {
    constructor(configName, configFunction, mode, setCallback, updateCallback) {
        this.configName = configName;
        this.configValue = config_1.default[configName];
        this.mode = mode;
        this.configFunction = configFunction;
        this.setCallback = setCallback;
        this.updateCallback = updateCallback;
        this.updateInput();
        if (this.mode === "select") {
            $(document).on("change", `.pageSettings .section.${this.configName} select`, (e) => {
                const target = $(e.currentTarget);
                if (target.hasClass("disabled") ||
                    target.hasClass("no-auto-handle")) {
                    return;
                }
                this.setValue(target.val());
            });
        }
        else if (this.mode === "button") {
            $(document).on("click", `.pageSettings .section.${this.configName} .button`, (e) => {
                const target = $(e.currentTarget);
                if (target.hasClass("disabled") ||
                    target.hasClass("no-auto-handle")) {
                    return;
                }
                let value = target.attr(configName);
                const params = target.attr("params");
                if (!value && !params)
                    return;
                if (value === "true")
                    value = true;
                if (value === "false")
                    value = false;
                this.setValue(value, params);
            });
        }
    }
    setValue(value, params) {
        if (params === undefined) {
            this.configFunction(value);
        }
        else {
            this.configFunction(value, ...params);
        }
        this.updateInput();
        if (this.setCallback)
            this.setCallback();
    }
    updateInput() {
        this.configValue = config_1.default[this.configName];
        $(`.pageSettings .section.${this.configName} .button`).removeClass("active");
        if (this.mode === "select") {
            $(`.pageSettings .section.${this.configName} select`)
                .val(this.configValue)
                .trigger("change.select2");
        }
        else if (this.mode === "button") {
            $(`.pageSettings .section.${this.configName} .button[${this.configName}='${this.configValue}']`).addClass("active");
        }
        if (this.updateCallback)
            this.updateCallback();
    }
}
exports["default"] = SettingsGroup;


/***/ }),

/***/ "./src/scripts/settings/theme-picker.ts":
/*!**********************************************!*\
  !*** ./src/scripts/settings/theme-picker.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.updateActiveTab = exports.saveCustomThemeColors = exports.setCustomInputs = exports.refreshButtons = exports.updateActiveButton = void 0;
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const ThemeController = __importStar(__webpack_require__(/*! ../controllers/theme-controller */ "./src/scripts/controllers/theme-controller.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const ThemeColors = __importStar(__webpack_require__(/*! ../elements/theme-colors */ "./src/scripts/elements/theme-colors.ts"));
const ChartController = __importStar(__webpack_require__(/*! ../controllers/chart-controller */ "./src/scripts/controllers/chart-controller.ts"));
const CustomThemePopup = __importStar(__webpack_require__(/*! ../popups/custom-theme-popup */ "./src/scripts/popups/custom-theme-popup.ts"));
const Loader = __importStar(__webpack_require__(/*! ../elements/loader */ "./src/scripts/elements/loader.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
function updateActiveButton() {
    let activeThemeName = config_1.default.theme;
    if (config_1.default.randomTheme !== "off" &&
        config_1.default.randomTheme !== "custom" &&
        ThemeController.randomTheme !== null) {
        activeThemeName = ThemeController.randomTheme;
    }
    $(`.pageSettings .section.themes .theme`).removeClass("active");
    $(`.pageSettings .section.themes .theme[theme=${activeThemeName}]`).addClass("active");
}
exports.updateActiveButton = updateActiveButton;
function updateColors(colorPicker, color, onlyStyle = false, noThemeUpdate = false) {
    if (onlyStyle) {
        const colorID = colorPicker.find("input[type=color]").attr("id");
        if (colorID === undefined)
            console.error("Could not find color ID!");
        if (!noThemeUpdate && colorID !== undefined) {
            document.documentElement.style.setProperty(colorID, color);
        }
        const pickerButton = colorPicker.find("label");
        pickerButton.val(color);
        pickerButton.attr("value", color);
        if (pickerButton.attr("for") !== "--bg-color") {
            pickerButton.css("background-color", color);
        }
        colorPicker.find("input[type=text]").val(color);
        colorPicker.find("input[type=color]").attr("value", color);
        return;
    }
    const colorREGEX = [
        {
            rule: /\b[0-9]{1,3},\s?[0-9]{1,3},\s?[0-9]{1,3}\s*\b/,
            start: "rgb(",
            end: ")",
        },
        {
            rule: /\b[A-Z, a-z, 0-9]{6}\b/,
            start: "#",
            end: "",
        },
        {
            rule: /\b[0-9]{1,3},\s?[0-9]{1,3}%,\s?[0-9]{1,3}%?\s*\b/,
            start: "hsl(",
            end: ")",
        },
    ];
    color = color.replace("°", "");
    for (const regex of colorREGEX) {
        if (color.match(regex.rule)) {
            color = regex.start + color + regex.end;
            break;
        }
    }
    $(".colorConverter").css("color", color);
    const hexColor = Misc.convertRGBtoHEX($(".colorConverter").css("color"));
    if (hexColor === undefined) {
        return;
    }
    color = hexColor;
    const colorID = colorPicker.find("input[type=color]").attr("id");
    if (colorID === undefined)
        console.error("Could not find color ID!");
    if (!noThemeUpdate && colorID !== undefined) {
        document.documentElement.style.setProperty(colorID, color);
    }
    const pickerButton = colorPicker.find("label");
    pickerButton.val(color);
    pickerButton.attr("value", color);
    if (pickerButton.attr("for") !== "--bg-color") {
        pickerButton.css("background-color", color);
    }
    colorPicker.find("input[type=text]").val(color);
    colorPicker.find("input[type=color]").attr("value", color);
}
function refreshButtons() {
    return __awaiter(this, void 0, void 0, function* () {
        if (config_1.default.customTheme) {
            // Update custom theme buttons
            const customThemesEl = $(".pageSettings .section.themes .allCustomThemes.buttons").empty();
            const addButton = $(".pageSettings .section.themes .addCustomThemeButton");
            if (firebase_1.Auth.currentUser === null) {
                $(".pageSettings .section.themes .customThemeEdit .saveCustomThemeButton").text("save");
                return;
            }
            else {
                $(".pageSettings .section.themes .customThemeEdit .saveCustomThemeButton").text("save as new");
            }
            addButton.removeClass("hidden");
            const customThemes = DB.getSnapshot().customThemes;
            customThemes.forEach((customTheme) => {
                // const activeTheme =
                //   Config.customThemeId === customTheme._id ? "active" : "";
                const bgColor = customTheme.colors[0];
                const mainColor = customTheme.colors[1];
                customThemesEl.append(`<div class="customTheme button" customThemeId='${customTheme._id}' 
        style="color:${mainColor};background:${bgColor}">
        <div class="editButton"><i class="fas fa-pen"></i></div>
        <div class="text">${customTheme.name.replace(/_/g, " ")}</div>
        <div class="delButton"><i class="fas fa-trash fa-fw"></i></div>
        </div>`);
            });
        }
        else {
            // Update theme buttons
            const favThemesEl = $(".pageSettings .section.themes .favThemes.buttons").empty();
            const themesEl = $(".pageSettings .section.themes .allThemes.buttons").empty();
            let activeThemeName = config_1.default.theme;
            if (config_1.default.randomTheme !== "off" &&
                config_1.default.randomTheme !== "custom" &&
                ThemeController.randomTheme !== null) {
                activeThemeName = ThemeController.randomTheme;
            }
            const themes = yield Misc.getSortedThemesList();
            //first show favourites
            if (config_1.default.favThemes.length > 0) {
                favThemesEl.css({ paddingBottom: "1rem" });
                themes.forEach((theme) => {
                    if (config_1.default.favThemes.includes(theme.name)) {
                        const activeTheme = activeThemeName === theme.name ? "active" : "";
                        favThemesEl.append(`<div class="theme button ${activeTheme}" theme='${theme.name}' 
            style="color:${theme.mainColor};background:${theme.bgColor}">
            <div class="activeIndicator"><i class="fas fa-circle"></i></div>
            <div class="text">${theme.name.replace(/_/g, " ")}</div>
            <div class="favButton active"><i class="fas fa-star"></i></div></div>`);
                    }
                });
            }
            else {
                favThemesEl.css({ paddingBottom: "0" });
            }
            //then the rest
            themes.forEach((theme) => {
                if (config_1.default.favThemes.includes(theme.name)) {
                    return;
                }
                const activeTheme = activeThemeName === theme.name ? "active" : "";
                themesEl.append(`<div class="theme button ${activeTheme}" theme='${theme.name}' style="color:${theme.mainColor};background:${theme.bgColor}">
        <div class="activeIndicator"><i class="fas fa-circle"></i></div>
        <div class="text">${theme.name.replace(/_/g, " ")}</div>
        <div class="favButton"><i class="far fa-star"></i></div></div>`);
            });
        }
        updateActiveButton();
    });
}
exports.refreshButtons = refreshButtons;
function setCustomInputs(noThemeUpdate = false) {
    $(".pageSettings .section.themes .tabContainer .customTheme .colorPicker").each((_index, element) => {
        const currentColor = config_1.default.customThemeColors[ThemeController.colorVars.indexOf($(element).find("input[type=color]").attr("id"))];
        updateColors($(element), currentColor, false, noThemeUpdate);
    });
}
exports.setCustomInputs = setCustomInputs;
function toggleFavourite(themeName) {
    if (config_1.default.favThemes.includes(themeName)) {
        // already favourite, remove
        UpdateConfig.setFavThemes(config_1.default.favThemes.filter((t) => t !== themeName));
    }
    else {
        // add to favourites
        const newList = config_1.default.favThemes;
        newList.push(themeName);
        UpdateConfig.setFavThemes(newList);
    }
    UpdateConfig.saveFullConfigToLocalStorage();
}
function saveCustomThemeColors() {
    const newColors = [];
    $.each($(".pageSettings .customTheme .customThemeEdit [type='color']"), (_index, element) => {
        newColors.push($(element).attr("value"));
    });
    UpdateConfig.setCustomThemeColors(newColors);
    Notifications.add("Custom theme saved", 1);
}
exports.saveCustomThemeColors = saveCustomThemeColors;
function updateActiveTab(forced = false) {
    // Set force to true only when some change for the active tab has taken place
    // Prevent theme buttons from being added twice by doing an update only when the state has changed
    const $presetTabButton = $(".pageSettings .section.themes .tabs .button[tab='preset']");
    const $customTabButton = $(".pageSettings .section.themes .tabs .button[tab='custom']");
    if (config_1.default.customTheme) {
        $presetTabButton.removeClass("active");
        if (!$customTabButton.hasClass("active") || forced) {
            $customTabButton.addClass("active");
            refreshButtons();
        }
        Misc.swapElements($('.pageSettings [tabContent="preset"]'), $('.pageSettings [tabContent="custom"]'), 250);
    }
    else {
        $customTabButton.removeClass("active");
        if (!$presetTabButton.hasClass("active") || forced) {
            $presetTabButton.addClass("active");
            refreshButtons();
        }
        Misc.swapElements($('.pageSettings [tabContent="custom"]'), $('.pageSettings [tabContent="preset"]'), 250);
    }
}
exports.updateActiveTab = updateActiveTab;
// Add events to the DOM
// Handle click on theme: preset or custom tab
$(".pageSettings .section.themes .tabs .button").on("click", (e) => {
    $(".pageSettings .section.themes .tabs .button").removeClass("active");
    const $target = $(e.currentTarget);
    $target.addClass("active");
    // setCustomInputs();
    if ($target.attr("tab") == "preset") {
        UpdateConfig.setCustomTheme(false);
    }
    else {
        UpdateConfig.setCustomTheme(true);
    }
});
// Handle click on custom theme button
$(document).on("click", ".pageSettings .section.themes .customTheme.button", (e) => {
    var _a;
    // Do not apply if user wanted to delete it
    if ($(e.target).hasClass("delButton"))
        return;
    if ($(e.target).hasClass("editButton"))
        return;
    const customThemeId = (_a = $(e.currentTarget).attr("customThemeId")) !== null && _a !== void 0 ? _a : "";
    ThemeController.set(customThemeId, true);
});
// Handle click on favorite preset theme button
$(document).on("click", ".pageSettings .section.themes .theme .favButton", (e) => {
    const theme = $(e.currentTarget).parents(".theme.button").attr("theme");
    if (theme !== undefined)
        toggleFavourite(theme);
    else {
        console.error("Could not find the theme attribute attached to the button clicked!");
    }
});
// Handle click on preset theme button
$(document).on("click", ".pageSettings .section.themes .theme.button", (e) => {
    const theme = $(e.currentTarget).attr("theme");
    if (!$(e.target).hasClass("favButton") && theme !== undefined) {
        UpdateConfig.setTheme(theme);
        updateActiveButton();
    }
});
$(".pageSettings .section.themes .tabContainer .customTheme input[type=color]").on("input", (e) => {
    const $colorVar = $(e.currentTarget).attr("id");
    const $pickedColor = $(e.currentTarget).val();
    updateColors($(".colorPicker #" + $colorVar).parent(), $pickedColor, true);
});
$(".pageSettings .section.themes .tabContainer .customTheme input[type=color]").on("change", (e) => {
    const $colorVar = $(e.currentTarget).attr("id");
    const $pickedColor = $(e.currentTarget).val();
    updateColors($(".colorPicker #" + $colorVar).parent(), $pickedColor);
});
$(".pageSettings .section.themes .tabContainer .customTheme input[type=text]")
    .on("blur", (e) => {
    if (e.target.id === "name")
        return;
    const $colorVar = $(e.currentTarget).attr("id");
    const $pickedColor = $(e.currentTarget).val();
    updateColors($(".colorPicker #" + $colorVar).parent(), $pickedColor);
})
    .on("keypress", function (e) {
    if (e.target.id === "name")
        return;
    if (e.code === "Enter") {
        $(this).attr("disabled", "disabled");
        const $colorVar = $(e.currentTarget).attr("id");
        const $pickedColor = $(e.currentTarget).val();
        updateColors($(".colorPicker #" + $colorVar).parent(), $pickedColor);
        $(this).removeAttr("disabled");
    }
});
$(".pageSettings #loadCustomColorsFromPreset").on("click", () => {
    // previewTheme(Config.theme);
    $("#currentTheme").attr("href", `themes/${config_1.default.theme}.css`);
    ThemeController.colorVars.forEach((e) => {
        document.documentElement.style.setProperty(e, "");
    });
    setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {
        ChartController.updateAllChartColors();
        const themeColors = yield ThemeColors.getAll();
        ThemeController.colorVars.forEach((colorName) => {
            let color;
            if (colorName === "--bg-color") {
                color = themeColors.bg;
            }
            else if (colorName === "--main-color") {
                color = themeColors.main;
            }
            else if (colorName === "--sub-color") {
                color = themeColors.sub;
            }
            else if (colorName === "--caret-color") {
                color = themeColors.caret;
            }
            else if (colorName === "--text-color") {
                color = themeColors.text;
            }
            else if (colorName === "--error-color") {
                color = themeColors.error;
            }
            else if (colorName === "--error-extra-color") {
                color = themeColors.errorExtra;
            }
            else if (colorName === "--colorful-error-color") {
                color = themeColors.colorfulError;
            }
            else if (colorName === "--colorful-error-extra-color") {
                color = themeColors.colorfulErrorExtra;
            }
            updateColors($(".colorPicker #" + colorName).parent(), color);
        });
    }), 250);
});
// Handles click on share custom theme button
$("#shareCustomThemeButton").on("click", () => {
    const share = [];
    $.each($(".pageSettings .customTheme .customThemeEdit [type='color']"), (_, element) => {
        share.push($(element).attr("value"));
    });
    const url = "https://monkeytype.com?customTheme=" + btoa(JSON.stringify(share));
    navigator.clipboard.writeText(url).then(function () {
        Notifications.add("URL Copied to clipboard", 0);
    }, function () {
        CustomThemePopup.show(url);
    });
});
$(".pageSettings .saveCustomThemeButton").on("click", () => __awaiter(void 0, void 0, void 0, function* () {
    saveCustomThemeColors();
    if (firebase_1.Auth.currentUser) {
        const newCustomTheme = {
            name: "custom",
            colors: config_1.default.customThemeColors,
        };
        Loader.show();
        const response = yield DB.addCustomTheme(newCustomTheme);
        Loader.hide();
        if (response) {
            updateActiveTab(true);
        }
    }
    else {
        updateActiveTab(true);
    }
}));
ConfigEvent.subscribe((eventKey) => {
    if (eventKey === "customThemeId")
        refreshButtons();
    // if (eventKey === "customTheme") updateActiveTab();
});


/***/ }),

/***/ "./src/scripts/states/active-page.ts":
/*!*******************************************!*\
  !*** ./src/scripts/states/active-page.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.set = exports.get = void 0;
let activePage = "loading";
function get() {
    return activePage;
}
exports.get = get;
function set(active) {
    activePage = active;
}
exports.set = set;


/***/ }),

/***/ "./src/scripts/states/glarses-mode.ts":
/*!********************************************!*\
  !*** ./src/scripts/states/glarses-mode.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.enable = exports.get = void 0;
let glarsesMode = false;
function get() {
    return glarsesMode;
}
exports.get = get;
function enable() {
    glarsesMode = true;
    console.log("Glarses Mode On - test result will be hidden. You can check the stats in the console (here)");
    console.log("To disable Glarses Mode refresh the page.");
}
exports.enable = enable;


/***/ }),

/***/ "./src/scripts/states/page-transition.ts":
/*!***********************************************!*\
  !*** ./src/scripts/states/page-transition.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.get = exports.set = void 0;
let transition = true;
function set(val) {
    transition = val;
}
exports.set = set;
function get() {
    return transition;
}
exports.get = get;


/***/ }),

/***/ "./src/scripts/states/slow-timer.ts":
/*!******************************************!*\
  !*** ./src/scripts/states/slow-timer.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.get = exports.clear = exports.set = void 0;
let slowTimer = false;
function set() {
    if (slowTimer)
        return;
    slowTimer = true;
    console.error("Slow timer, disabling animations");
    // Notifications.add("Slow timer detected", -1, 5);
}
exports.set = set;
function clear() {
    slowTimer = false;
}
exports.clear = clear;
function get() {
    return slowTimer;
}
exports.get = get;


/***/ }),

/***/ "./src/scripts/states/test-active.ts":
/*!*******************************************!*\
  !*** ./src/scripts/states/test-active.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.set = exports.get = void 0;
let testActive = false;
function get() {
    return testActive;
}
exports.get = get;
function set(active) {
    testActive = active;
}
exports.set = set;


/***/ }),

/***/ "./src/scripts/states/time.ts":
/*!************************************!*\
  !*** ./src/scripts/states/time.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.increment = exports.set = exports.get = void 0;
let time = 0;
function get() {
    return time;
}
exports.get = get;
function set(active) {
    time = active;
}
exports.set = set;
function increment() {
    time++;
}
exports.increment = increment;


/***/ }),

/***/ "./src/scripts/test/british-english.ts":
/*!*********************************************!*\
  !*** ./src/scripts/test/british-english.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.replace = exports.getList = void 0;
const misc_1 = __webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts");
let list = [];
function getList() {
    return __awaiter(this, void 0, void 0, function* () {
        if (list.length === 0) {
            return $.getJSON("languages/britishenglish.json", function (data) {
                list = data;
                return list;
            });
        }
        else {
            return list;
        }
    });
}
exports.getList = getList;
function replace(word) {
    return __awaiter(this, void 0, void 0, function* () {
        const list = yield getList();
        const replacement = list.find((a) => word.match(RegExp(`^([\\W]*${a[0]}[\\W]*)$`, "gi")));
        return replacement
            ? word.replace(RegExp(`^(?:([\\W]*)(${replacement[0]})([\\W]*))$`, "gi"), (_, $1, $2, $3) => $1 +
                ($2.charAt(0) === $2.charAt(0).toUpperCase()
                    ? $2 === $2.toUpperCase()
                        ? replacement[1].toUpperCase()
                        : (0, misc_1.capitalizeFirstLetterOfEachWord)(replacement[1])
                    : replacement[1]) +
                $3)
            : word;
    });
}
exports.replace = replace;


/***/ }),

/***/ "./src/scripts/test/caps-warning.ts":
/*!******************************************!*\
  !*** ./src/scripts/test/caps-warning.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.capsState = void 0;
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
exports.capsState = false;
function show() {
    if ($("#capsWarning").hasClass("hidden")) {
        $("#capsWarning").removeClass("hidden");
    }
}
function hide() {
    if (!$("#capsWarning").hasClass("hidden")) {
        $("#capsWarning").addClass("hidden");
    }
}
$(document).keydown(function (event) {
    var _a, _b;
    if (((_a = event === null || event === void 0 ? void 0 : event.originalEvent) === null || _a === void 0 ? void 0 : _a.getModifierState) &&
        ((_b = event === null || event === void 0 ? void 0 : event.originalEvent) === null || _b === void 0 ? void 0 : _b.getModifierState("CapsLock"))) {
        exports.capsState = true;
    }
    else {
        exports.capsState = false;
    }
    try {
        if (config_1.default.capsLockWarning && exports.capsState) {
            show();
        }
        else {
            hide();
        }
    }
    catch (_c) { }
});
$(document).keyup(function (event) {
    var _a, _b;
    if (((_a = event === null || event === void 0 ? void 0 : event.originalEvent) === null || _a === void 0 ? void 0 : _a.getModifierState) &&
        ((_b = event === null || event === void 0 ? void 0 : event.originalEvent) === null || _b === void 0 ? void 0 : _b.getModifierState("CapsLock"))) {
        //filthy fix but optional chaining refues to work
        exports.capsState = true;
    }
    else {
        exports.capsState = false;
    }
    try {
        if (config_1.default.capsLockWarning && exports.capsState) {
            show();
        }
        else {
            hide();
        }
    }
    catch (_c) { }
});


/***/ }),

/***/ "./src/scripts/test/caret.ts":
/*!***********************************!*\
  !*** ./src/scripts/test/caret.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.show = exports.updatePosition = exports.hide = exports.startAnimation = exports.stopAnimation = exports.caretAnimating = void 0;
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const TestInput = __importStar(__webpack_require__(/*! ./test-input */ "./src/scripts/test/test-input.ts"));
const SlowTimer = __importStar(__webpack_require__(/*! ../states/slow-timer */ "./src/scripts/states/slow-timer.ts"));
const TestActive = __importStar(__webpack_require__(/*! ../states/test-active */ "./src/scripts/states/test-active.ts"));
exports.caretAnimating = true;
function stopAnimation() {
    if (exports.caretAnimating === true) {
        $("#caret").css("animation-name", "none");
        $("#caret").css("opacity", "1");
        exports.caretAnimating = false;
    }
}
exports.stopAnimation = stopAnimation;
function startAnimation() {
    if (exports.caretAnimating === false) {
        if (config_1.default.smoothCaret && !SlowTimer.get()) {
            $("#caret").css("animation-name", "caretFlashSmooth");
        }
        else {
            $("#caret").css("animation-name", "caretFlashHard");
        }
        exports.caretAnimating = true;
    }
}
exports.startAnimation = startAnimation;
function hide() {
    $("#caret").addClass("hidden");
}
exports.hide = hide;
function updatePosition() {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        if ($("#wordsWrapper").hasClass("hidden"))
            return;
        // if ($("#caret").hasClass("off")) {
        //   return;
        // }
        const caret = $("#caret");
        let inputLen = TestInput.input.current.length;
        inputLen = Misc.trailingComposeChars.test(TestInput.input.current)
            ? TestInput.input.current.search(Misc.trailingComposeChars) + 1
            : inputLen;
        let currentLetterIndex = inputLen - 1;
        if (currentLetterIndex == -1) {
            currentLetterIndex = 0;
        }
        //insert temporary character so the caret will work in zen mode
        const activeWordEmpty = $("#words .active").children().length == 0;
        if (activeWordEmpty) {
            $("#words .active").append('<letter style="opacity: 0;">_</letter>');
        }
        const currentWordNodeList = (_a = document === null || document === void 0 ? void 0 : document.querySelector("#words .active")) === null || _a === void 0 ? void 0 : _a.querySelectorAll("letter");
        if (!currentWordNodeList)
            return;
        let currentLetter = currentWordNodeList[currentLetterIndex];
        if (inputLen > currentWordNodeList.length) {
            currentLetter = currentWordNodeList[currentWordNodeList.length - 1];
        }
        if (config_1.default.mode != "zen" && $(currentLetter).length == 0)
            return;
        const currentLanguage = yield Misc.getCurrentLanguage(config_1.default.language);
        const isLanguageLeftToRight = currentLanguage.leftToRight;
        const currentLetterPosLeft = isLanguageLeftToRight
            ? currentLetter.offsetLeft
            : currentLetter.offsetLeft + ((_b = $(currentLetter).width()) !== null && _b !== void 0 ? _b : 0);
        const currentLetterPosTop = currentLetter.offsetTop;
        const letterHeight = $(currentLetter).height();
        let newTop = 0;
        let newLeft = 0;
        newTop = currentLetterPosTop - Math.round(letterHeight / 5);
        if (inputLen == 0) {
            newLeft = isLanguageLeftToRight
                ? currentLetterPosLeft - caret.width() / 2
                : currentLetterPosLeft + caret.width() / 2;
        }
        else {
            newLeft = isLanguageLeftToRight
                ? currentLetterPosLeft +
                    $(currentLetter).width() -
                    caret.width() / 2
                : currentLetterPosLeft -
                    $(currentLetter).width() +
                    caret.width() / 2;
        }
        let smoothlinescroll = $("#words .smoothScroller").height();
        if (smoothlinescroll === undefined)
            smoothlinescroll = 0;
        if (config_1.default.smoothCaret) {
            caret.stop(true, false).animate({
                top: newTop - smoothlinescroll,
                left: newLeft,
            }, SlowTimer.get() ? 0 : 100);
        }
        else {
            caret.stop(true, true).animate({
                top: newTop - smoothlinescroll,
                left: newLeft,
            }, 0);
        }
        if (config_1.default.showAllLines) {
            const browserHeight = window.innerHeight;
            const middlePos = browserHeight / 2 - $("#caret").outerHeight() / 2;
            const contentHeight = document.body.scrollHeight;
            if (newTop >= middlePos &&
                contentHeight > browserHeight &&
                TestActive.get()) {
                const newscrolltop = newTop - middlePos / 2;
                // console.log('---------');
                // console.log(newTop);
                // console.log(middlePos);
                // console.log(browserHeight);
                // console.log(contentHeight);
                window.scrollTo({
                    left: 0,
                    top: newscrolltop,
                    behavior: "smooth",
                });
            }
        }
        if (activeWordEmpty) {
            $("#words .active").children().remove();
        }
    });
}
exports.updatePosition = updatePosition;
function show() {
    if ($("#result").hasClass("hidden")) {
        updatePosition();
        $("#caret").removeClass("hidden");
        startAnimation();
    }
}
exports.show = show;


/***/ }),

/***/ "./src/scripts/test/custom-text.ts":
/*!*****************************************!*\
  !*** ./src/scripts/test/custom-text.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCustomTextNames = exports.deleteCustomText = exports.setCustomText = exports.getCustomText = exports.setDelimiter = exports.setWord = exports.setTime = exports.setIsTimeRandom = exports.setIsWordRandom = exports.setText = exports.delimiter = exports.time = exports.word = exports.isTimeRandom = exports.isWordRandom = exports.text = void 0;
exports.text = [
    "The",
    "quick",
    "brown",
    "fox",
    "jumps",
    "over",
    "the",
    "lazy",
    "dog",
];
exports.isWordRandom = false;
exports.isTimeRandom = false;
exports.delimiter = " ";
function setText(txt) {
    exports.text = txt;
}
exports.setText = setText;
function setIsWordRandom(val) {
    exports.isWordRandom = val;
}
exports.setIsWordRandom = setIsWordRandom;
function setIsTimeRandom(val) {
    exports.isTimeRandom = val;
}
exports.setIsTimeRandom = setIsTimeRandom;
function setTime(val) {
    exports.time = val;
}
exports.setTime = setTime;
function setWord(val) {
    exports.word = val;
}
exports.setWord = setWord;
function setDelimiter(val) {
    exports.delimiter = val;
}
exports.setDelimiter = setDelimiter;
function getCustomText(name) {
    const customText = getCustomTextObject();
    return customText[name].split(/ +/);
}
exports.getCustomText = getCustomText;
function setCustomText(name, text) {
    const customText = getCustomTextObject();
    if (typeof text === "string")
        customText[name] = text;
    else
        customText[name] = text.join(" ");
    window.localStorage.setItem("customText", JSON.stringify(customText));
}
exports.setCustomText = setCustomText;
function deleteCustomText(name) {
    const customText = getCustomTextObject();
    if (customText[name])
        delete customText[name];
    window.localStorage.setItem("customText", JSON.stringify(customText));
}
exports.deleteCustomText = deleteCustomText;
function getCustomTextObject() {
    var _a;
    return JSON.parse((_a = window.localStorage.getItem("customText")) !== null && _a !== void 0 ? _a : "{}");
}
function getCustomTextNames() {
    return Object.keys(getCustomTextObject());
}
exports.getCustomTextNames = getCustomTextNames;


/***/ }),

/***/ "./src/scripts/test/focus.ts":
/*!***********************************!*\
  !*** ./src/scripts/test/focus.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.set = void 0;
const Caret = __importStar(__webpack_require__(/*! ./caret */ "./src/scripts/test/caret.ts"));
const ActivePage = __importStar(__webpack_require__(/*! ../states/active-page */ "./src/scripts/states/active-page.ts"));
const unfocusPx = 3;
let state = false;
function set(foc, withCursor = false) {
    if (foc && !state) {
        state = true;
        Caret.stopAnimation();
        $("#top").addClass("focus");
        $("#bottom").addClass("focus");
        if (!withCursor)
            $("body").css("cursor", "none");
        $("#middle").addClass("focus");
        $("#bannerCenter").addClass("focus");
    }
    else if (!foc && state) {
        state = false;
        Caret.startAnimation();
        $("#top").removeClass("focus");
        $("#bottom").removeClass("focus");
        $("body").css("cursor", "default");
        $("#middle").removeClass("focus");
        $("#bannerCenter").removeClass("focus");
    }
}
exports.set = set;
$(document).mousemove(function (event) {
    if (!state)
        return;
    if (ActivePage.get() == "loading")
        return;
    if (ActivePage.get() == "account" && state == true)
        return;
    if ($("#top").hasClass("focus") &&
        event.originalEvent &&
        // To avoid mouse/desk vibration from creating a flashy effect, we'll unfocus @ >5px instead of >0px
        (event.originalEvent.movementX > unfocusPx ||
            event.originalEvent.movementY > unfocusPx)) {
        set(false);
    }
});


/***/ }),

/***/ "./src/scripts/test/funbox.ts":
/*!************************************!*\
  !*** ./src/scripts/test/funbox.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.rememberSettings = exports.activate = exports.clear = exports.setFunbox = exports.toggleScript = exports.reset = exports.startMemoryTimer = exports.resetMemoryTimer = void 0;
const TestWords = __importStar(__webpack_require__(/*! ./test-words */ "./src/scripts/test/test-words.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const ManualRestart = __importStar(__webpack_require__(/*! ./manual-restart-tracker */ "./src/scripts/test/manual-restart-tracker.ts"));
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const TTS = __importStar(__webpack_require__(/*! ./tts */ "./src/scripts/test/tts.ts"));
const ModesNotice = __importStar(__webpack_require__(/*! ../elements/modes-notice */ "./src/scripts/elements/modes-notice.ts"));
let modeSaved = null;
let memoryTimer = null;
let memoryInterval = null;
let settingsMemory = {};
function rememberSetting(settingName, value, setFunction) {
    var _a;
    (_a = settingsMemory[settingName]) !== null && _a !== void 0 ? _a : (settingsMemory[settingName] = {
        value,
        setFunction,
    });
}
function loadMemory() {
    Notifications.add("Reverting funbox settings", 0);
    Object.keys(settingsMemory).forEach((setting) => {
        settingsMemory[setting].setFunction(settingsMemory[setting].value, true);
    });
    settingsMemory = {};
}
function showMemoryTimer() {
    $("#typingTest #memoryTimer").stop(true, true).animate({
        opacity: 1,
    }, 125);
}
function hideMemoryTimer() {
    $("#typingTest #memoryTimer").stop(true, true).animate({
        opacity: 0,
    }, 125);
}
function resetMemoryTimer() {
    if (memoryInterval !== null) {
        clearInterval(memoryInterval);
        memoryInterval = null;
    }
    memoryTimer = null;
    hideMemoryTimer();
}
exports.resetMemoryTimer = resetMemoryTimer;
function updateMemoryTimer(sec) {
    $("#typingTest #memoryTimer").text(`Timer left to memorise all words: ${sec}s`);
}
function startMemoryTimer() {
    resetMemoryTimer();
    memoryTimer = Math.round(Math.pow(TestWords.words.length, 1.2));
    updateMemoryTimer(memoryTimer);
    showMemoryTimer();
    memoryInterval = setInterval(() => {
        if (memoryTimer === null)
            return;
        memoryTimer -= 1;
        memoryTimer == 0 ? hideMemoryTimer() : updateMemoryTimer(memoryTimer);
        if (memoryTimer <= 0) {
            resetMemoryTimer();
            $("#wordsWrapper").addClass("hidden");
        }
    }, 1000);
}
exports.startMemoryTimer = startMemoryTimer;
function reset() {
    resetMemoryTimer();
}
exports.reset = reset;
function toggleScript(...params) {
    if (config_1.default.funbox === "tts") {
        TTS.speak(params[0]);
    }
}
exports.toggleScript = toggleScript;
function setFunbox(funbox, mode) {
    modeSaved = mode;
    UpdateConfig.setFunbox(funbox, false);
    if (funbox === "none")
        loadMemory();
    return true;
}
exports.setFunbox = setFunbox;
function clear() {
    return __awaiter(this, void 0, void 0, function* () {
        $("#funBoxTheme").attr("href", ``);
        $("#words").removeClass("nospace");
        $("#words").removeClass("arrows");
        reset();
        $("#wordsWrapper").removeClass("hidden");
        ManualRestart.set();
        ModesNotice.update();
        return true;
    });
}
exports.clear = clear;
function activate(funbox) {
    return __awaiter(this, void 0, void 0, function* () {
        let mode = modeSaved;
        if (funbox === undefined || funbox === null) {
            funbox = config_1.default.funbox;
        }
        const funboxInfo = yield Misc.getFunbox(funbox);
        $("#funBoxTheme").attr("href", ``);
        $("#words").removeClass("nospace");
        $("#words").removeClass("arrows");
        if ((yield Misc.getCurrentLanguage(config_1.default.language)).ligatures) {
            if (funbox == "choo_choo" || funbox == "earthquake") {
                Notifications.add("Current language does not support this funbox mode", 0);
                UpdateConfig.setFunbox("none", true);
                yield clear();
                return;
            }
        }
        if (funbox !== "none" && (config_1.default.mode === "zen" || config_1.default.mode == "quote")) {
            if ((funboxInfo === null || funboxInfo === void 0 ? void 0 : funboxInfo.affectsWordGeneration) === true) {
                Notifications.add(`${Misc.capitalizeFirstLetterOfEachWord(config_1.default.mode)} mode does not support the ${funbox} funbox`, 0);
                UpdateConfig.setFunbox("none", true);
                yield clear();
                return;
            }
        }
        // if (funbox === "none") {
        reset();
        $("#wordsWrapper").removeClass("hidden");
        // }
        if (funbox === "none" && mode === undefined) {
            mode = null;
        }
        else if ((funbox !== "none" && mode === undefined) ||
            (funbox !== "none" && mode === null)) {
            const list = yield Misc.getFunboxList();
            mode = list.filter((f) => f.name === funbox)[0].type;
        }
        ManualRestart.set();
        if (mode === "style") {
            if (funbox != undefined) {
                $("#funBoxTheme").attr("href", `funbox/${funbox}.css`);
            }
            if (funbox === "simon_says") {
                UpdateConfig.setKeymapMode("next", true);
            }
            if (funbox === "read_ahead" ||
                funbox === "read_ahead_easy" ||
                funbox === "read_ahead_hard") {
                UpdateConfig.setHighlightMode("letter", true);
            }
        }
        else if (mode === "script") {
            if (funbox === "tts") {
                $("#funBoxTheme").attr("href", `funbox/simon_says.css`);
                UpdateConfig.setKeymapMode("off", true);
                UpdateConfig.setHighlightMode("letter", true);
            }
            else if (funbox === "layoutfluid") {
                UpdateConfig.setLayout(config_1.default.customLayoutfluid
                    ? config_1.default.customLayoutfluid.split("#")[0]
                    : "qwerty", true);
                UpdateConfig.setKeymapLayout(config_1.default.customLayoutfluid
                    ? config_1.default.customLayoutfluid.split("#")[0]
                    : "qwerty", true);
            }
            else if (funbox === "memory") {
                UpdateConfig.setMode("words", true);
                UpdateConfig.setShowAllLines(true, true);
                if (config_1.default.keymapMode === "next") {
                    UpdateConfig.setKeymapMode("react", true);
                }
            }
            else if (funbox === "nospace") {
                $("#words").addClass("nospace");
                UpdateConfig.setHighlightMode("letter", true);
            }
            else if (funbox === "arrows") {
                $("#words").addClass("arrows");
                UpdateConfig.setHighlightMode("letter", true);
            }
        }
        // ModesNotice.update();
        return true;
    });
}
exports.activate = activate;
function rememberSettings() {
    return __awaiter(this, void 0, void 0, function* () {
        const funbox = config_1.default.funbox;
        let mode = modeSaved;
        if (funbox === "none" && mode === undefined) {
            mode = null;
        }
        else if ((funbox !== "none" && mode === undefined) ||
            (funbox !== "none" && mode === null)) {
            const list = yield Misc.getFunboxList();
            mode = list.filter((f) => f.name === funbox)[0].type;
        }
        if (mode === "style") {
            if (funbox === "simon_says") {
                rememberSetting("keymapMode", config_1.default.keymapMode, UpdateConfig.setKeymapMode);
            }
            if (funbox === "read_ahead" ||
                funbox === "read_ahead_easy" ||
                funbox === "read_ahead_hard") {
                rememberSetting("highlightMode", config_1.default.highlightMode, UpdateConfig.setHighlightMode);
            }
        }
        else if (mode === "script") {
            if (funbox === "tts") {
                rememberSetting("keymapMode", config_1.default.keymapMode, UpdateConfig.setKeymapMode);
            }
            else if (funbox === "layoutfluid") {
                rememberSetting("keymapMode", config_1.default.keymapMode, UpdateConfig.setKeymapMode);
                rememberSetting("layout", config_1.default.layout, UpdateConfig.setLayout);
                rememberSetting("keymapLayout", config_1.default.keymapLayout, UpdateConfig.setKeymapLayout);
            }
            else if (funbox === "memory") {
                rememberSetting("mode", config_1.default.mode, UpdateConfig.setMode);
                rememberSetting("showAllLines", config_1.default.showAllLines, UpdateConfig.setShowAllLines);
                if (config_1.default.keymapMode === "next") {
                    rememberSetting("keymapMode", config_1.default.keymapMode, UpdateConfig.setKeymapMode);
                }
            }
            else if (funbox === "nospace") {
                rememberSetting("highlightMode", config_1.default.highlightMode, UpdateConfig.setHighlightMode);
            }
            else if (funbox === "arrows") {
                rememberSetting("highlightMode", config_1.default.highlightMode, UpdateConfig.setHighlightMode);
            }
            else if (funbox === "58008") {
                rememberSetting("numbers", config_1.default.numbers, UpdateConfig.setNumbers);
            }
        }
    });
}
exports.rememberSettings = rememberSettings;


/***/ }),

/***/ "./src/scripts/test/layout-emulator.ts":
/*!*********************************************!*\
  !*** ./src/scripts/test/layout-emulator.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCharFromEvent = void 0;
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const caps_warning_1 = __webpack_require__(/*! ./caps-warning */ "./src/scripts/test/caps-warning.ts");
function getCharFromEvent(event) {
    return __awaiter(this, void 0, void 0, function* () {
        function emulatedLayoutShouldShiftKey(event, newKeyPreview) {
            if (caps_warning_1.capsState)
                return Misc.isASCIILetter(newKeyPreview) !== event.shiftKey;
            return event.shiftKey;
        }
        const layout = yield Misc.getLayout(config_1.default.layout);
        let keyEventCodes = [];
        if (layout.type === "ansi") {
            keyEventCodes = [
                "Backquote",
                "Digit1",
                "Digit2",
                "Digit3",
                "Digit4",
                "Digit5",
                "Digit6",
                "Digit7",
                "Digit8",
                "Digit9",
                "Digit0",
                "Minus",
                "Equal",
                "KeyQ",
                "KeyW",
                "KeyE",
                "KeyR",
                "KeyT",
                "KeyY",
                "KeyU",
                "KeyI",
                "KeyO",
                "KeyP",
                "BracketLeft",
                "BracketRight",
                "Backslash",
                "KeyA",
                "KeyS",
                "KeyD",
                "KeyF",
                "KeyG",
                "KeyH",
                "KeyJ",
                "KeyK",
                "KeyL",
                "Semicolon",
                "Quote",
                "KeyZ",
                "KeyX",
                "KeyC",
                "KeyV",
                "KeyB",
                "KeyN",
                "KeyM",
                "Comma",
                "Period",
                "Slash",
                "Space",
            ];
        }
        else if (layout.type === "iso") {
            keyEventCodes = [
                "Backquote",
                "Digit1",
                "Digit2",
                "Digit3",
                "Digit4",
                "Digit5",
                "Digit6",
                "Digit7",
                "Digit8",
                "Digit9",
                "Digit0",
                "Minus",
                "Equal",
                "KeyQ",
                "KeyW",
                "KeyE",
                "KeyR",
                "KeyT",
                "KeyY",
                "KeyU",
                "KeyI",
                "KeyO",
                "KeyP",
                "BracketLeft",
                "BracketRight",
                "KeyA",
                "KeyS",
                "KeyD",
                "KeyF",
                "KeyG",
                "KeyH",
                "KeyJ",
                "KeyK",
                "KeyL",
                "Semicolon",
                "Quote",
                "IntlBackslash",
                "Backquote",
                "KeyZ",
                "KeyX",
                "KeyC",
                "KeyV",
                "KeyB",
                "KeyN",
                "KeyM",
                "Comma",
                "Period",
                "Slash",
                "Space",
            ];
        }
        else if (layout.type === "matrix") {
            keyEventCodes = [
                "Backquote",
                "Digit1",
                "Digit2",
                "Digit3",
                "Digit4",
                "Digit5",
                "Digit6",
                "Digit7",
                "Digit8",
                "Digit9",
                "Digit0",
                "Minus",
                "Equal",
                "KeyQ",
                "KeyW",
                "KeyE",
                "KeyR",
                "KeyT",
                "KeyY",
                "KeyU",
                "KeyI",
                "KeyO",
                "KeyP",
                "BracketLeft",
                "BracketRight",
                "Backslash",
                "KeyA",
                "KeyS",
                "KeyD",
                "KeyF",
                "KeyG",
                "KeyH",
                "KeyJ",
                "KeyK",
                "KeyL",
                "Semicolon",
                "Quote",
                "KeyZ",
                "KeyX",
                "KeyC",
                "KeyV",
                "KeyB",
                "KeyN",
                "KeyM",
                "Comma",
                "Period",
                "Slash",
                "Space",
            ];
        }
        const layoutKeys = layout.keys;
        const layoutMap = layoutKeys["row1"]
            .concat(layoutKeys["row2"])
            .concat(layoutKeys["row3"])
            .concat(layoutKeys["row4"])
            .concat(layoutKeys["row5"]);
        let mapIndex = null;
        for (let i = 0; i < keyEventCodes.length; i++) {
            if (event.code == keyEventCodes[i]) {
                mapIndex = i;
            }
        }
        if (!mapIndex) {
            if (event.code.includes("Numpad")) {
                return event.key;
            }
            else {
                return null;
            }
        }
        const newKeyPreview = layoutMap[mapIndex][0];
        const shift = emulatedLayoutShouldShiftKey(event, newKeyPreview) ? 1 : 0;
        const char = layoutMap[mapIndex][shift];
        if (char) {
            return char;
        }
        else {
            return event.key;
        }
    });
}
exports.getCharFromEvent = getCharFromEvent;


/***/ }),

/***/ "./src/scripts/test/lazy-mode.ts":
/*!***************************************!*\
  !*** ./src/scripts/test/lazy-mode.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.replaceAccents = void 0;
const accents = [
    ["áàâäåãąą́āą̄ă", "a"],
    ["éèêëẽęę́ēę̄ėě", "e"],
    ["íìîïĩįį́īį̄", "i"],
    ["óòôöøõóōǫǫ́ǭő", "o"],
    ["úùûüŭũúūůű", "u"],
    ["ńň", "n"],
    ["çĉčć", "c"],
    ["ř", "r"],
    ["ď", "d"],
    ["ťț", "t"],
    ["æ", "ae"],
    ["œ", "oe"],
    ["ẅ", "w"],
    ["ĝğg̃", "g"],
    ["ĥ", "h"],
    ["ĵ", "j"],
    ["ń", "n"],
    ["ŝśšș", "s"],
    ["żźž", "z"],
    ["ÿỹýÿŷ", "y"],
    ["łľ", "l"],
    ["أإآ", "ا"],
    ["َ", ""],
    ["ُ", ""],
    ["ِ", ""],
    ["ْ", ""],
    ["ً", ""],
    ["ٌ", ""],
    ["ٍ", ""],
    ["ّ", ""],
];
function replaceAccents(word, accentsOverride) {
    let newWord = word;
    if (!accents && !accentsOverride)
        return newWord;
    let regex;
    const list = accentsOverride || accents;
    for (let i = 0; i < list.length; i++) {
        regex = new RegExp(`[${list[i][0]}]`, "gi");
        newWord = newWord.replace(regex, list[i][1]);
    }
    return newWord;
}
exports.replaceAccents = replaceAccents;


/***/ }),

/***/ "./src/scripts/test/live-acc.ts":
/*!**************************************!*\
  !*** ./src/scripts/test/live-acc.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hide = exports.show = exports.update = void 0;
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const TestActive = __importStar(__webpack_require__(/*! ../states/test-active */ "./src/scripts/states/test-active.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
function update(acc) {
    let number = Math.floor(acc);
    if (config_1.default.blindMode) {
        number = 100;
    }
    document.querySelector("#miniTimerAndLiveWpm .acc").innerHTML =
        number + "%";
    document.querySelector("#liveAcc").innerHTML = number + "%";
}
exports.update = update;
function show() {
    if (!config_1.default.showLiveAcc)
        return;
    if (!TestActive.get())
        return;
    if (config_1.default.timerStyle === "mini") {
        // $("#miniTimerAndLiveWpm .wpm").css("opacity", Config.timerOpacity);
        if (!$("#miniTimerAndLiveWpm .acc").hasClass("hidden"))
            return;
        $("#miniTimerAndLiveWpm .acc")
            .removeClass("hidden")
            .css("opacity", 0)
            .animate({
            opacity: config_1.default.timerOpacity,
        }, 125);
    }
    else {
        // $("#liveWpm").css("opacity", Config.timerOpacity);
        if (!$("#liveAcc").hasClass("hidden"))
            return;
        $("#liveAcc").removeClass("hidden").css("opacity", 0).animate({
            opacity: config_1.default.timerOpacity,
        }, 125);
    }
}
exports.show = show;
function hide() {
    // $("#liveWpm").css("opacity", 0);
    // $("#miniTimerAndLiveWpm .wpm").css("opacity", 0);
    $("#liveAcc").animate({
        opacity: config_1.default.timerOpacity,
    }, 125, () => {
        $("#liveAcc").addClass("hidden");
    });
    $("#miniTimerAndLiveWpm .acc").animate({
        opacity: config_1.default.timerOpacity,
    }, 125, () => {
        $("#miniTimerAndLiveWpm .acc").addClass("hidden");
    });
}
exports.hide = hide;
ConfigEvent.subscribe((eventKey, eventValue) => {
    if (eventKey === "showLiveAcc")
        eventValue ? show() : hide();
});


/***/ }),

/***/ "./src/scripts/test/live-burst.ts":
/*!****************************************!*\
  !*** ./src/scripts/test/live-burst.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hide = exports.show = exports.update = void 0;
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const TestActive = __importStar(__webpack_require__(/*! ../states/test-active */ "./src/scripts/states/test-active.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
function update(burst) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!config_1.default.showLiveBurst)
            return;
        let number = burst;
        if (config_1.default.blindMode) {
            number = 0;
        }
        document.querySelector("#miniTimerAndLiveWpm .burst").innerHTML =
            number.toString();
        document.querySelector("#liveBurst").innerHTML =
            number.toString();
    });
}
exports.update = update;
function show() {
    if (!config_1.default.showLiveBurst)
        return;
    if (!TestActive.get())
        return;
    if (config_1.default.timerStyle === "mini") {
        if (!$("#miniTimerAndLiveWpm .burst").hasClass("hidden"))
            return;
        $("#miniTimerAndLiveWpm .burst")
            .removeClass("hidden")
            .css("opacity", 0)
            .animate({
            opacity: config_1.default.timerOpacity,
        }, 125);
    }
    else {
        if (!$("#liveBurst").hasClass("hidden"))
            return;
        $("#liveBurst").removeClass("hidden").css("opacity", 0).animate({
            opacity: config_1.default.timerOpacity,
        }, 125);
    }
}
exports.show = show;
function hide() {
    $("#liveBurst").animate({
        opacity: config_1.default.timerOpacity,
    }, 125, () => {
        $("#liveBurst").addClass("hidden");
    });
    $("#miniTimerAndLiveWpm .burst").animate({
        opacity: config_1.default.timerOpacity,
    }, 125, () => {
        $("#miniTimerAndLiveWpm .burst").addClass("hidden");
    });
}
exports.hide = hide;
ConfigEvent.subscribe((eventKey, eventValue) => {
    if (eventKey === "showLiveBurst")
        eventValue ? show() : hide();
});


/***/ }),

/***/ "./src/scripts/test/live-wpm.ts":
/*!**************************************!*\
  !*** ./src/scripts/test/live-wpm.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hide = exports.show = exports.update = void 0;
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const TestActive = __importStar(__webpack_require__(/*! ../states/test-active */ "./src/scripts/states/test-active.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const liveWpmElement = document.querySelector("#liveWpm");
const miniLiveWpmElement = document.querySelector("#miniTimerAndLiveWpm .wpm");
function update(wpm, raw) {
    // if (!TestActive.get() || !Config.showLiveWpm) {
    //   hideLiveWpm();
    // } else {
    //   showLiveWpm();
    // }
    let number = wpm;
    if (config_1.default.blindMode) {
        number = raw;
    }
    if (config_1.default.alwaysShowCPM) {
        number = Math.round(number * 5);
    }
    miniLiveWpmElement.innerHTML = number.toString();
    liveWpmElement.innerHTML = number.toString();
}
exports.update = update;
function show() {
    if (!config_1.default.showLiveWpm)
        return;
    if (!TestActive.get())
        return;
    if (config_1.default.timerStyle === "mini") {
        // $("#miniTimerAndLiveWpm .wpm").css("opacity", Config.timerOpacity);
        if (!$("#miniTimerAndLiveWpm .wpm").hasClass("hidden"))
            return;
        $("#miniTimerAndLiveWpm .wpm")
            .removeClass("hidden")
            .css("opacity", 0)
            .animate({
            opacity: config_1.default.timerOpacity,
        }, 125);
    }
    else {
        // $("#liveWpm").css("opacity", Config.timerOpacity);
        if (!$("#liveWpm").hasClass("hidden"))
            return;
        $("#liveWpm").removeClass("hidden").css("opacity", 0).animate({
            opacity: config_1.default.timerOpacity,
        }, 125);
    }
}
exports.show = show;
function hide() {
    $("#liveWpm").animate({
        opacity: config_1.default.timerOpacity,
    }, 125, () => {
        $("#liveWpm").addClass("hidden");
    });
    $("#miniTimerAndLiveWpm .wpm").animate({
        opacity: config_1.default.timerOpacity,
    }, 125, () => {
        $("#miniTimerAndLiveWpm .wpm").addClass("hidden");
    });
}
exports.hide = hide;
ConfigEvent.subscribe((eventKey, eventValue) => {
    if (eventKey === "showLiveWpm")
        eventValue ? show() : hide();
});


/***/ }),

/***/ "./src/scripts/test/manual-restart-tracker.ts":
/*!****************************************************!*\
  !*** ./src/scripts/test/manual-restart-tracker.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.get = exports.reset = exports.set = void 0;
let state = false;
function set() {
    state = true;
}
exports.set = set;
function reset() {
    state = false;
}
exports.reset = reset;
function get() {
    return state;
}
exports.get = get;


/***/ }),

/***/ "./src/scripts/test/monkey.ts":
/*!************************************!*\
  !*** ./src/scripts/test/monkey.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hide = exports.show = exports.stop = exports.type = exports.updateFastOpacity = void 0;
const misc_1 = __webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts");
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const TestActive = __importStar(__webpack_require__(/*! ../states/test-active */ "./src/scripts/states/test-active.ts"));
ConfigEvent.subscribe((eventKey) => {
    if (eventKey === "monkey" && TestActive.get()) {
        if (config_1.default.monkey) {
            $("#monkey").removeClass("hidden");
        }
        else {
            $("#monkey").addClass("hidden");
        }
    }
});
let left = false;
let right = false;
// 0 hand up
// 1 hand down
// 00 both hands up
// 01 right hand down
// 10 left hand down
// 11 both hands down
const elements = {
    "00": document.querySelector("#monkey .up"),
    "01": document.querySelector("#monkey .right"),
    "10": document.querySelector("#monkey .left"),
    "11": document.querySelector("#monkey .both"),
};
const elementsFast = {
    "00": document.querySelector("#monkey .fast .up"),
    "01": document.querySelector("#monkey .fast .right"),
    "10": document.querySelector("#monkey .fast .left"),
    "11": document.querySelector("#monkey .fast .both"),
};
let last = "right";
function toBit(b) {
    return b ? "1" : "0";
}
function update() {
    var _a, _b, _c;
    if (!config_1.default.monkey)
        return;
    if (!((_a = document.querySelector("#monkey")) === null || _a === void 0 ? void 0 : _a.classList.contains("hidden"))) {
        Object.keys(elements).forEach((key) => {
            var _a;
            (_a = elements[key]) === null || _a === void 0 ? void 0 : _a.classList.add("hidden");
        });
        Object.keys(elementsFast).forEach((key) => {
            var _a;
            (_a = elementsFast[key]) === null || _a === void 0 ? void 0 : _a.classList.add("hidden");
        });
        const id = `${toBit(left)}${toBit(right)}`;
        (_b = elements[id]) === null || _b === void 0 ? void 0 : _b.classList.remove("hidden");
        (_c = elementsFast[id]) === null || _c === void 0 ? void 0 : _c.classList.remove("hidden");
    }
}
function updateFastOpacity(num) {
    if (!config_1.default.monkey)
        return;
    const opacity = (0, misc_1.mapRange)(num, 130, 180, 0, 1);
    $("#monkey .fast").animate({ opacity: opacity }, 1000);
    let animDuration = (0, misc_1.mapRange)(num, 130, 180, 0.25, 0.01);
    if (animDuration == 0.25)
        animDuration = 0;
    $("#monkey").css({ animationDuration: animDuration + "s" });
}
exports.updateFastOpacity = updateFastOpacity;
function type() {
    if (!config_1.default.monkey)
        return;
    if (!left && last == "right") {
        left = true;
        last = "left";
    }
    else if (!right) {
        right = true;
        last = "right";
    }
    update();
}
exports.type = type;
function stop() {
    if (!config_1.default.monkey)
        return;
    if (left) {
        left = false;
    }
    else if (right) {
        right = false;
    }
    update();
}
exports.stop = stop;
function show() {
    if (!config_1.default.monkey)
        return;
    $("#monkey")
        .css("opacity", 0)
        .removeClass("hidden")
        .animate({ opacity: 1 }, 125);
}
exports.show = show;
function hide() {
    $("#monkey")
        .css("opacity", 1)
        .animate({ opacity: 1 }, 125, () => {
        $("#monkey").addClass("hidden");
    });
}
exports.hide = hide;


/***/ }),

/***/ "./src/scripts/test/out-of-focus.ts":
/*!******************************************!*\
  !*** ./src/scripts/test/out-of-focus.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.show = exports.hide = void 0;
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const outOfFocusTimeouts = [];
function hide() {
    $("#words").css("transition", "none").removeClass("blurred");
    $(".outOfFocusWarning").addClass("hidden");
    Misc.clearTimeouts(outOfFocusTimeouts);
}
exports.hide = hide;
function show() {
    outOfFocusTimeouts.push(setTimeout(() => {
        $("#words").css("transition", "0.25s").addClass("blurred");
        $(".outOfFocusWarning").removeClass("hidden");
    }, 1000));
}
exports.show = show;


/***/ }),

/***/ "./src/scripts/test/pace-caret.ts":
/*!****************************************!*\
  !*** ./src/scripts/test/pace-caret.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.start = exports.handleSpace = exports.reset = exports.update = exports.init = exports.settings = void 0;
const TestStats = __importStar(__webpack_require__(/*! ./test-stats */ "./src/scripts/test/test-stats.ts"));
const TestWords = __importStar(__webpack_require__(/*! ./test-words */ "./src/scripts/test/test-words.ts"));
const TestUI = __importStar(__webpack_require__(/*! ./test-ui */ "./src/scripts/test/test-ui.ts"));
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const SlowTimer = __importStar(__webpack_require__(/*! ../states/slow-timer */ "./src/scripts/states/slow-timer.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const TestActive = __importStar(__webpack_require__(/*! ../states/test-active */ "./src/scripts/states/test-active.ts"));
const TestState = __importStar(__webpack_require__(/*! ./test-state */ "./src/scripts/test/test-state.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
exports.settings = null;
function resetCaretPosition() {
    var _a;
    if (config_1.default.paceCaret === "off" && !TestState.isPaceRepeat)
        return;
    if (!$("#paceCaret").hasClass("hidden")) {
        $("#paceCaret").addClass("hidden");
    }
    if (config_1.default.mode === "zen")
        return;
    const caret = $("#paceCaret");
    const firstLetter = ((_a = document === null || document === void 0 ? void 0 : document.querySelector("#words .word")) === null || _a === void 0 ? void 0 : _a.querySelector("letter"));
    const firstLetterHeight = $(firstLetter).height();
    if (firstLetter === undefined || firstLetterHeight === undefined)
        return;
    caret.stop(true, true).animate({
        top: firstLetter.offsetTop - firstLetterHeight / 4,
        left: firstLetter.offsetLeft,
    }, 0, "linear");
}
function init() {
    return __awaiter(this, void 0, void 0, function* () {
        $("#paceCaret").addClass("hidden");
        const mode2 = Misc.getMode2(config_1.default, TestWords.randomQuote);
        let wpm;
        if (config_1.default.paceCaret === "pb") {
            wpm = yield DB.getLocalPB(config_1.default.mode, mode2, config_1.default.punctuation, config_1.default.language, config_1.default.difficulty, config_1.default.lazyMode, config_1.default.funbox);
        }
        else if (config_1.default.paceCaret === "average") {
            [wpm] = yield DB.getUserAverage10(config_1.default.mode, mode2, config_1.default.punctuation, config_1.default.language, config_1.default.difficulty, config_1.default.lazyMode);
            wpm = Math.round(wpm);
        }
        else if (config_1.default.paceCaret === "custom") {
            wpm = config_1.default.paceCaretCustomSpeed;
        }
        else if (TestState.isPaceRepeat == true) {
            wpm = TestStats.lastTestWpm;
        }
        if (wpm === undefined || wpm < 1 || Number.isNaN(wpm)) {
            exports.settings = null;
            return;
        }
        const characters = wpm * 5;
        const cps = characters / 60; //characters per step
        const spc = 60 / characters; //seconds per character
        exports.settings = {
            wpm: wpm,
            cps: cps,
            spc: spc,
            correction: 0,
            currentWordIndex: 0,
            currentLetterIndex: -1,
            wordsStatus: {},
            timeout: null,
        };
        resetCaretPosition();
    });
}
exports.init = init;
function update(expectedStepEnd) {
    if (exports.settings === null || !TestActive.get() || TestUI.resultVisible) {
        return;
    }
    // if ($("#paceCaret").hasClass("hidden")) {
    //   $("#paceCaret").removeClass("hidden");
    // }
    try {
        exports.settings.currentLetterIndex++;
        if (exports.settings.currentLetterIndex >=
            TestWords.words.get(exports.settings.currentWordIndex).length) {
            //go to the next word
            exports.settings.currentLetterIndex = -1;
            exports.settings.currentWordIndex++;
        }
        if (!config_1.default.blindMode) {
            if (exports.settings.correction < 0) {
                while (exports.settings.correction < 0) {
                    exports.settings.currentLetterIndex--;
                    if (exports.settings.currentLetterIndex <= -2) {
                        //go to the previous word
                        exports.settings.currentLetterIndex =
                            TestWords.words.get(exports.settings.currentWordIndex - 1).length - 1;
                        exports.settings.currentWordIndex--;
                    }
                    exports.settings.correction++;
                }
            }
            else if (exports.settings.correction > 0) {
                while (exports.settings.correction > 0) {
                    exports.settings.currentLetterIndex++;
                    if (exports.settings.currentLetterIndex >=
                        TestWords.words.get(exports.settings.currentWordIndex).length) {
                        //go to the next word
                        exports.settings.currentLetterIndex = -1;
                        exports.settings.currentWordIndex++;
                    }
                    exports.settings.correction--;
                }
            }
        }
    }
    catch (e) {
        //out of words
        exports.settings = null;
        $("#paceCaret").addClass("hidden");
        return;
    }
    try {
        const caret = $("#paceCaret");
        let currentLetter;
        let newTop;
        let newLeft;
        try {
            const newIndex = exports.settings.currentWordIndex -
                (TestWords.words.currentIndex - TestUI.currentWordElementIndex);
            const word = document.querySelectorAll("#words .word")[newIndex];
            if (exports.settings.currentLetterIndex === -1) {
                currentLetter = word.querySelectorAll("letter")[0];
            }
            else {
                currentLetter = (word.querySelectorAll("letter")[exports.settings.currentLetterIndex]);
            }
            const currentLetterHeight = $(currentLetter).height(), currentLetterWidth = $(currentLetter).width(), caretWidth = caret.width();
            if (currentLetterHeight === undefined ||
                currentLetterWidth === undefined ||
                caretWidth === undefined) {
                throw ``;
            }
            newTop = currentLetter.offsetTop - currentLetterHeight / 5;
            newLeft;
            if (exports.settings.currentLetterIndex === -1) {
                newLeft = currentLetter.offsetLeft;
            }
            else {
                newLeft =
                    currentLetter.offsetLeft + currentLetterWidth - caretWidth / 2;
            }
            caret.removeClass("hidden");
        }
        catch (e) {
            caret.addClass("hidden");
        }
        const duration = expectedStepEnd - performance.now();
        if (newTop !== undefined) {
            let smoothlinescroll = $("#words .smoothScroller").height();
            if (smoothlinescroll === undefined)
                smoothlinescroll = 0;
            $("#paceCaret").css({
                top: newTop - smoothlinescroll,
            });
            if (config_1.default.smoothCaret) {
                caret.stop(true, true).animate({
                    left: newLeft,
                }, SlowTimer.get() ? 0 : duration, "linear");
            }
            else {
                caret.stop(true, true).animate({
                    left: newLeft,
                }, 0, "linear");
            }
        }
        exports.settings.timeout = setTimeout(() => {
            var _a;
            try {
                update(expectedStepEnd + ((_a = exports.settings === null || exports.settings === void 0 ? void 0 : exports.settings.spc) !== null && _a !== void 0 ? _a : 0) * 1000);
            }
            catch (e) {
                exports.settings = null;
            }
        }, duration);
    }
    catch (e) {
        console.error(e);
        $("#paceCaret").addClass("hidden");
    }
}
exports.update = update;
function reset() {
    if (exports.settings !== null && exports.settings.timeout !== null) {
        clearTimeout(exports.settings.timeout);
    }
    exports.settings = null;
}
exports.reset = reset;
function handleSpace(correct, currentWord) {
    if (correct) {
        if (exports.settings !== null &&
            exports.settings.wordsStatus[TestWords.words.currentIndex] === true &&
            !config_1.default.blindMode) {
            exports.settings.wordsStatus[TestWords.words.currentIndex] = undefined;
            exports.settings.correction -= currentWord.length + 1;
        }
    }
    else {
        if (exports.settings !== null &&
            exports.settings.wordsStatus[TestWords.words.currentIndex] === undefined &&
            !config_1.default.blindMode) {
            exports.settings.wordsStatus[TestWords.words.currentIndex] = true;
            exports.settings.correction += currentWord.length + 1;
        }
    }
}
exports.handleSpace = handleSpace;
function start() {
    var _a;
    update(performance.now() + ((_a = exports.settings === null || exports.settings === void 0 ? void 0 : exports.settings.spc) !== null && _a !== void 0 ? _a : 0) * 1000);
}
exports.start = start;
ConfigEvent.subscribe((eventKey) => {
    if (eventKey === "paceCaret")
        init();
});


/***/ }),

/***/ "./src/scripts/test/pb-crown.ts":
/*!**************************************!*\
  !*** ./src/scripts/test/pb-crown.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.show = exports.hide = void 0;
function hide() {
    $("#result .stats .wpm .crown").css("opacity", 0).addClass("hidden");
}
exports.hide = hide;
function show() {
    $("#result .stats .wpm .crown")
        .removeClass("hidden")
        .css("opacity", "0")
        .animate({
        opacity: 1,
    }, 250, "easeOutCubic");
}
exports.show = show;


/***/ }),

/***/ "./src/scripts/test/poetry.ts":
/*!************************************!*\
  !*** ./src/scripts/test/poetry.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getPoem = exports.Poem = void 0;
const axios_1 = __importDefault(__webpack_require__(/*! axios */ "./node_modules/axios/index.js"));
const bannedChars = ["—", "_", " "];
const maxWords = 100;
const apiURL = "https://poetrydb.org/random";
class Poem {
    constructor(title, author, words) {
        this.title = title;
        this.author = author;
        this.words = words;
        this.cleanUpText();
    }
    cleanUpText() {
        let count = 0;
        const scrubbedWords = [];
        for (let i = 0; i < this.words.length; i++) {
            let scrubbed = "";
            for (let j = 0; j < this.words[i].length; j++) {
                if (!bannedChars.includes(this.words[i][j])) {
                    scrubbed += this.words[i][j];
                }
            }
            if (scrubbed == "")
                continue;
            scrubbedWords.push(scrubbed);
            count++;
            if (count == maxWords)
                break;
        }
        this.words = scrubbedWords;
    }
}
exports.Poem = Poem;
function getPoem() {
    return __awaiter(this, void 0, void 0, function* () {
        console.log("Getting poem");
        const response = yield axios_1.default.get(apiURL);
        try {
            const poemObj = response.data[0];
            const words = [];
            poemObj.lines.forEach((line) => {
                line.split(/ +/).forEach((word) => {
                    words.push(word);
                });
            });
            return new Poem(poemObj.title, poemObj.author, words);
        }
        catch (e) {
            console.log(e);
        }
        return;
    });
}
exports.getPoem = getPoem;


/***/ }),

/***/ "./src/scripts/test/practise-words.ts":
/*!********************************************!*\
  !*** ./src/scripts/test/practise-words.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hidePopup = exports.showPopup = exports.resetBefore = exports.init = exports.before = void 0;
const TestWords = __importStar(__webpack_require__(/*! ./test-words */ "./src/scripts/test/test-words.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const CustomText = __importStar(__webpack_require__(/*! ./custom-text */ "./src/scripts/test/custom-text.ts"));
const TestInput = __importStar(__webpack_require__(/*! ./test-input */ "./src/scripts/test/test-input.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
exports.before = {
    mode: null,
    punctuation: null,
    numbers: null,
};
function init(missed, slow) {
    if (config_1.default.mode === "zen")
        return;
    let limit;
    if ((missed && !slow) || (!missed && slow)) {
        limit = 20;
    }
    else if (missed && slow) {
        limit = 10;
    }
    else {
        limit = 10;
    }
    let sortableMissedWords = [];
    if (missed) {
        Object.keys(TestInput.missedWords).forEach((missedWord) => {
            sortableMissedWords.push([missedWord, TestInput.missedWords[missedWord]]);
        });
        sortableMissedWords.sort((a, b) => {
            return b[1] - a[1];
        });
        sortableMissedWords = sortableMissedWords.slice(0, limit);
    }
    if (missed && !slow && sortableMissedWords.length == 0) {
        Notifications.add("You haven't missed any words", 0);
        return;
    }
    let sortableSlowWords = [];
    if (slow) {
        sortableSlowWords = TestWords.words.get().map((e, i) => [
            e,
            TestInput.burstHistory[i],
        ]);
        sortableSlowWords.sort((a, b) => {
            return a[1] - b[1];
        });
        sortableSlowWords = sortableSlowWords.slice(0, Math.min(limit, Math.round(TestWords.words.length * 0.2)));
    }
    // console.log(sortableMissedWords);
    // console.log(sortableSlowWords);
    if (sortableMissedWords.length == 0 && sortableSlowWords.length == 0) {
        Notifications.add("Could not start a new custom test", 0);
        return;
    }
    const newCustomText = [];
    sortableMissedWords.forEach((missed) => {
        for (let i = 0; i < missed[1]; i++) {
            newCustomText.push(missed[0]);
        }
    });
    sortableSlowWords.forEach((slow, index) => {
        for (let i = 0; i < sortableSlowWords.length - index; i++) {
            newCustomText.push(slow[0]);
        }
    });
    // console.log(newCustomText);
    const mode = exports.before.mode === null ? config_1.default.mode : exports.before.mode;
    const punctuation = exports.before.punctuation === null ? config_1.default.punctuation : exports.before.punctuation;
    const numbers = exports.before.numbers === null ? config_1.default.numbers : exports.before.numbers;
    UpdateConfig.setMode("custom");
    CustomText.setText(newCustomText);
    CustomText.setIsWordRandom(true);
    CustomText.setWord((sortableSlowWords.length + sortableMissedWords.length) * 5);
    CustomText.setTime(-1);
    exports.before.mode = mode;
    exports.before.punctuation = punctuation;
    exports.before.numbers = numbers;
}
exports.init = init;
function resetBefore() {
    exports.before.mode = null;
    exports.before.punctuation = null;
    exports.before.numbers = null;
}
exports.resetBefore = resetBefore;
function showPopup(focus = false) {
    if ($("#practiseWordsPopupWrapper").hasClass("hidden")) {
        if (config_1.default.mode === "zen") {
            Notifications.add("Practice words is unsupported in zen mode", 0);
            return;
        }
        $("#practiseWordsPopupWrapper")
            .stop(true, true)
            .css("opacity", 0)
            .removeClass("hidden")
            .animate({ opacity: 1 }, 100, () => {
            if (focus) {
                console.log("focusing");
                $("#practiseWordsPopup .missed").trigger("focus");
            }
        });
    }
}
exports.showPopup = showPopup;
function hidePopup() {
    if (!$("#practiseWordsPopupWrapper").hasClass("hidden")) {
        $("#practiseWordsPopupWrapper")
            .stop(true, true)
            .css("opacity", 1)
            .animate({
            opacity: 0,
        }, 100, () => {
            $("#practiseWordsPopupWrapper").addClass("hidden");
        });
    }
}
exports.hidePopup = hidePopup;
$("#practiseWordsPopupWrapper").on("click", (e) => {
    if ($(e.target).attr("id") === "practiseWordsPopupWrapper") {
        hidePopup();
    }
});
$("#practiseWordsPopup .button").on("keypress", (e) => {
    if (e.key === "Enter") {
        $(e.currentTarget).click();
    }
});
$("#practiseWordsPopup .button.both").on("focusout", (e) => {
    e.preventDefault();
    $("#practiseWordsPopup .missed").trigger("focus");
});
$(document).on("keydown", (event) => {
    if (event.key === "Escape" &&
        !$("#practiseWordsPopupWrapper").hasClass("hidden")) {
        hidePopup();
        event.preventDefault();
    }
});
$(document).on("keypress", "#practiseWordsButton", (event) => {
    if (event.key === "Enter") {
        showPopup(true);
    }
});
$(document.body).on("click", "#practiseWordsButton", () => {
    showPopup();
});
ConfigEvent.subscribe((eventKey) => {
    if (eventKey === "mode")
        resetBefore();
});


/***/ }),

/***/ "./src/scripts/test/replay.ts":
/*!************************************!*\
  !*** ./src/scripts/test/replay.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getReplayExport = exports.replayGetWordsList = exports.addReplayEvent = exports.stopReplayRecording = exports.startReplayRecording = exports.pauseReplay = void 0;
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const Sound = __importStar(__webpack_require__(/*! ../controllers/sound-controller */ "./src/scripts/controllers/sound-controller.ts"));
let wordsList = [];
let replayData = [];
let replayStartTime = 0;
let replayRecording = true;
let wordPos = 0;
let curPos = 0;
let targetWordPos = 0;
let targetCurPos = 0;
let timeoutList = [];
let stopwatchList = [];
const toggleButton = (_a = document.getElementById("playpauseReplayButton")) === null || _a === void 0 ? void 0 : _a.children[0];
function replayGetWordsList(wordsListFromScript) {
    wordsList = wordsListFromScript;
}
exports.replayGetWordsList = replayGetWordsList;
function initializeReplayPrompt() {
    const replayWordsElement = document.getElementById("replayWords");
    if (replayWordsElement === null)
        return;
    replayWordsElement.innerHTML = "";
    let wordCount = 0;
    replayData.forEach((item) => {
        //trim wordsList for timed tests
        if (item.action === "backWord") {
            wordCount--;
        }
        else if (item.action === "submitCorrectWord" ||
            item.action === "submitErrorWord") {
            wordCount++;
        }
    });
    wordsList.forEach((item, i) => {
        if (i > wordCount)
            return;
        const x = document.createElement("div");
        x.className = "word";
        for (i = 0; i < item.length; i++) {
            const letter = document.createElement("letter");
            letter.innerHTML = item[i];
            x.appendChild(letter);
        }
        replayWordsElement.appendChild(x);
    });
}
function pauseReplay() {
    var _a;
    timeoutList.forEach((item) => {
        clearTimeout(item);
    });
    timeoutList = [];
    stopwatchList.forEach((item) => {
        clearTimeout(item);
    });
    stopwatchList = [];
    targetCurPos = curPos;
    targetWordPos = wordPos;
    if (toggleButton === undefined)
        return;
    toggleButton.className = "fas fa-play";
    (_a = toggleButton.parentNode) === null || _a === void 0 ? void 0 : _a.setAttribute("aria-label", "Resume replay");
}
exports.pauseReplay = pauseReplay;
function playSound(error = false) {
    if (error) {
        if (config_1.default.playSoundOnError) {
            Sound.playError();
        }
        else {
            Sound.playClick();
        }
    }
    else {
        Sound.playClick();
    }
}
function handleDisplayLogic(item, nosound = false) {
    var _a, _b, _c;
    let activeWord = (_a = document.getElementById("replayWords")) === null || _a === void 0 ? void 0 : _a.children[wordPos];
    if (activeWord === undefined)
        return;
    if (item.action === "correctLetter") {
        if (!nosound)
            playSound();
        activeWord.children[curPos].classList.add("correct");
        curPos++;
    }
    else if (item.action === "incorrectLetter") {
        if (!nosound)
            playSound(true);
        let myElement;
        if (curPos >= activeWord.children.length) {
            //if letter is an extra
            myElement = document.createElement("letter");
            myElement.classList.add("extra");
            myElement.innerHTML = (_c = (_b = item.value) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : "";
            activeWord.appendChild(myElement);
        }
        myElement = activeWord.children[curPos];
        myElement.classList.add("incorrect");
        curPos++;
    }
    else if (item.action === "setLetterIndex" &&
        typeof item.value === "number") {
        if (!nosound)
            playSound();
        curPos = item.value;
        // remove all letters from cursor to end of word
        for (const myElement of [...activeWord.children].slice(curPos)) {
            if (myElement.classList.contains("extra")) {
                myElement.remove();
            }
            else {
                myElement.className = "";
            }
        }
    }
    else if (item.action === "submitCorrectWord") {
        if (!nosound)
            playSound();
        wordPos++;
        curPos = 0;
    }
    else if (item.action === "submitErrorWord") {
        if (!nosound)
            playSound(true);
        activeWord.classList.add("error");
        wordPos++;
        curPos = 0;
    }
    else if (item.action === "backWord") {
        if (!nosound)
            playSound();
        wordPos--;
        const replayWords = document.getElementById("replayWords");
        if (replayWords !== null)
            activeWord = replayWords.children[wordPos];
        curPos = activeWord.children.length;
        while (activeWord.children[curPos - 1].className === "")
            curPos--;
        activeWord.classList.remove("error");
    }
}
function loadOldReplay() {
    let startingIndex = 0;
    curPos = 0;
    wordPos = 0;
    replayData.forEach((item, i) => {
        if (wordPos < targetWordPos ||
            (wordPos === targetWordPos && curPos < targetCurPos)) {
            //quickly display everything up to the target
            handleDisplayLogic(item, true);
            startingIndex = i + 1;
        }
    });
    const time = Math.floor(replayData[startingIndex].time / 1000);
    $("#replayStopwatch").text(time + "s");
    return startingIndex;
}
function toggleReplayDisplay() {
    var _a;
    if ($("#resultReplay").stop(true, true).hasClass("hidden")) {
        initializeReplayPrompt();
        loadOldReplay();
        //show
        if (!$("#watchReplayButton").hasClass("loaded")) {
            $("#words").html(`<div class="preloader"><i class="fas fa-fw fa-spin fa-circle-notch"></i></div>`);
            $("#resultReplay")
                .removeClass("hidden")
                .css("display", "none")
                .slideDown(250);
        }
        else {
            $("#resultReplay")
                .removeClass("hidden")
                .css("display", "none")
                .slideDown(250);
        }
    }
    else {
        //hide
        if (((_a = toggleButton === null || toggleButton === void 0 ? void 0 : toggleButton.parentNode) === null || _a === void 0 ? void 0 : _a.getAttribute("aria-label")) !=
            "Start replay") {
            pauseReplay();
        }
        $("#resultReplay").slideUp(250, () => {
            $("#resultReplay").addClass("hidden");
        });
    }
}
function startReplayRecording() {
    if (!$("#resultReplay").stop(true, true).hasClass("hidden")) {
        //hide replay display if user left it open
        toggleReplayDisplay();
    }
    $("#replayStopwatch").text(0 + "s");
    replayData = [];
    replayStartTime = performance.now();
    replayRecording = true;
    targetCurPos = 0;
    targetWordPos = 0;
}
exports.startReplayRecording = startReplayRecording;
function stopReplayRecording() {
    replayRecording = false;
}
exports.stopReplayRecording = stopReplayRecording;
function addReplayEvent(action, value) {
    if (!replayRecording) {
        return;
    }
    const timeDelta = performance.now() - replayStartTime;
    replayData.push({ action: action, value: value, time: timeDelta });
}
exports.addReplayEvent = addReplayEvent;
function playReplay() {
    var _a;
    curPos = 0;
    wordPos = 0;
    if (toggleButton === undefined)
        return;
    toggleButton.className = "fas fa-pause";
    (_a = toggleButton.parentNode) === null || _a === void 0 ? void 0 : _a.setAttribute("aria-label", "Pause replay");
    initializeReplayPrompt();
    const startingIndex = loadOldReplay();
    const lastTime = replayData[startingIndex].time;
    let swTime = Math.round(lastTime / 1000); //starting time
    const swEndTime = Math.round(replayData[replayData.length - 1].time / 1000);
    while (swTime <= swEndTime) {
        const time = swTime;
        stopwatchList.push(setTimeout(() => {
            $("#replayStopwatch").text(time + "s");
        }, time * 1000 - lastTime));
        swTime++;
    }
    replayData.forEach((item, i) => {
        if (i < startingIndex)
            return;
        timeoutList.push(setTimeout(() => {
            handleDisplayLogic(item);
        }, item.time - lastTime));
    });
    timeoutList.push(setTimeout(() => {
        //after the replay has finished, this will run
        targetCurPos = 0;
        targetWordPos = 0;
        toggleButton.className = "fas fa-play";
        toggleButton.parentNode.setAttribute("aria-label", "Start replay");
    }, replayData[replayData.length - 1].time - lastTime));
}
function getReplayExport() {
    return JSON.stringify({
        replayData: replayData,
        wordsList: wordsList,
    });
}
exports.getReplayExport = getReplayExport;
$(".pageTest #playpauseReplayButton").on("click", () => {
    if ((toggleButton === null || toggleButton === void 0 ? void 0 : toggleButton.className) === "fas fa-play") {
        playReplay();
    }
    else if ((toggleButton === null || toggleButton === void 0 ? void 0 : toggleButton.className) === "fas fa-pause") {
        pauseReplay();
    }
});
$("#replayWords").on("click", "letter", (event) => {
    var _a;
    //allows user to click on the place they want to start their replay at
    pauseReplay();
    const replayWords = document.querySelector("#replayWords");
    const words = [...((_a = replayWords === null || replayWords === void 0 ? void 0 : replayWords.children) !== null && _a !== void 0 ? _a : [])];
    targetWordPos = words.indexOf(event.target.parentNode);
    const letters = [...words[targetWordPos].children];
    targetCurPos = letters.indexOf(event.target);
    initializeReplayPrompt();
    loadOldReplay();
});
$(document).on("keypress", "#watchReplayButton", (event) => {
    if (event.key === "Enter") {
        toggleReplayDisplay();
    }
});
$(document.body).on("click", "#watchReplayButton", () => {
    toggleReplayDisplay();
});


/***/ }),

/***/ "./src/scripts/test/result.ts":
/*!************************************!*\
  !*** ./src/scripts/test/result.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.update = exports.updateRateQuote = exports.updateCrown = exports.hideCrown = exports.showCrown = exports.updateTodayTracker = exports.updateGraphPBLine = exports.toggleUnsmoothedRaw = void 0;
const TestUI = __importStar(__webpack_require__(/*! ./test-ui */ "./src/scripts/test/test-ui.ts"));
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const TestStats = __importStar(__webpack_require__(/*! ./test-stats */ "./src/scripts/test/test-stats.ts"));
const Keymap = __importStar(__webpack_require__(/*! ../elements/keymap */ "./src/scripts/elements/keymap.ts"));
const ChartController = __importStar(__webpack_require__(/*! ../controllers/chart-controller */ "./src/scripts/controllers/chart-controller.ts"));
const ThemeColors = __importStar(__webpack_require__(/*! ../elements/theme-colors */ "./src/scripts/elements/theme-colors.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const TodayTracker = __importStar(__webpack_require__(/*! ./today-tracker */ "./src/scripts/test/today-tracker.ts"));
const PbCrown = __importStar(__webpack_require__(/*! ./pb-crown */ "./src/scripts/test/pb-crown.ts"));
const QuoteRatePopup = __importStar(__webpack_require__(/*! ../popups/quote-rate-popup */ "./src/scripts/popups/quote-rate-popup.ts"));
const GlarsesMode = __importStar(__webpack_require__(/*! ../states/glarses-mode */ "./src/scripts/states/glarses-mode.ts"));
const TestInput = __importStar(__webpack_require__(/*! ./test-input */ "./src/scripts/test/test-input.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const ResultsShownEvent = __importStar(__webpack_require__(/*! ../observables/results-shown-event */ "./src/scripts/observables/results-shown-event.ts"));
const chart_js_1 = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/chart.esm.js");
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
let result;
let maxChartVal;
let useUnsmoothedRaw = false;
function toggleUnsmoothedRaw() {
    useUnsmoothedRaw = !useUnsmoothedRaw;
    Notifications.add(useUnsmoothedRaw ? "on" : "off", 1);
}
exports.toggleUnsmoothedRaw = toggleUnsmoothedRaw;
let resultAnnotation = [];
let resultScaleOptions = ChartController.result.options.scales;
function updateGraph() {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const labels = [];
        for (let i = 1; i <= TestInput.wpmHistory.length; i++) {
            if (TestStats.lastSecondNotRound && i === TestInput.wpmHistory.length) {
                labels.push(Misc.roundTo2(result.testDuration).toString());
            }
            else {
                labels.push(i.toString());
            }
        }
        ChartController.result.data.labels = labels;
        resultScaleOptions["wpm"].title.text = config_1.default.alwaysShowCPM
            ? "Character per Minute"
            : "Words per Minute";
        const chartData1 = config_1.default.alwaysShowCPM
            ? TestInput.wpmHistory.map((a) => a * 5)
            : TestInput.wpmHistory;
        let chartData2;
        if (result.chartData === "toolong")
            return;
        if (useUnsmoothedRaw) {
            chartData2 =
                (_b = (config_1.default.alwaysShowCPM
                    ? (_a = result.chartData.unsmoothedRaw) === null || _a === void 0 ? void 0 : _a.map((a) => a * 5)
                    : result.chartData.unsmoothedRaw)) !== null && _b !== void 0 ? _b : [];
        }
        else {
            chartData2 = config_1.default.alwaysShowCPM
                ? result.chartData.raw.map((a) => a * 5)
                : result.chartData.raw;
        }
        ChartController.result.data.datasets[0].data = chartData1;
        ChartController.result.data.datasets[1].data = chartData2;
        ChartController.result.data.datasets[0].label = config_1.default.alwaysShowCPM
            ? "cpm"
            : "wpm";
        maxChartVal = Math.max(...[Math.max(...chartData2), Math.max(...chartData1)]);
        if (!config_1.default.startGraphsAtZero) {
            const minChartVal = Math.min(...[Math.min(...chartData2), Math.min(...chartData1)]);
            resultScaleOptions["wpm"].min = minChartVal;
            resultScaleOptions["raw"].min = minChartVal;
        }
        else {
            resultScaleOptions["wpm"].min = 0;
            resultScaleOptions["raw"].min = 0;
        }
        ChartController.result.data.datasets[2].data = result.chartData.err;
        const fc = yield ThemeColors.get("sub");
        if (config_1.default.funbox !== "none") {
            let content = config_1.default.funbox;
            if (config_1.default.funbox === "layoutfluid") {
                content += " " + config_1.default.customLayoutfluid.replace(/#/g, " ");
            }
            resultAnnotation.push({
                display: true,
                id: "funbox-label",
                type: "line",
                scaleID: "wpm",
                value: resultScaleOptions["wpm"].min,
                borderColor: "transparent",
                borderWidth: 1,
                borderDash: [2, 2],
                label: {
                    backgroundColor: "transparent",
                    font: {
                        family: config_1.default.fontFamily.replace(/_/g, " "),
                        size: 11,
                        style: "normal",
                        weight: chart_js_1.Chart.defaults.font.weight,
                        lineHeight: chart_js_1.Chart.defaults.font.lineHeight,
                    },
                    color: fc,
                    padding: 3,
                    borderRadius: 3,
                    position: "start",
                    enabled: true,
                    content: `${content}`,
                },
            });
        }
        resultScaleOptions["wpm"].max = maxChartVal;
        resultScaleOptions["raw"].max = maxChartVal;
        resultScaleOptions["error"].max = Math.max(...result.chartData.err) + 1;
    });
}
function updateGraphPBLine() {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const themecolors = yield ThemeColors.getAll();
        const lpb = yield DB.getLocalPB(result.mode, result.mode2, (_a = result.punctuation) !== null && _a !== void 0 ? _a : false, result.language, result.difficulty, (_b = result.lazyMode) !== null && _b !== void 0 ? _b : false, (_c = result.funbox) !== null && _c !== void 0 ? _c : "none");
        if (lpb == 0)
            return;
        const chartlpb = Misc.roundTo2(config_1.default.alwaysShowCPM ? lpb * 5 : lpb).toFixed(2);
        resultAnnotation.push({
            display: true,
            type: "line",
            id: "lpb",
            scaleID: "wpm",
            value: chartlpb,
            borderColor: themecolors["sub"],
            borderWidth: 1,
            borderDash: [2, 2],
            label: {
                backgroundColor: themecolors["sub"],
                font: {
                    family: config_1.default.fontFamily.replace(/_/g, " "),
                    size: 11,
                    style: "normal",
                    weight: chart_js_1.Chart.defaults.font.weight,
                    lineHeight: chart_js_1.Chart.defaults.font.lineHeight,
                },
                color: themecolors["bg"],
                padding: 3,
                borderRadius: 3,
                position: "center",
                enabled: true,
                content: `PB: ${chartlpb}`,
            },
        });
        if (maxChartVal >= parseFloat(chartlpb) - 20 &&
            maxChartVal <= parseFloat(chartlpb) + 20) {
            maxChartVal = parseFloat(chartlpb) + 15;
        }
        resultScaleOptions["wpm"].max = Math.round(maxChartVal + 5);
        resultScaleOptions["raw"].max = Math.round(maxChartVal + 5);
    });
}
exports.updateGraphPBLine = updateGraphPBLine;
function updateWpmAndAcc() {
    let inf = false;
    if (result.wpm >= 1000) {
        inf = true;
    }
    if (config_1.default.alwaysShowDecimalPlaces) {
        if (config_1.default.alwaysShowCPM == false) {
            $("#result .stats .wpm .top .text").text("wpm");
            if (inf) {
                $("#result .stats .wpm .bottom").text("Infinite");
            }
            else {
                $("#result .stats .wpm .bottom").text(Misc.roundTo2(result.wpm).toFixed(2));
            }
            $("#result .stats .raw .bottom").text(Misc.roundTo2(result.rawWpm).toFixed(2));
            $("#result .stats .wpm .bottom").attr("aria-label", Misc.roundTo2(result.wpm * 5).toFixed(2) + " cpm");
        }
        else {
            $("#result .stats .wpm .top .text").text("cpm");
            if (inf) {
                $("#result .stats .wpm .bottom").text("Infinite");
            }
            else {
                $("#result .stats .wpm .bottom").text(Misc.roundTo2(result.wpm * 5).toFixed(2));
            }
            $("#result .stats .raw .bottom").text(Misc.roundTo2(result.rawWpm * 5).toFixed(2));
            $("#result .stats .wpm .bottom").attr("aria-label", Misc.roundTo2(result.wpm).toFixed(2) + " wpm");
        }
        $("#result .stats .acc .bottom").text(result.acc == 100 ? "100%" : Misc.roundTo2(result.acc).toFixed(2) + "%");
        let time = Misc.roundTo2(result.testDuration).toFixed(2) + "s";
        if (result.testDuration > 61) {
            time = Misc.secondsToString(Misc.roundTo2(result.testDuration));
        }
        $("#result .stats .time .bottom .text").text(time);
        $("#result .stats .raw .bottom").removeAttr("aria-label");
        $("#result .stats .acc .bottom").removeAttr("aria-label");
    }
    else {
        //not showing decimal places
        if (config_1.default.alwaysShowCPM == false) {
            $("#result .stats .wpm .top .text").text("wpm");
            $("#result .stats .wpm .bottom").attr("aria-label", result.wpm + ` (${Misc.roundTo2(result.wpm * 5)} cpm)`);
            if (inf) {
                $("#result .stats .wpm .bottom").text("Infinite");
            }
            else {
                $("#result .stats .wpm .bottom").text(Math.round(result.wpm));
            }
            $("#result .stats .raw .bottom").text(Math.round(result.rawWpm));
            $("#result .stats .raw .bottom").attr("aria-label", result.rawWpm);
        }
        else {
            $("#result .stats .wpm .top .text").text("cpm");
            $("#result .stats .wpm .bottom").attr("aria-label", Misc.roundTo2(result.wpm * 5) + ` (${Misc.roundTo2(result.wpm)} wpm)`);
            if (inf) {
                $("#result .stats .wpm .bottom").text("Infinite");
            }
            else {
                $("#result .stats .wpm .bottom").text(Math.round(result.wpm * 5));
            }
            $("#result .stats .raw .bottom").text(Math.round(result.rawWpm * 5));
            $("#result .stats .raw .bottom").attr("aria-label", result.rawWpm * 5);
        }
        $("#result .stats .acc .bottom").text(Math.floor(result.acc) + "%");
        $("#result .stats .acc .bottom").attr("aria-label", result.acc + "%");
    }
}
function updateConsistency() {
    if (config_1.default.alwaysShowDecimalPlaces) {
        $("#result .stats .consistency .bottom").text(Misc.roundTo2(result.consistency).toFixed(2) + "%");
        $("#result .stats .consistency .bottom").attr("aria-label", `${result.keyConsistency.toFixed(2)}% key`);
    }
    else {
        $("#result .stats .consistency .bottom").text(Math.round(result.consistency) + "%");
        $("#result .stats .consistency .bottom").attr("aria-label", `${result.consistency}% (${result.keyConsistency}% key)`);
    }
}
function updateTime() {
    const afkSecondsPercent = Misc.roundTo2((result.afkDuration / result.testDuration) * 100);
    $("#result .stats .time .bottom .afk").text("");
    if (afkSecondsPercent > 0) {
        $("#result .stats .time .bottom .afk").text(afkSecondsPercent + "% afk");
    }
    $("#result .stats .time .bottom").attr("aria-label", `${result.afkDuration}s afk ${afkSecondsPercent}%`);
    if (config_1.default.alwaysShowDecimalPlaces) {
        let time = Misc.roundTo2(result.testDuration).toFixed(2) + "s";
        if (result.testDuration > 61) {
            time = Misc.secondsToString(Misc.roundTo2(result.testDuration));
        }
        $("#result .stats .time .bottom .text").text(time);
    }
    else {
        let time = Math.round(result.testDuration) + "s";
        if (result.testDuration > 61) {
            time = Misc.secondsToString(Math.round(result.testDuration));
        }
        $("#result .stats .time .bottom .text").text(time);
        $("#result .stats .time .bottom").attr("aria-label", `${Misc.roundTo2(result.testDuration)}s (${result.afkDuration}s afk ${afkSecondsPercent}%)`);
    }
}
function updateTodayTracker() {
    $("#result .stats .time .bottom .timeToday").text(TodayTracker.getString());
}
exports.updateTodayTracker = updateTodayTracker;
function updateKey() {
    $("#result .stats .key .bottom").text(result.charStats[0] +
        "/" +
        result.charStats[1] +
        "/" +
        result.charStats[2] +
        "/" +
        result.charStats[3]);
}
function showCrown() {
    PbCrown.show();
}
exports.showCrown = showCrown;
function hideCrown() {
    PbCrown.hide();
    $("#result .stats .wpm .crown").attr("aria-label", "");
}
exports.hideCrown = hideCrown;
function updateCrown() {
    return __awaiter(this, void 0, void 0, function* () {
        let pbDiff = 0;
        const lpb = yield DB.getLocalPB(config_1.default.mode, result.mode2, config_1.default.punctuation, config_1.default.language, config_1.default.difficulty, config_1.default.lazyMode, config_1.default.funbox);
        pbDiff = Math.abs(result.wpm - lpb);
        $("#result .stats .wpm .crown").attr("aria-label", "+" + Misc.roundTo2(pbDiff));
    });
}
exports.updateCrown = updateCrown;
function updateTags(dontSave) {
    var _a;
    const activeTags = [];
    try {
        (_a = DB.getSnapshot().tags) === null || _a === void 0 ? void 0 : _a.forEach((tag) => {
            if (tag.active === true) {
                activeTags.push(tag);
            }
        });
    }
    catch (e) { }
    $("#result .stats .tags").addClass("hidden");
    if (activeTags.length == 0) {
        $("#result .stats .tags").addClass("hidden");
    }
    else {
        $("#result .stats .tags").removeClass("hidden");
    }
    $("#result .stats .tags .bottom").text("");
    let annotationSide = "start";
    let labelAdjust = 15;
    activeTags.forEach((tag) => __awaiter(this, void 0, void 0, function* () {
        const tpb = yield DB.getLocalTagPB(tag._id, config_1.default.mode, result.mode2, config_1.default.punctuation, config_1.default.language, config_1.default.difficulty, config_1.default.lazyMode);
        $("#result .stats .tags .bottom").append(`
      <div tagid="${tag._id}" aria-label="PB: ${tpb}" data-balloon-pos="up">${tag.name}<i class="fas fa-crown hidden"></i></div>
    `);
        if (config_1.default.mode != "quote" && !dontSave) {
            if (tpb < result.wpm) {
                //new pb for that tag
                DB.saveLocalTagPB(tag._id, config_1.default.mode, result.mode2, config_1.default.punctuation, config_1.default.language, config_1.default.difficulty, config_1.default.lazyMode, result.wpm, result.acc, result.rawWpm, result.consistency);
                $(`#result .stats .tags .bottom div[tagid="${tag._id}"] .fas`).removeClass("hidden");
                $(`#result .stats .tags .bottom div[tagid="${tag._id}"]`).attr("aria-label", "+" + Misc.roundTo2(result.wpm - tpb));
                // console.log("new pb for tag " + tag.name);
            }
            else {
                const themecolors = yield ThemeColors.getAll();
                resultAnnotation.push({
                    display: true,
                    type: "line",
                    id: "tpb",
                    scaleID: "wpm",
                    value: config_1.default.alwaysShowCPM ? tpb * 5 : tpb,
                    borderColor: themecolors["sub"],
                    borderWidth: 1,
                    borderDash: [2, 2],
                    label: {
                        backgroundColor: themecolors["sub"],
                        font: {
                            family: config_1.default.fontFamily.replace(/_/g, " "),
                            size: 11,
                            style: "normal",
                            weight: chart_js_1.Chart.defaults.font.weight,
                            lineHeight: chart_js_1.Chart.defaults.font.lineHeight,
                        },
                        color: themecolors["bg"],
                        padding: 3,
                        borderRadius: 3,
                        position: annotationSide,
                        xAdjust: labelAdjust,
                        enabled: true,
                        content: `${tag.name} PB: ${Misc.roundTo2(config_1.default.alwaysShowCPM ? tpb * 5 : tpb).toFixed(2)}`,
                    },
                });
                if (annotationSide === "start") {
                    annotationSide = "end";
                    labelAdjust = -15;
                }
                else {
                    annotationSide = "start";
                    labelAdjust = 15;
                }
            }
        }
    }));
}
function updateTestType(randomQuote) {
    let testType = "";
    testType += config_1.default.mode;
    if (config_1.default.mode === "time") {
        testType += " " + config_1.default.time;
    }
    else if (config_1.default.mode === "words") {
        testType += " " + config_1.default.words;
    }
    else if (config_1.default.mode === "quote") {
        if (randomQuote.group !== undefined) {
            testType += " " + ["short", "medium", "long", "thicc"][randomQuote.group];
        }
    }
    if (config_1.default.mode != "custom" &&
        config_1.default.funbox !== "gibberish" &&
        config_1.default.funbox !== "ascii" &&
        config_1.default.funbox !== "58008") {
        testType += "<br>" + result.language.replace(/_/g, " ");
    }
    if (config_1.default.punctuation) {
        testType += "<br>punctuation";
    }
    if (config_1.default.numbers) {
        testType += "<br>numbers";
    }
    if (config_1.default.blindMode) {
        testType += "<br>blind";
    }
    if (config_1.default.lazyMode) {
        testType += "<br>lazy";
    }
    if (config_1.default.funbox !== "none") {
        testType += "<br>" + config_1.default.funbox.replace(/_/g, " ");
    }
    if (config_1.default.difficulty == "expert") {
        testType += "<br>expert";
    }
    else if (config_1.default.difficulty == "master") {
        testType += "<br>master";
    }
    $("#result .stats .testType .bottom").html(testType);
}
function updateOther(difficultyFailed, failReason, afkDetected, isRepeated, tooShort) {
    let otherText = "";
    if (difficultyFailed) {
        otherText += `<br>failed (${failReason})`;
    }
    if (afkDetected) {
        otherText += "<br>afk detected";
    }
    if (TestStats.invalid) {
        otherText += "<br>invalid";
        let extra = "";
        if (result.wpm < 0 || result.wpm > 350) {
            extra += "wpm";
        }
        if (result.acc < 75 || result.acc > 100) {
            if (extra.length > 0) {
                extra += ", ";
            }
            extra += "accuracy";
        }
        if (extra.length > 0) {
            otherText += ` (${extra})`;
        }
    }
    if (isRepeated) {
        otherText += "<br>repeated";
    }
    if (result.bailedOut) {
        otherText += "<br>bailed out";
    }
    if (tooShort) {
        otherText += "<br>too short";
    }
    if (otherText == "") {
        $("#result .stats .info").addClass("hidden");
    }
    else {
        $("#result .stats .info").removeClass("hidden");
        otherText = otherText.substring(4);
        $("#result .stats .info .bottom").html(otherText);
    }
}
function updateRateQuote(randomQuote) {
    var _a, _b;
    if (config_1.default.mode === "quote") {
        const userqr = (_b = (_a = DB.getSnapshot().quoteRatings) === null || _a === void 0 ? void 0 : _a[randomQuote.language]) === null || _b === void 0 ? void 0 : _b[randomQuote.id];
        if (userqr) {
            $(".pageTest #result #rateQuoteButton .icon")
                .removeClass("far")
                .addClass("fas");
        }
        QuoteRatePopup.getQuoteStats(randomQuote).then((quoteStats) => {
            var _a, _b;
            $(".pageTest #result #rateQuoteButton .rating").text((_b = (_a = quoteStats === null || quoteStats === void 0 ? void 0 : quoteStats.average) === null || _a === void 0 ? void 0 : _a.toFixed(1)) !== null && _b !== void 0 ? _b : "");
            $(".pageTest #result #rateQuoteButton")
                .css({ opacity: 0 })
                .removeClass("hidden")
                .css({ opacity: 1 });
        });
    }
}
exports.updateRateQuote = updateRateQuote;
function updateQuoteSource(randomQuote) {
    if (config_1.default.mode === "quote") {
        $("#result .stats .source").removeClass("hidden");
        $("#result .stats .source .bottom").html(randomQuote.source);
    }
    else {
        $("#result .stats .source").addClass("hidden");
    }
}
function update(res, difficultyFailed, failReason, afkDetected, isRepeated, tooShort, randomQuote, dontSave) {
    return __awaiter(this, void 0, void 0, function* () {
        resultScaleOptions = ChartController.result.options.scales;
        resultAnnotation = [];
        result = res;
        $("#result #resultWordsHistory").addClass("hidden");
        $("#retrySavingResultButton").addClass("hidden");
        $(".pageTest #result #rateQuoteButton .icon")
            .removeClass("fas")
            .addClass("far");
        $(".pageTest #result #rateQuoteButton .rating").text("");
        $(".pageTest #result #rateQuoteButton").addClass("hidden");
        $("#testModesNotice").css("opacity", 0);
        $("#words").removeClass("blurred");
        $("#wordsInput").blur();
        $("#result .stats .time .bottom .afk").text("");
        if (firebase_1.Auth.currentUser != null) {
            $("#result .loginTip").addClass("hidden");
        }
        else {
            $("#result .loginTip").removeClass("hidden");
        }
        updateWpmAndAcc();
        updateConsistency();
        updateTime();
        updateKey();
        updateTestType(randomQuote);
        updateQuoteSource(randomQuote);
        yield updateGraph();
        yield updateGraphPBLine();
        updateTags(dontSave);
        updateOther(difficultyFailed, failReason, afkDetected, isRepeated, tooShort);
        ChartController.result.options
            .plugins.annotation.annotations =
            resultAnnotation;
        ChartController.result.updateColors();
        ChartController.result.resize();
        if ($("#result .stats .tags").hasClass("hidden") &&
            $("#result .stats .info").hasClass("hidden")) {
            $("#result .stats .infoAndTags").addClass("hidden");
        }
        else {
            $("#result .stats .infoAndTags").removeClass("hidden");
        }
        if (GlarsesMode.get()) {
            $("#middle #result .noStressMessage").remove();
            $("#middle #result").prepend(`

      <div class='noStressMessage' style="
        text-align: center;
        grid-column: 1/3;
        font-size: 2rem;
        padding-bottom: 2rem;
      ">
      <i class="fas fa-check"></i>
      </div>

    `);
            $("#middle #result .stats").addClass("hidden");
            $("#middle #result .chart").addClass("hidden");
            $("#middle #result #resultWordsHistory").addClass("hidden");
            $("#middle #result #resultReplay").addClass("hidden");
            $("#middle #result .loginTip").addClass("hidden");
            $("#middle #result #showWordHistoryButton").addClass("hidden");
            $("#middle #result #watchReplayButton").addClass("hidden");
            $("#middle #result #saveScreenshotButton").addClass("hidden");
            console.log(`Test Completed: ${result.wpm} wpm ${result.acc}% acc ${result.rawWpm} raw ${result.consistency}% consistency`);
        }
        else {
            $("#middle #result .stats").removeClass("hidden");
            $("#middle #result .chart").removeClass("hidden");
            // $("#middle #result #resultWordsHistory").removeClass("hidden");
            if (firebase_1.Auth.currentUser == null) {
                $("#middle #result .loginTip").removeClass("hidden");
            }
            $("#middle #result #showWordHistoryButton").removeClass("hidden");
            $("#middle #result #watchReplayButton").removeClass("hidden");
            $("#middle #result #saveScreenshotButton").removeClass("hidden");
        }
        if (window.scrollY > 0) {
            $([document.documentElement, document.body])
                .stop()
                .animate({ scrollTop: 0 }, 250);
        }
        Misc.swapElements($("#typingTest"), $("#result"), 250, () => {
            TestUI.setResultCalculating(false);
            $("#words").empty();
            ChartController.result.resize();
            if (config_1.default.alwaysShowWordsHistory && config_1.default.burstHeatmap) {
                TestUI.applyBurstHeatmap();
            }
            $("#result").trigger("focus");
            window.scrollTo({ top: 0 });
            $("#testModesNotice").addClass("hidden");
        }, () => {
            $("#resultExtraButtons").removeClass("hidden").css("opacity", 0).animate({
                opacity: 1,
            }, 125);
            if (config_1.default.alwaysShowWordsHistory && !GlarsesMode.get()) {
                TestUI.toggleResultWords();
            }
            Keymap.hide();
        });
        ResultsShownEvent.dispatch({
            res,
            difficultyFailed,
            failReason,
            afkDetected,
            isRepeated,
            tooShort,
            randomQuote,
            dontSave,
        });
    });
}
exports.update = update;


/***/ }),

/***/ "./src/scripts/test/shift-tracker.ts":
/*!*******************************************!*\
  !*** ./src/scripts/test/shift-tracker.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isUsingOppositeShift = exports.reset = exports.rightState = exports.leftState = void 0;
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const caps_warning_1 = __webpack_require__(/*! ./caps-warning */ "./src/scripts/test/caps-warning.ts");
exports.leftState = false;
exports.rightState = false;
let caseState = false;
const keymapStrings = {
    left: null,
    right: null,
    keymap: null,
};
function dynamicKeymapLegendStyle(uppercase) {
    const keymapKeys = [
        ...document.getElementsByClassName("keymap-key"),
    ];
    const layoutKeys = keymapKeys.map((el) => el.dataset["key"]);
    const keys = keymapKeys.map((el) => el.childNodes[1]);
    if (caps_warning_1.capsState)
        uppercase = !uppercase;
    if (layoutKeys.filter((v) => v === undefined).length > 2)
        return;
    if ((uppercase && caseState) || (!uppercase && !caseState))
        return;
    caseState = uppercase;
    const index = caseState ? 1 : 0;
    for (let i = 0; i < layoutKeys.length; i++) {
        const layoutKey = layoutKeys[i], key = keys[i];
        if (key === undefined || layoutKey === undefined)
            continue;
        key.textContent = layoutKey[index];
    }
}
function buildKeymapStrings() {
    return __awaiter(this, void 0, void 0, function* () {
        if (keymapStrings.keymap === config_1.default.keymapLayout)
            return;
        const layout = yield Misc.getLayout(config_1.default.keymapLayout);
        if (layout === undefined)
            return;
        const layoutKeys = layout.keys;
        const layoutKeysEntries = Object.entries(layoutKeys);
        keymapStrings.keymap = config_1.default.keymapLayout;
        if (!layout) {
            keymapStrings.left = null;
            keymapStrings.right = null;
        }
        else {
            keymapStrings.left = layoutKeysEntries
                .map(([rowName, row]) => row
                // includes "6" and "y" (buttons on qwerty) into the left hand
                .slice(0, ["row1", "row2"].includes(rowName)
                ? rowName === "row1"
                    ? 7
                    : 6
                : 5)
                .map((key) => key.split("")))
                .flat(2);
            keymapStrings.right = layoutKeysEntries
                .map(([rowName, row]) => row
                // includes "b" (buttons on qwerty) into the right hand
                .slice(["row1", "row4"].includes(rowName)
                ? rowName === "row1"
                    ? 6
                    : 4
                : 5)
                .map((key) => key.split("")))
                .flat(2);
        }
    });
}
$(document).on("keydown", (e) => {
    if (e.code === "ShiftLeft") {
        exports.leftState = true;
        exports.rightState = false;
    }
    else if (e.code === "ShiftRight") {
        exports.leftState = false;
        exports.rightState = true;
    }
    if (config_1.default.keymapLegendStyle === "dynamic") {
        dynamicKeymapLegendStyle(exports.leftState || exports.rightState);
    }
});
$(document).keyup((e) => {
    if (e.code === "ShiftLeft" || e.code === "ShiftRight") {
        exports.leftState = false;
        exports.rightState = false;
    }
    if (config_1.default.keymapLegendStyle === "dynamic") {
        dynamicKeymapLegendStyle(exports.leftState || exports.rightState);
    }
});
function reset() {
    exports.leftState = false;
    exports.rightState = false;
}
exports.reset = reset;
const leftSideKeys = [
    "KeyQ",
    "KeyW",
    "KeyE",
    "KeyR",
    "KeyT",
    "KeyA",
    "KeyS",
    "KeyD",
    "KeyF",
    "KeyG",
    "KeyZ",
    "KeyX",
    "KeyC",
    "KeyV",
    "Backquote",
    "Digit1",
    "Digit2",
    "Digit3",
    "Digit4",
    "Digit5",
];
const rightSideKeys = [
    "KeyU",
    "KeyI",
    "KeyO",
    "KeyP",
    "KeyH",
    "KeyJ",
    "KeyK",
    "KeyL",
    "KeyN",
    "KeyM",
    "Digit7",
    "Digit8",
    "Digit9",
    "Digit0",
    "Backslash",
    "BracketLeft",
    "BracketRight",
    "Semicolon",
    "Quote",
    "Comma",
    "Period",
    "Slash",
];
function isUsingOppositeShift(event) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!exports.leftState && !exports.rightState)
            return null;
        if (config_1.default.oppositeShiftMode === "on") {
            if (!rightSideKeys.includes(event.code) &&
                !leftSideKeys.includes(event.code)) {
                return null;
            }
            if ((exports.leftState && rightSideKeys.includes(event.code)) ||
                (exports.rightState && leftSideKeys.includes(event.code))) {
                return true;
            }
            else {
                return false;
            }
        }
        else if (config_1.default.oppositeShiftMode === "keymap") {
            yield buildKeymapStrings();
            if (!keymapStrings.left || !keymapStrings.right)
                return null;
            if ((exports.leftState && keymapStrings.right.includes(event.key)) ||
                (exports.rightState && keymapStrings.left.includes(event.key))) {
                return true;
            }
            else {
                return false;
            }
        }
        return true;
    });
}
exports.isUsingOppositeShift = isUsingOppositeShift;


/***/ }),

/***/ "./src/scripts/test/tbd-mode.ts":
/*!**************************************!*\
  !*** ./src/scripts/test/tbd-mode.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getTbdMode = void 0;
const wordset_1 = __webpack_require__(/*! ./wordset */ "./src/scripts/test/wordset.ts");
const TestInput = __importStar(__webpack_require__(/*! ./test-input */ "./src/scripts/test/test-input.ts"));
const PageChangeEvent = __importStar(__webpack_require__(/*! ../observables/page-change-event */ "./src/scripts/observables/page-change-event.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const misc_1 = __webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts");
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const ConfigStuff = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const ResultsShownEvent = __importStar(__webpack_require__(/*! ../observables/results-shown-event */ "./src/scripts/observables/results-shown-event.ts"));
const WordTypedEvent = __importStar(__webpack_require__(/*! ../observables/word-typed-event */ "./src/scripts/observables/word-typed-event.ts"));
const ResetRequestedEvent = __importStar(__webpack_require__(/*! ../observables/reset-requested-event */ "./src/scripts/observables/reset-requested-event.ts"));
const debounce_1 = __webpack_require__(/*! ../utils/debounce */ "./src/scripts/utils/debounce.ts");
class TbdConfig {
    init() {
        TbdEvents.addSubscriber("sorterSelectChanged", (data) => {
            this.set("sorter", data["value"]);
        });
        TbdEvents.addSubscriber("configUpdateRequested", (data) => {
            switch (data["configSetting"]) {
                case "targetSpeed":
                    this.processTargetSpeedUpdateRequest();
                    break;
                case "groupSize":
                    this.processGroupSizeUpdateRequest();
                    break;
                case "animations":
                    this.processAnimationToggleRequest();
                    break;
                case "unbeatenWordPercentage":
                    this.processUnbeatenWordPercentageRequest();
                    break;
            }
        });
    }
    get(key, defaultValue = "") {
        const configData = TbdData.getAll().config;
        return configData[key] || defaultValue;
    }
    set(key, value) {
        const original = this.get(key);
        if (original == value) {
            return;
        }
        const data = TbdData.getAll();
        data.config[key] = value;
        TbdData.updateData(data);
        TbdEvents.dispatchEvent(`${key}-changed`, {
            original: original,
            newValue: value,
        });
    }
    bumpTargetSpeed() {
        const current = this.getTargetSpeed();
        this.set("targetSpeed", (current + 5).toString());
    }
    getSorterName() {
        return this.get("sorter", "alphabetical-asc");
    }
    getSorter() {
        return TbdSorting.getSorter(this.getSorterName());
    }
    getTargetSpeed() {
        return parseInt(this.get("targetSpeed", "75"));
    }
    getGroupSize() {
        return parseInt(this.get("groupSize", "30"));
    }
    getUnbeatenWordPercentage() {
        return parseInt(this.get("unbeatenWordPercentage", "60"));
    }
    processTargetSpeedUpdateRequest() {
        const newSpeed = parseInt(prompt("New target speed", this.getTargetSpeed().toString()) || "");
        if (newSpeed > 0) {
            this.set("targetSpeed", newSpeed.toString());
        }
    }
    processAnimationToggleRequest() {
        const enabled = confirm("Confirm to enable, cancel to disable.");
        if (enabled) {
            this.set("animationsEnabled", "1");
        }
        else {
            this.set("animationsEnabled", "0");
        }
    }
    areAnimationsEnabled() {
        return this.get("animationsEnabled", "1") == "1";
    }
    processGroupSizeUpdateRequest() {
        const newSize = parseInt(prompt("New group size", this.getGroupSize().toString()) || "");
        if (newSize > 0) {
            this.set("groupSize", newSize.toString());
        }
    }
    processUnbeatenWordPercentageRequest() {
        const newPercentage = parseInt(prompt(`The odds (still random) that a test word will be one that hasn't been typed faster than the current group threshold. 
        
        Must be between 10-90`, this.getUnbeatenWordPercentage().toString()) || "");
        if (isNaN(newPercentage)) {
            return;
        }
        if (newPercentage < 10 || newPercentage > 90) {
            alert(`${newPercentage} isn't a valid choice.`);
            return;
        }
        this.set("unbeatenWordPercentage", newPercentage.toString());
    }
}
class TbdSorting {
    static getSorter(name) {
        switch (name) {
            case "alphabetical-asc":
                return TbdSorting.alphabeticalAscendingSorter;
            case "alphabetical-desc":
                return TbdSorting.alphabeticalDescendingSorter;
            case "speed-asc":
                return TbdSorting.speedAscendingSorter;
            case "speed-desc":
                return TbdSorting.speedDescendingSorter;
            case "typedCount":
                return TbdSorting.typedCountSorter;
            case "missedCount":
                return TbdSorting.missedCountSorter;
        }
        return TbdSorting.alphabeticalAscendingSorter;
    }
    static randomSorter() {
        return Math.random() < 0.5 ? -1 : 1;
    }
    static alphabeticalDescendingSorter(word, word2) {
        return word.toLowerCase() < word2.toLowerCase() ? 1 : -1;
    }
    static alphabeticalAscendingSorter(word, word2) {
        return word.toLowerCase() < word2.toLowerCase() ? -1 : 1;
    }
    static speedAscendingSorter(word, word2) {
        const speed1 = TbdData.getMedianSpeedForWord(word);
        const speed2 = TbdData.getMedianSpeedForWord(word2);
        return speed1 - speed2;
    }
    static speedDescendingSorter(word, word2) {
        const speed1 = TbdData.getMedianSpeedForWord(word);
        const speed2 = TbdData.getMedianSpeedForWord(word2);
        return speed2 - speed1;
    }
    static typedCountSorter(word, word2) {
        const typed1 = TbdData.getSpeedsForWord(word).length;
        const typed2 = TbdData.getSpeedsForWord(word2).length;
        return typed2 - typed1;
    }
    static missedCountSorter(word, word2) {
        return (TbdData.getMistypedCountForWord(word2) -
            TbdData.getMistypedCountForWord(word));
    }
}
class TbdMode {
    constructor(config) {
        this.previousWord = "";
        this.config = config;
        this.monkeyTypeWordset = new wordset_1.Wordset([]);
        this.currentGroup = new TbdGroup(this.monkeyTypeWordset);
        this.groups = new TbdGroups();
    }
    init() {
        WordTypedEvent.subscribe(this.handleWordTyped.bind(this));
        ResultsShownEvent.subscribe(this.handleResultsShownEvent.bind(this));
        TbdEvents.addSubscriber("resetButtonClicked", this.resetCurrentWords.bind(this));
        TbdEvents.addSubscriber("wordClicked", this.resetWord.bind(this));
        TbdEvents.addSubscriber("targetSpeed-changed", () => {
            this.regenerateGroupsFromWordset(this.monkeyTypeWordset);
        });
        TbdEvents.addSubscriber("groupSize-changed", () => {
            this.regenerateGroupsFromWordset(this.monkeyTypeWordset);
        });
        TbdEvents.addSubscriber("wordsReset", () => {
            this.regenerateGroupsFromWordset(this.monkeyTypeWordset);
        });
        TbdEvents.addSubscriber("nextGroup", (data) => {
            this.currentGroup = data["group"];
        });
        TbdEvents.addSubscriber("groupsRegenerated", () => {
            ResetRequestedEvent.dispatch();
        });
        TbdEvents.addSubscriber("nextGroupButtonClicked", () => {
            if (this.groups.getGroups().length <= 1) {
                return;
            }
            const currentGroupIndex = this.getCurrentGroupIndex();
            let nextIndex = currentGroupIndex + 1;
            // Allow cycling through groups
            if (nextIndex == this.groups.getGroups().length) {
                nextIndex = 0;
            }
            TbdEvents.dispatchEvent("nextGroup", {
                group: this.groups.getGroups()[nextIndex],
                groupNumber: nextIndex + 1,
            });
        });
        TbdEvents.addSubscriber("actionButtonClicked", (data) => {
            switch (data["actionValue"]) {
                case "resetCurrentWords":
                    this.handleResetCurrentWordsRequest();
                    break;
                case "resetAllWords":
                    this.handleResetAllWordsRequest();
                    break;
                case "copyAllData":
                    this.handleCopyDataRequest();
                    break;
                case "importData":
                    this.handleImportDataRequest();
                    break;
            }
        });
    }
    handleWordTyped(_word, isCorrect, burst, currentWordElement) {
        if (!isCorrect) {
            return;
        }
        const wordElement = currentWordElement;
        const typedAboveTarget = burst > this.getConfig().getTargetSpeed();
        if (typedAboveTarget) {
            TbdEvents.dispatchEvent("wordTypedCorrectly", { wordElement });
        }
        else {
            TbdEvents.dispatchEvent("wordMissed", { wordElement });
        }
    }
    handleResetCurrentWordsRequest() {
        if (confirm("Are you sure you want to reset data for the current wordset? This includes all" +
            " words in the language or custom word set you are using, not just the current group!")) {
            TbdData.resetDataForWords(this.monkeyTypeWordset.words);
        }
    }
    handleCopyDataRequest() {
        navigator.clipboard.writeText(JSON.stringify(TbdData.getAll())).then(() => {
            alert("JSON copied to your clipboard");
        }, () => {
            alert("There was a problem copying the data to your clipboard");
        });
    }
    handleImportDataRequest() {
        const exportJson = prompt("Enter the JSON you got from an export here") || "";
        if (exportJson == "") {
            return;
        }
        const parsed = JSON.parse(exportJson);
        if ("words" in parsed && "config" in parsed) {
            TbdData.updateData(parsed, true);
            location.reload();
        }
        else {
            alert("There was something wrong with your JSON, sorry!");
        }
    }
    getConfig() {
        return this.config;
    }
    getWord(originalWordset) {
        this.handleWordsetForNextWord(originalWordset);
        const group = this.getCurrentGroup();
        const random = Math.random() * 100;
        const unbeatenWordset = group.getUnbeatenWordset();
        const isThereMoreThanOneWord = group.getWordset().length > 1;
        let nextWord;
        if (unbeatenWordset.length > 0 &&
            random <= this.getConfig().getUnbeatenWordPercentage()) {
            nextWord = unbeatenWordset.randomWord();
        }
        else {
            nextWord = group.getWordset().randomWord();
        }
        if (this.previousWord == nextWord && isThereMoreThanOneWord) {
            return this.getWord(originalWordset);
        }
        this.previousWord = nextWord;
        return nextWord;
    }
    getCurrentGroup() {
        return this.currentGroup;
    }
    getFirstIncompleteGroup() {
        return this.groups.getFirstIncompleteGroup(this.config.getTargetSpeed());
    }
    recalculateCurrentGroup() {
        if (this.getCurrentGroup().getUnbeatenWordset().length > 0 &&
            this.getCurrentGroup().getThreshold() <= this.getConfig().getTargetSpeed()) {
            const index = this.getCurrentGroupIndex();
            TbdEvents.dispatchEvent("nextGroup", {
                group: this.getCurrentGroup(),
                groupNumber: index + 1,
            });
            return;
        }
        let next = this.getFirstIncompleteGroup();
        while (next == null) {
            this.getConfig().bumpTargetSpeed(); // side effects, regenerates all groups
            next = this.getFirstIncompleteGroup();
        }
        const index = this.groups.getGroups().indexOf(this.currentGroup);
        TbdEvents.dispatchEvent("nextGroup", {
            group: next,
            groupNumber: index + 1,
        });
    }
    getCurrentGroupIndex() {
        return this.groups.getGroups().indexOf(this.getCurrentGroup());
    }
    getMonkeyTypeWordset() {
        return this.monkeyTypeWordset;
    }
    handleWordsetForNextWord(wordset) {
        if (this.monkeyTypeWordset.length != wordset.length &&
            wordset.words.join("$") != this.monkeyTypeWordset.words.join("$")) {
            this.handleNewWordset(wordset);
        }
    }
    handleNewWordset(wordset) {
        this.monkeyTypeWordset = wordset;
        this.regenerateGroupsFromWordset(wordset);
    }
    regenerateGroupsFromWordset(wordset) {
        const notAboveTargetSpeed = wordset.words.filter((word) => {
            return !TbdData.hasWordBeenTypedFasterThan(word, this.config.getTargetSpeed());
        });
        const uniqueBelowTarget = new Set(notAboveTargetSpeed);
        if (uniqueBelowTarget.size == 0) {
            this.getConfig().bumpTargetSpeed();
            // Bumping the target triggers a regeneration of groups and infinite loops are no fun
            return;
        }
        this.groups.regenerateGroups(Array.from(uniqueBelowTarget), this.config.getGroupSize());
    }
    handleResultsShownEvent(results) {
        if (!results.difficultyFailed) {
            this.saveBurstsFromLatestResults();
        }
        this.saveMissesFromLatestResult();
        this.recalculateCurrentGroup();
        this.getCurrentGroup().increaseThresholdUntilSomeWordsAreUnbeaten();
        TbdEvents.dispatchEvent("resultsProcessed", {
            currentGroup: this.getCurrentGroup(),
            monkeyTypeWordset: this.monkeyTypeWordset,
            targetSpeed: this.config.getTargetSpeed(),
        });
    }
    saveBurstsFromLatestResults() {
        const resultWords = TestInput.input.history;
        const resultBursts = TestInput.burstHistory;
        for (let i = 0; i < resultWords.length; i++) {
            const word = resultWords[i];
            const burst = resultBursts[i];
            TbdData.addBurst(word, burst);
        }
    }
    resetCurrentWords() {
        if (!confirm("Are you sure you want to reset the stats for the current words?")) {
            return;
        }
        TbdData.resetDataForWords(this.monkeyTypeWordset.words);
    }
    resetWord(data) {
        const word = data["word"];
        if (!confirm(`Reset all data for ${word}?`)) {
            return;
        }
        TbdData.resetDataForWord(word);
    }
    saveMissesFromLatestResult() {
        Object.keys(TestInput.missedWords).forEach((word) => {
            const missedCount = TestInput.missedWords[word];
            TbdData.addToMissedCount(word, missedCount);
        });
    }
    handleResetAllWordsRequest() {
        let confirmationWord = "delete";
        let slowestSpeed = 1000;
        const allData = TbdData.getAll();
        Object.keys(allData.words)
            .filter((word) => TbdData.getMedianSpeedForWord(word) > 0)
            .forEach((word) => {
            const median = TbdData.getMedianSpeedForWord(word);
            if (median > 0 &&
                median < slowestSpeed &&
                word.length >= confirmationWord.length) {
                confirmationWord = word;
                slowestSpeed = median;
            }
        });
        const confirmationString = `${confirmationWord} ${confirmationWord} ${confirmationWord}`;
        const response = prompt(`This will delete ALL your word data. To confirm, type: ${confirmationString}`);
        if (response == null) {
            return;
        }
        if (response == confirmationString) {
            allData.words = {};
            TbdData.updateData(allData, true);
            alert("Ok! Your data has been deleted and you're starting over from scratch.");
            // Lazy, I know
            location.reload();
        }
        else {
            alert(`Good effort, but you typed 
        
        '${response}' 
        
        instead of 
        
        '${confirmationString}' 
        
        No reset for you!`);
        }
    }
}
class TbdUI {
    constructor(tbdMode) {
        this.$groupThreshold = $("#tbdModeGroupThreshold");
        this.$tbdModeGroupCount = $("#tbdModeGroupCount");
        this.$wordInfo = $("#tbdModeWordInfo");
        this.$wordsDiv = $("#tbdmodeInfo .wordsContainer .words");
        this.$progressMeterTotal = $("#tbdmodeInfo .progressMeterTotal");
        this.$targetThreshold = $("#tbdModeTargetThreshold");
        this.$progressMeterGroup = $("#tbdmodeInfo .progressMeterGroup");
        this.$tbdModeInfo = $("#tbdmodeInfo");
        this.$tbdModeHelpButton = $(".tbdModeHelpButton");
        this.$tbdModeHelp = $("#tbdHelp");
        this.$tbdBeatenExample = $(".tbdBeatenExample");
        this.$tbdLostExample = $(".tbdLostExample");
        this.$tbdModeActionsSelect = $("#tbdModeActionsSelect");
        this.$tbdModeActionsButton = $("#tbdModeActionButton");
        this.$tbdModeConfigSettingsSelect = $("#tbdModeConfigSettings");
        this.$tbdModeConfigSettingsUpdateButton = $("#tbdModeUpdateConfigSettingsUpdateButton");
        this.$tbdNextGroupButton = $("#tbdNextGroupButton");
        this.$sorterSelect = $("#tbdModeSorterSelect");
        this.currentlyAnimating = [];
        this.$tbdModeGroupNumber = $("#tbdModeCurrentGroupNumber");
        this.tbdMode = tbdMode;
        const wordsContainer = document.getElementById("tbdModeWordsContainer");
        if (!(wordsContainer instanceof HTMLDivElement)) {
            throw new Error("Could not locate TBD words container");
        }
        this.wordsContainer = wordsContainer;
        this.$wordInfo.hide();
        this.$tbdModeInfo.hide();
    }
    init() {
        document.body.classList.add("tbdMode");
        this.$tbdModeInfo.show(300);
        PageChangeEvent.subscribe(this.pageChangeHandler.bind(this));
        this.wordsContainer.addEventListener("mousemove", this.updateWordInfo.bind(this));
        this.wordsContainer.addEventListener("click", this.handleWordClicked.bind(this));
        this.wordsContainer.addEventListener("mouseleave", () => {
            return this.$wordInfo.hide(0);
        });
        TbdEvents.addSubscriber("wordTypedCorrectly", (data) => {
            data["wordElement"]
                .children("letter")
                .each((_index, element) => {
                this.animate(element, "tbdBeaten");
            });
        });
        TbdEvents.addSubscriber("wordMissed", (data) => {
            data["wordElement"].addClass("tbdLowOpacity");
            this.animate(data["wordElement"][0], "tbdLost");
        });
        TbdEvents.addSubscriber("groupThresholdChanged", (data) => {
            this.$groupThreshold.text(data["threshold"]);
        });
        TbdEvents.addSubscriber("resultsProcessed", (data) => {
            const group = data["currentGroup"];
            this.updateUiWords(group.getWordset().words);
        });
        TbdEvents.addSubscriber("resultsProcessed", (data) => {
            this.updateTotalProgressMeter(data["monkeyTypeWordset"], data["targetSpeed"]);
        });
        TbdEvents.addSubscriber("resultsProcessed", (data) => {
            this.updateGroupProgressMeter(data["currentGroup"], data["targetSpeed"]);
        });
        this.$sorterSelect.on("change", (event) => {
            if (!(event.target instanceof HTMLSelectElement)) {
                return;
            }
            TbdEvents.dispatchEvent("sorterSelectChanged", {
                value: event.target.value,
            });
        });
        TbdEvents.addSubscriber("sorter-changed", this.handleSorterChange.bind(this));
        TbdEvents.addSubscriber("nextGroup", (data) => {
            const group = data["group"];
            this.updateUiWords(group.getWordset().words);
        });
        TbdEvents.addSubscriber("nextGroup", () => {
            this.updateGroupProgressMeter(this.tbdMode.getCurrentGroup(), this.tbdMode.getConfig().getTargetSpeed());
            this.updateTotalProgressMeter(this.tbdMode.getMonkeyTypeWordset(), this.tbdMode.getConfig().getTargetSpeed());
        });
        // Can't use targetSpeed-changed because of stupid recursive way of
        // auto bumping threshold to ensure there are always groups
        TbdEvents.addSubscriber("nextGroup", () => {
            this.$targetThreshold.text(this.tbdMode.getConfig().getTargetSpeed().toString());
        });
        this.$tbdModeHelpButton.on("click", () => {
            this.$tbdModeHelp.toggle(250);
            this.$wordsDiv.toggle(250);
        });
        this.$tbdBeatenExample.on("click", (event) => {
            this.animate(event.target, "tbdBeaten");
        });
        this.$tbdLostExample.on("click", (event) => {
            this.animate(event.target, "tbdLost");
        });
        this.$tbdNextGroupButton.on("click", () => {
            TbdEvents.dispatchEvent("nextGroupButtonClicked");
        });
        this.$targetThreshold.text(this.tbdMode.getConfig().getTargetSpeed());
        this.$groupThreshold.text(this.tbdMode.getCurrentGroup().getThreshold());
        this.$tbdModeConfigSettingsUpdateButton.on("click", () => {
            const selectValue = this.$tbdModeConfigSettingsSelect.val();
            if (selectValue == "") {
                alert("Select an option from the dropdown first");
            }
            else {
                TbdEvents.dispatchEvent("configUpdateRequested", {
                    configSetting: selectValue,
                });
            }
        });
        this.$tbdModeActionsButton.on("click", () => {
            const selectValue = this.$tbdModeActionsSelect.val();
            if (selectValue == "") {
                alert("Select an option from the dropdown first");
            }
            else {
                TbdEvents.dispatchEvent("actionButtonClicked", {
                    actionValue: selectValue,
                });
            }
        });
        TbdEvents.addSubscriber("wordSaved", (data) => {
            const word = data["word"] || "";
            if (word == "") {
                return;
            }
            const element = this.getWordElement(word);
            if (!element) {
                return;
            }
            this.updateWord(word);
        });
        TbdEvents.addSubscriber("groupsRegenerated", (data) => {
            this.$tbdModeGroupCount.text(data["groups"].length);
        });
        TbdEvents.addSubscriber("nextGroup", (data) => {
            this.$tbdModeGroupNumber.text(data["groupNumber"]);
            this.$groupThreshold.text(data["group"].getThreshold());
        });
        TbdEvents.addSubscriber("groupsRegenerated", (data) => {
            if (data["groups"].length == 1) {
                this.$tbdNextGroupButton.hide();
            }
            else {
                this.$tbdNextGroupButton.show();
            }
        });
        this.$sorterSelect
            .find(`option[value="${this.tbdMode.getConfig().getSorterName()}"]`)
            .attr("selected", "");
    }
    /**
     * @param element
     * @param animation - both the keyframe animation and class with that animation. For simplicity
     * they must be the same.
     */
    animate(element, animation) {
        if (!this.tbdMode.getConfig().areAnimationsEnabled()) {
            return;
        }
        if (this.currentlyAnimating.includes(element)) {
            return;
        }
        const callback = (event) => {
            if (event.animationName !== animation) {
                return;
            }
            const index = this.currentlyAnimating.findIndex((animatingElement) => animatingElement == element);
            if (index >= 0) {
                delete this.currentlyAnimating[index];
            }
            element.classList.remove(animation);
            element.removeEventListener("animationend", callback);
        };
        element.addEventListener("animationend", callback);
        this.currentlyAnimating.push(element);
        element.classList.add(animation);
    }
    handleWordClicked(event) {
        var _a;
        const target = event.target;
        if (!(target instanceof HTMLDivElement)) {
            return;
        }
        if (!target.classList.contains("tbdWord")) {
            return;
        }
        const word = ((_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.dataset["word"]) || "";
        if (word == "") {
            return;
        }
        TbdEvents.dispatchEvent("wordClicked", { word: word });
    }
    handleSorterChange(data) {
        const sorter = TbdSorting.getSorter(data["newValue"] || "");
        this.sortWords(sorter);
    }
    selectSorterOption(sorterName) {
        [...document.querySelectorAll("#tbdModeSorterSelect option")].forEach((option) => {
            if (!(option instanceof HTMLOptionElement)) {
                return;
            }
            if (option["value"] == sorterName) {
                option["selected"] = true;
            }
        });
    }
    updateTotalProgressMeter(monkeyTypeWordset, targetSpeed) {
        const allWords = monkeyTypeWordset.words;
        const count = allWords.length;
        const beatenAtTargetCount = allWords.filter((word) => {
            return TbdData.hasWordBeenTypedFasterThan(word, targetSpeed);
        }).length;
        const percent = (beatenAtTargetCount / count) * 100 || 0;
        this.$progressMeterTotal.css("width", `${percent}%`);
        this.$progressMeterTotal.attr("title", `${beatenAtTargetCount} words of ${count} total have been typed faster than the target of ${targetSpeed}`);
    }
    updateGroupProgressMeter(currentGroup, targetSpeed) {
        const groupWordset = currentGroup.getWordset();
        const beatenAtTargetCount = groupWordset.words.filter((word) => {
            return TbdData.hasWordBeenTypedFasterThan(word, targetSpeed);
        }).length;
        const percent = (beatenAtTargetCount / groupWordset.length) * 100 || 0;
        this.$progressMeterGroup.css("width", `${percent}%`);
        this.$progressMeterGroup.attr("title", `${beatenAtTargetCount} words of ${groupWordset.length} in the current group have been typed faster than the target of ${targetSpeed}`);
    }
    pageChangeHandler(_previousPage, nextPage) {
        const pagesToShowInfo = ["test"];
        if (pagesToShowInfo.includes(nextPage.name)) {
            this.$tbdModeInfo.show();
        }
        else {
            this.$tbdModeInfo.hide();
        }
    }
    updateUiWords(wordsToShow) {
        var _a;
        // Remove words we don't want to show
        this.$wordsDiv.hide();
        (_a = [...document.querySelectorAll(".words .tbdWordContainer")]) === null || _a === void 0 ? void 0 : _a.forEach((wordElement) => {
            // @ts-ignore
            const word = wordElement.dataset["word"];
            if (!wordsToShow.includes(word)) {
                // @ts-ignore
                wordElement.parentElement.removeChild(wordElement);
            }
        });
        wordsToShow.forEach((word) => {
            this.updateWord(word);
        });
        this.sortWords(this.tbdMode.getConfig().getSorter());
        this.$wordsDiv.show();
    }
    updateWord(word) {
        const wordElement = this.getOrCreateWordElement(word);
        const targetSpeed = this.tbdMode.getConfig().getTargetSpeed();
        const groupSpeed = this.tbdMode.getCurrentGroup().getThreshold();
        // Timeout ensures transitions work
        setTimeout(() => {
            var _a;
            wordElement.dataset["beatenAtTarget"] =
                TbdData.hasWordBeenTypedFasterThan(word, targetSpeed) ? "1" : "0";
            wordElement.dataset["beatenAtGroup"] = TbdData.hasWordBeenTypedFasterThan(word, groupSpeed)
                ? "1"
                : "0";
            wordElement.dataset["typed"] =
                TbdData.getSpeedsForWord(word).length == 0 ? "0" : "1";
            wordElement.dataset["missedMore"] =
                TbdData.getMistypedCountForWord(word) >
                    TbdData.getSpeedsForWord(word).length
                    ? "1"
                    : "0";
            const percentComplete = TbdData.getMedianSpeedForWord(word) / targetSpeed;
            const modifier = Math.min(percentComplete, 1);
            const baseScale = 0.75;
            const additional = (1 - baseScale) * modifier;
            // @ts-ignore
            (_a = wordElement.querySelector("div").style) === null || _a === void 0 ? void 0 : _a.transform = `scale(${baseScale + additional})`;
        }, 0);
    }
    sortWords(sorter) {
        var _a;
        const words = (_a = [...document.querySelectorAll(".tbdWordContainer")]) === null || _a === void 0 ? void 0 : _a.map((wordContainerElement) => {
            if (!(wordContainerElement instanceof HTMLDivElement)) {
                throw new Error("RUH ROH");
            }
            return wordContainerElement.dataset["word"] || "";
        });
        const sorted = words.sort(sorter);
        sorted.forEach((word) => {
            const element = this.getOrCreateWordElement(word);
            this.$wordsDiv.append(element);
        });
    }
    getWordElement(word) {
        const query = `.tbdWordContainer[data-word="${word}"]`;
        return document.querySelector(query);
    }
    getOrCreateWordElement(word) {
        const element = this.getWordElement(word);
        if (element) {
            return element;
        }
        const newDiv = document.createElement("div");
        newDiv.innerHTML = `<div class="tbdWord">${word}</div>`;
        newDiv.dataset["word"] = word;
        newDiv.classList.add("tbdWordContainer");
        this.$wordsDiv.append(newDiv);
        return newDiv;
    }
    updateWordInfo(event) {
        var _a;
        const target = event.target;
        if (!(target instanceof HTMLElement)) {
            return;
        }
        if (!target.classList.contains("tbdWord")) {
            return;
        }
        const word = (_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.dataset["word"];
        if (word == undefined) {
            return;
        }
        const wordData = TbdData.getDataForWord(word);
        let wordInfoHtml = `
        <h3>"${word}"</h3>
        <div class="heading">Counts</div>
        <div class="statContainer">
          <span class="label">Correct: </span>
          <span class="stat good">${wordData.speeds.length}</span.>
        </div>
        <div class="statContainer">
          <span class="label">Missed: </span>
          <span class="stat bad">${TbdData.getMistypedCountForWord(word)}</span>
        </div>`;
        if (wordData.speeds.length) {
            wordInfoHtml += `
            <div class="heading">Speeds</div>
        <div class="statContainer">
          <span class="label">Worst: </span>
          <span class="stat bad">${TbdData.getSlowestSpeedForWord(word)}</span>
        </div>
        <div class="statContainer">
          <span class="label">Mean: </span>
          <span class="stat">${TbdData.getMeanSpeedForWord(word)}</span>
        </div>
        <div class="statContainer">
          <span class="label">Median: </span>
          <span class="stat">${TbdData.getMedianSpeedForWord(word)}</span>
        </div>
        <div class="statContainer">
          <span class="label">Best: </span>
          <span class="stat good">${TbdData.getFastestSpeedForWord(word)}</span>
        </div>`;
        }
        wordInfoHtml += `<div class="helpText">click to reset word data</div>`;
        this.$wordInfo.html(wordInfoHtml);
        this.getOrCreateWordElement(word).append(this.$wordInfo[0]);
        this.$wordInfo.show(200);
    }
}
class TbdEvents {
    static dispatchEvent(name, data = {}) {
        const subscribers = this.subscribers[name] || [];
        subscribers.forEach((subscriber) => {
            subscriber(data);
        });
    }
    static addSubscriber(name, callback) {
        if (!Array.isArray(TbdEvents.subscribers[name])) {
            TbdEvents.subscribers[name] = [];
        }
        TbdEvents.subscribers[name].push(callback);
    }
}
TbdEvents.subscribers = {};
TbdEvents.debouncedDispatch = (0, debounce_1.debounce)(TbdEvents.dispatchEvent, 50);
class TbdData {
    static getAll() {
        if (TbdData.data) {
            return TbdData.data;
        }
        TbdData.data = TbdData.getFromLocalStorage();
        return TbdData.data;
    }
    static getFromLocalStorage() {
        const defaultValue = { words: {}, config: {} };
        const storedData = localStorage.getItem(TbdData.localStorageKey);
        if (storedData == null) {
            return defaultValue;
        }
        // Try parsing local storage
        const parsed = JSON.parse(storedData);
        if (typeof parsed == "object") {
            return parsed;
        }
        return defaultValue;
    }
    static updateData(data, immediately = false) {
        TbdData.data = data;
        if (immediately) {
            TbdData.updateLocalStorage(data);
        }
        else {
            TbdData.debouncedUpdateLocalStorage(data);
        }
    }
    static getDataForWord(word) {
        const data = TbdData.getAll();
        if (!data.words[word]) {
            return { speeds: [], missedCount: 0 };
        }
        return data.words[word];
    }
    static resetDataForWord(word) {
        TbdData.saveWordData(word, { speeds: [], missedCount: 0 });
        TbdEvents.dispatchEvent("wordReset", { word: word });
    }
    static resetDataForWords(words) {
        words.forEach((word) => TbdData.resetDataForWord(word));
        TbdEvents.dispatchEvent("wordsReset", { words: words });
    }
    static hasWordBeenTypedFasterThan(word, threshold) {
        return TbdData.getMedianSpeedForWord(word) > threshold;
    }
    static getSpeedsForWord(word) {
        return TbdData.getDataForWord(word).speeds || [];
    }
    static getSlowestSpeedForWord(word) {
        const speeds = TbdData.getSpeedsForWord(word);
        if (speeds.length == 0) {
            return 0;
        }
        return Math.min(...speeds);
    }
    static getFastestSpeedForWord(word) {
        const speeds = TbdData.getSpeedsForWord(word);
        if (speeds.length == 0) {
            return 0;
        }
        return Math.max(...speeds);
    }
    static getMistypedCountForWord(word) {
        return TbdData.getDataForWord(word).missedCount;
    }
    static getMedianSpeedForWord(word) {
        const wordSpeeds = TbdData.getSpeedsForWord(word);
        if (wordSpeeds.length < 1) {
            return 0;
        }
        return (0, misc_1.median)(wordSpeeds);
    }
    static getMeanSpeedForWord(word) {
        const speeds = TbdData.getSpeedsForWord(word);
        if (speeds.length == 0) {
            return 0;
        }
        return Math.round((0, misc_1.mean)(speeds));
    }
    static saveWordData(word, wordData) {
        const data = TbdData.getAll();
        data.words[word] = wordData;
        TbdData.updateData(data);
        TbdEvents.dispatchEvent("wordSaved", { word: word, data: wordData });
    }
    static addBurst(word, speed) {
        if (word == "") {
            return;
        }
        const wordData = TbdData.getDataForWord(word);
        wordData.speeds.push(speed);
        TbdData.saveWordData(word, wordData);
    }
    static addToMissedCount(word, missedCount) {
        const data = TbdData.getDataForWord(word);
        data.missedCount += missedCount;
        TbdData.saveWordData(word, data);
    }
    static updateLocalStorage(data) {
        localStorage.setItem(TbdData.localStorageKey, JSON.stringify(data));
    }
}
TbdData.localStorageKey = "tbdModeData";
TbdData.debouncedUpdateLocalStorage = (0, debounce_1.debounce)(TbdData.updateLocalStorage, 1000);
class TbdGroups {
    constructor() {
        this.groups = [];
    }
    setGroups(groups) {
        this.groups = groups;
    }
    getGroups() {
        return this.groups;
    }
    getFirstIncompleteGroup(targetSpeed) {
        return (this.groups.find((group) => {
            return group
                .getWordset()
                .words.some((word) => !TbdData.hasWordBeenTypedFasterThan(word, targetSpeed));
        }) || null);
    }
    regenerateGroups(words, desiredGroupSize) {
        this.groups = [];
        if (words.length == 0) {
            return;
        }
        const randomlySorted = words.sort(TbdSorting.randomSorter);
        // This is an effort to ensure there are no tiny group sizes, like if there are 200
        // words and a group size of 18. Creating groups of size 18 would mean getting 11 groups
        // of 18 and 1 group of 2. This method ends up creating 8 groups of 17 (136) + 4 groups of
        // 16 (64). I'm sure there is a better way to calculate it but this seems to work and I'm
        // lazy when it comes to math.
        const total = words.length;
        const actualGroupCount = Math.ceil(total / desiredGroupSize);
        const maxGroupSize = Math.ceil(total / actualGroupCount);
        const reducedGroupSize = maxGroupSize - 1;
        const sizesToCreate = [];
        let remainingWords = total;
        for (let i = 0; i < actualGroupCount; i++) {
            if (remainingWords % maxGroupSize == 0) {
                sizesToCreate.push(maxGroupSize);
                remainingWords -= maxGroupSize;
            }
            else {
                sizesToCreate.push(reducedGroupSize);
                remainingWords -= reducedGroupSize;
            }
        }
        let start = 0;
        sizesToCreate.forEach((size) => {
            const words = randomlySorted.slice(start, start + size);
            const wordset = new wordset_1.Wordset(words);
            this.groups.push(new TbdGroup(wordset));
            start = start + size;
        });
        TbdEvents.dispatchEvent("groupsRegenerated", { groups: this.groups });
        TbdEvents.dispatchEvent("nextGroup", {
            group: this.getGroups()[0],
            groupNumber: 1,
        });
    }
}
class TbdGroup {
    constructor(wordset) {
        this.threshold = 1;
        this.wordset = wordset;
    }
    getWordset() {
        return this.wordset;
    }
    getThreshold() {
        return this.threshold;
    }
    bumpThreshold() {
        this.threshold += 1;
        TbdEvents.dispatchEvent("groupThresholdChanged", {
            threshold: this.threshold,
        });
    }
    getUnbeatenWordset() {
        const unbeatenWords = this.wordset.words.filter((word) => {
            return !TbdData.hasWordBeenTypedFasterThan(word, this.getThreshold());
        });
        return new wordset_1.Wordset(unbeatenWords);
    }
    increaseThresholdUntilSomeWordsAreUnbeaten() {
        if (this.wordset.length == 0) {
            return;
        }
        while (this.getUnbeatenWordset().length == 0) {
            this.bumpThreshold();
        }
    }
}
ConfigEvent.subscribe(handleFunboxChange);
function isTbdMode() {
    return config_1.default.funbox == "tbdmode";
}
function handleFunboxChange(key, _newValue, _nosave, _previousValue, _fullConfig) {
    if (key != "funbox") {
        return;
    }
    if (isTbdMode() && !getTbdMode()) {
        const tbdConfig = new TbdConfig();
        tbdConfig.init();
        tbdMode = new TbdMode(tbdConfig);
        tbdMode.init();
        const ui = new TbdUI(tbdMode);
        ui.init();
    }
    else if (!isTbdMode() && getTbdMode()) {
        // This was the easiest way I could think of to ensure there's nothing left over
        // after switching from TBD Mode to something else.
        location.reload();
    }
}
let tbdMode;
function getTbdMode() {
    return tbdMode;
}
exports.getTbdMode = getTbdMode;
ConfigStuff.setFunbox("tbdmode");


/***/ }),

/***/ "./src/scripts/test/test-config.ts":
/*!*****************************************!*\
  !*** ./src/scripts/test/test-config.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.update = exports.hide = exports.show = void 0;
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
// export function show() {
//   $("#top .config").removeClass("hidden").css("opacity", 1);
// }
// export function hide() {
//   $("#top .config").css("opacity", 0).addClass("hidden");
// }
function show() {
    $("#top .config")
        .stop(true, true)
        .removeClass("hidden")
        .css("opacity", 0)
        .animate({
        opacity: 1,
    }, 125);
}
exports.show = show;
function hide() {
    $("#top .config")
        .stop(true, true)
        .css("opacity", 1)
        .animate({
        opacity: 0,
    }, 125, () => {
        $("#top .config").addClass("hidden");
    });
}
exports.hide = hide;
function update(previous, current) {
    if (previous === current)
        return;
    $("#top .config .mode .text-button").removeClass("active");
    $("#top .config .mode .text-button[mode='" + current + "']").addClass("active");
    if (current == "time") {
        // $("#top .config .wordCount").addClass("hidden");
        // $("#top .config .time").removeClass("hidden");
        // $("#top .config .customText").addClass("hidden");
        $("#top .config .punctuationMode").removeClass("disabled");
        $("#top .config .numbersMode").removeClass("disabled");
        // $("#top .config .puncAndNum").removeClass("disabled");
        // $("#top .config .punctuationMode").removeClass("hidden");
        // $("#top .config .numbersMode").removeClass("hidden");
        // $("#top .config .quoteLength").addClass("hidden");
    }
    else if (current == "words") {
        // $("#top .config .wordCount").removeClass("hidden");
        // $("#top .config .time").addClass("hidden");
        // $("#top .config .customText").addClass("hidden");
        $("#top .config .punctuationMode").removeClass("disabled");
        $("#top .config .numbersMode").removeClass("disabled");
        // $("#top .config .puncAndNum").removeClass("disabled");
        // $("#top .config .punctuationMode").removeClass("hidden");
        // $("#top .config .numbersMode").removeClass("hidden");
        // $("#top .config .quoteLength").addClass("hidden");
    }
    else if (current == "custom") {
        // $("#top .config .wordCount").addClass("hidden");
        // $("#top .config .time").addClass("hidden");
        // $("#top .config .customText").removeClass("hidden");
        $("#top .config .punctuationMode").removeClass("disabled");
        $("#top .config .numbersMode").removeClass("disabled");
        // $("#top .config .puncAndNum").removeClass("disabled");
        // $("#top .config .punctuationMode").removeClass("hidden");
        // $("#top .config .numbersMode").removeClass("hidden");
        // $("#top .config .quoteLength").addClass("hidden");
    }
    else if (current == "quote") {
        // $("#top .config .wordCount").addClass("hidden");
        // $("#top .config .time").addClass("hidden");
        // $("#top .config .customText").addClass("hidden");
        $("#top .config .punctuationMode").addClass("disabled");
        $("#top .config .numbersMode").addClass("disabled");
        // $("#top .config .puncAndNum").addClass("disabled");
        // $("#top .config .punctuationMode").removeClass("hidden");
        // $("#top .config .numbersMode").removeClass("hidden");
        // $("#result .stats .source").removeClass("hidden");
        // $("#top .config .quoteLength").removeClass("hidden");
    }
    else if (current == "zen") {
        // $("#top .config .wordCount").addClass("hidden");
        // $("#top .config .time").addClass("hidden");
        // $("#top .config .customText").addClass("hidden");
        // $("#top .config .punctuationMode").addClass("hidden");
        // $("#top .config .numbersMode").addClass("hidden");
        // $("#top .config .quoteLength").addClass("hidden");
    }
    const submenu = {
        time: "time",
        words: "wordCount",
        custom: "customText",
        quote: "quoteLength",
        zen: "",
    };
    const animTime = 250;
    if (current == "zen") {
        $(`#top .config .${submenu[previous]}`).animate({
            opacity: 0,
        }, animTime / 2, () => {
            $(`#top .config .${submenu[previous]}`).addClass("hidden");
        });
        $(`#top .config .puncAndNum`).animate({
            opacity: 0,
        }, animTime / 2, () => {
            $(`#top .config .puncAndNum`).addClass("invisible");
        });
        return;
    }
    if (previous == "zen") {
        setTimeout(() => {
            $(`#top .config .${submenu[current]}`).removeClass("hidden");
            $(`#top .config .${submenu[current]}`)
                .css({ opacity: 0 })
                .animate({
                opacity: 1,
            }, animTime / 2);
            $(`#top .config .puncAndNum`).removeClass("invisible");
            $(`#top .config .puncAndNum`)
                .css({ opacity: 0 })
                .animate({
                opacity: 1,
            }, animTime / 2);
        }, animTime / 2);
        return;
    }
    Misc.swapElements($("#top .config ." + submenu[previous]), $("#top .config ." + submenu[current]), animTime);
}
exports.update = update;
ConfigEvent.subscribe((eventKey, eventValue, _nosave, eventPreviousValue) => {
    if (eventKey === "mode") {
        update(eventPreviousValue, eventValue);
    }
});


/***/ }),

/***/ "./src/scripts/test/test-input.ts":
/*!****************************************!*\
  !*** ./src/scripts/test/test-input.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.restart = exports.pushBurstToHistory = exports.pushToRawHistory = exports.pushToWpmHistory = exports.pushMissedWord = exports.resetKeypressTimings = exports.recordKeypressSpacing = exports.setKeypressDuration = exports.pushKeypressDuration = exports.setKeypressTimingsTooLong = exports.incrementAccuracy = exports.pushKeypressesToHistory = exports.setBurstStart = exports.pushKeypressWord = exports.incrementKeypressErrors = exports.setKeypressNotAfk = exports.incrementKeypressCount = exports.updateLastKeypress = exports.enableSpacingDebug = exports.spacingDebug = exports.setBailout = exports.bailout = exports.burstHistory = exports.rawHistory = exports.wpmHistory = exports.keypressTimings = exports.accuracy = exports.missedWords = exports.currentBurstStart = exports.lastKeypress = exports.currentKeypress = exports.keypressPerSecond = exports.corrected = exports.input = void 0;
const TestWords = __importStar(__webpack_require__(/*! ./test-words */ "./src/scripts/test/test-words.ts"));
const misc_1 = __webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts");
class Input {
    constructor() {
        this.current = "";
        this.history = [];
        this.historyLength = 0;
        this.length = 0;
    }
    reset() {
        this.current = "";
        this.history = [];
        this.length = 0;
    }
    resetHistory() {
        this.history = [];
        this.length = 0;
    }
    setCurrent(val) {
        this.current = val;
        this.length = this.current.length;
    }
    appendCurrent(val) {
        this.current += val;
        this.length = this.current.length;
    }
    resetCurrent() {
        this.current = "";
    }
    getCurrent() {
        return this.current;
    }
    pushHistory() {
        this.history.push(this.current);
        this.historyLength = this.history.length;
        this.resetCurrent();
    }
    popHistory() {
        var _a;
        const ret = (_a = this.history.pop()) !== null && _a !== void 0 ? _a : "";
        this.historyLength = this.history.length;
        return ret;
    }
    getHistory(i) {
        if (i === undefined) {
            return this.history;
        }
        else {
            return this.history[i];
        }
    }
    getHistoryLast() {
        return this.history[this.history.length - 1];
    }
}
class Corrected {
    constructor() {
        this.current = "";
        this.history = [];
    }
    setCurrent(val) {
        this.current = val;
    }
    appendCurrent(val) {
        this.current += val;
    }
    resetCurrent() {
        this.current = "";
    }
    resetHistory() {
        this.history = [];
    }
    reset() {
        this.resetCurrent();
        this.resetHistory();
    }
    getHistory(i) {
        return this.history[i];
    }
    popHistory() {
        var _a;
        return (_a = this.history.pop()) !== null && _a !== void 0 ? _a : "";
    }
    pushHistory() {
        this.history.push(this.current);
        this.current = "";
    }
}
exports.input = new Input();
exports.corrected = new Corrected();
exports.keypressPerSecond = [];
exports.currentKeypress = {
    count: 0,
    errors: 0,
    words: [],
    afk: true,
};
exports.currentBurstStart = 0;
exports.missedWords = {};
exports.accuracy = {
    correct: 0,
    incorrect: 0,
};
exports.keypressTimings = {
    spacing: {
        current: -1,
        array: [],
    },
    duration: {
        current: -1,
        array: [],
    },
};
exports.wpmHistory = [];
exports.rawHistory = [];
exports.burstHistory = [];
exports.bailout = false;
function setBailout(tf) {
    exports.bailout = tf;
}
exports.setBailout = setBailout;
exports.spacingDebug = false;
function enableSpacingDebug() {
    exports.spacingDebug = true;
    console.clear();
}
exports.enableSpacingDebug = enableSpacingDebug;
function updateLastKeypress() {
    exports.lastKeypress = performance.now();
}
exports.updateLastKeypress = updateLastKeypress;
function incrementKeypressCount() {
    exports.currentKeypress.count++;
}
exports.incrementKeypressCount = incrementKeypressCount;
function setKeypressNotAfk() {
    exports.currentKeypress.afk = false;
}
exports.setKeypressNotAfk = setKeypressNotAfk;
function incrementKeypressErrors() {
    exports.currentKeypress.errors++;
}
exports.incrementKeypressErrors = incrementKeypressErrors;
function pushKeypressWord(wordIndex) {
    exports.currentKeypress.words.push(wordIndex);
}
exports.pushKeypressWord = pushKeypressWord;
function setBurstStart(time) {
    exports.currentBurstStart = time;
}
exports.setBurstStart = setBurstStart;
function pushKeypressesToHistory() {
    exports.keypressPerSecond.push(exports.currentKeypress);
    exports.currentKeypress = {
        count: 0,
        errors: 0,
        words: [],
        afk: true,
    };
}
exports.pushKeypressesToHistory = pushKeypressesToHistory;
function incrementAccuracy(correctincorrect) {
    if (correctincorrect) {
        exports.accuracy.correct++;
    }
    else {
        exports.accuracy.incorrect++;
    }
}
exports.incrementAccuracy = incrementAccuracy;
function setKeypressTimingsTooLong() {
    exports.keypressTimings.spacing.array = "toolong";
    exports.keypressTimings.duration.array = "toolong";
}
exports.setKeypressTimingsTooLong = setKeypressTimingsTooLong;
function pushKeypressDuration(val) {
    exports.keypressTimings.duration.array.push((0, misc_1.roundTo2)(val));
}
exports.pushKeypressDuration = pushKeypressDuration;
function setKeypressDuration(val) {
    exports.keypressTimings.duration.current = (0, misc_1.roundTo2)(val);
}
exports.setKeypressDuration = setKeypressDuration;
function pushKeypressSpacing(val) {
    exports.keypressTimings.spacing.array.push((0, misc_1.roundTo2)(val));
}
function setKeypressSpacing(val) {
    exports.keypressTimings.spacing.current = (0, misc_1.roundTo2)(val);
}
function recordKeypressSpacing() {
    const now = performance.now();
    const diff = Math.abs(exports.keypressTimings.spacing.current - now);
    if (exports.keypressTimings.spacing.current !== -1) {
        pushKeypressSpacing(diff);
        if (exports.spacingDebug) {
            console.log("spacing debug", "push", diff, "length", exports.keypressTimings.spacing.array.length);
        }
    }
    setKeypressSpacing(now);
    if (exports.spacingDebug) {
        console.log("spacing debug", "set", now, "length", exports.keypressTimings.spacing.array.length);
    }
    if (exports.spacingDebug) {
        console.log("spacing debug", "recorded", "length", exports.keypressTimings.spacing.array.length);
    }
}
exports.recordKeypressSpacing = recordKeypressSpacing;
function resetKeypressTimings() {
    exports.keypressTimings = {
        spacing: {
            current: performance.now(),
            array: [],
        },
        duration: {
            current: performance.now(),
            array: [],
        },
    };
    if (exports.spacingDebug)
        console.clear();
}
exports.resetKeypressTimings = resetKeypressTimings;
function pushMissedWord(word) {
    if (!Object.keys(exports.missedWords).includes(word)) {
        exports.missedWords[word] = 1;
    }
    else {
        exports.missedWords[word]++;
    }
}
exports.pushMissedWord = pushMissedWord;
function pushToWpmHistory(wpm) {
    exports.wpmHistory.push(wpm);
}
exports.pushToWpmHistory = pushToWpmHistory;
function pushToRawHistory(raw) {
    exports.rawHistory.push(raw);
}
exports.pushToRawHistory = pushToRawHistory;
function pushBurstToHistory(speed) {
    if (exports.burstHistory[TestWords.words.currentIndex] === undefined) {
        exports.burstHistory.push(speed);
    }
    else {
        //repeated word - override
        exports.burstHistory[TestWords.words.currentIndex] = speed;
    }
}
exports.pushBurstToHistory = pushBurstToHistory;
function restart() {
    exports.wpmHistory = [];
    exports.rawHistory = [];
    exports.burstHistory = [];
    exports.keypressPerSecond = [];
    exports.currentKeypress = {
        count: 0,
        errors: 0,
        words: [],
        afk: true,
    };
    exports.currentBurstStart = 0;
    exports.missedWords = {};
    exports.accuracy = {
        correct: 0,
        incorrect: 0,
    };
    exports.keypressTimings = {
        spacing: {
            current: -1,
            array: [],
        },
        duration: {
            current: -1,
            array: [],
        },
    };
}
exports.restart = restart;


/***/ }),

/***/ "./src/scripts/test/test-logic.ts":
/*!****************************************!*\
  !*** ./src/scripts/test/test-logic.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fail = exports.finish = exports.retrySavingResult = exports.addWord = exports.init = exports.restart = exports.startTest = exports.punctuateWord = exports.setNotSignedInUid = exports.clearNotSignedInResult = exports.notSignedInLastResult = void 0;
const ape_1 = __importDefault(__webpack_require__(/*! ../ape */ "./src/scripts/ape/index.ts"));
const TestUI = __importStar(__webpack_require__(/*! ./test-ui */ "./src/scripts/test/test-ui.ts"));
const ManualRestart = __importStar(__webpack_require__(/*! ./manual-restart-tracker */ "./src/scripts/test/manual-restart-tracker.ts"));
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const quotes_controller_1 = __importDefault(__webpack_require__(/*! ../controllers/quotes-controller */ "./src/scripts/controllers/quotes-controller.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const CustomText = __importStar(__webpack_require__(/*! ./custom-text */ "./src/scripts/test/custom-text.ts"));
const TestStats = __importStar(__webpack_require__(/*! ./test-stats */ "./src/scripts/test/test-stats.ts"));
const PractiseWords = __importStar(__webpack_require__(/*! ./practise-words */ "./src/scripts/test/practise-words.ts"));
const ShiftTracker = __importStar(__webpack_require__(/*! ./shift-tracker */ "./src/scripts/test/shift-tracker.ts"));
const Focus = __importStar(__webpack_require__(/*! ./focus */ "./src/scripts/test/focus.ts"));
const Funbox = __importStar(__webpack_require__(/*! ./funbox */ "./src/scripts/test/funbox.ts"));
const Keymap = __importStar(__webpack_require__(/*! ../elements/keymap */ "./src/scripts/elements/keymap.ts"));
const ThemeController = __importStar(__webpack_require__(/*! ../controllers/theme-controller */ "./src/scripts/controllers/theme-controller.ts"));
const PaceCaret = __importStar(__webpack_require__(/*! ./pace-caret */ "./src/scripts/test/pace-caret.ts"));
const Caret = __importStar(__webpack_require__(/*! ./caret */ "./src/scripts/test/caret.ts"));
const LiveWpm = __importStar(__webpack_require__(/*! ./live-wpm */ "./src/scripts/test/live-wpm.ts"));
const LiveAcc = __importStar(__webpack_require__(/*! ./live-acc */ "./src/scripts/test/live-acc.ts"));
const LiveBurst = __importStar(__webpack_require__(/*! ./live-burst */ "./src/scripts/test/live-burst.ts"));
const TimerProgress = __importStar(__webpack_require__(/*! ./timer-progress */ "./src/scripts/test/timer-progress.ts"));
const QuoteSearchPopup = __importStar(__webpack_require__(/*! ../popups/quote-search-popup */ "./src/scripts/popups/quote-search-popup.ts"));
const QuoteSubmitPopup = __importStar(__webpack_require__(/*! ../popups/quote-submit-popup */ "./src/scripts/popups/quote-submit-popup.ts"));
const PbCrown = __importStar(__webpack_require__(/*! ./pb-crown */ "./src/scripts/test/pb-crown.ts"));
const TestTimer = __importStar(__webpack_require__(/*! ./test-timer */ "./src/scripts/test/test-timer.ts"));
const OutOfFocus = __importStar(__webpack_require__(/*! ./out-of-focus */ "./src/scripts/test/out-of-focus.ts"));
const AccountButton = __importStar(__webpack_require__(/*! ../elements/account-button */ "./src/scripts/elements/account-button.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const Replay = __importStar(__webpack_require__(/*! ./replay */ "./src/scripts/test/replay.ts"));
const Poetry = __importStar(__webpack_require__(/*! ./poetry */ "./src/scripts/test/poetry.ts"));
const Wikipedia = __importStar(__webpack_require__(/*! ./wikipedia */ "./src/scripts/test/wikipedia.ts"));
const TodayTracker = __importStar(__webpack_require__(/*! ./today-tracker */ "./src/scripts/test/today-tracker.ts"));
const WeakSpot = __importStar(__webpack_require__(/*! ./weak-spot */ "./src/scripts/test/weak-spot.ts"));
const Wordset = __importStar(__webpack_require__(/*! ./wordset */ "./src/scripts/test/wordset.ts"));
const ChallengeContoller = __importStar(__webpack_require__(/*! ../controllers/challenge-controller */ "./src/scripts/controllers/challenge-controller.ts"));
const QuoteRatePopup = __importStar(__webpack_require__(/*! ../popups/quote-rate-popup */ "./src/scripts/popups/quote-rate-popup.ts"));
const BritishEnglish = __importStar(__webpack_require__(/*! ./british-english */ "./src/scripts/test/british-english.ts"));
const LazyMode = __importStar(__webpack_require__(/*! ./lazy-mode */ "./src/scripts/test/lazy-mode.ts"));
const Result = __importStar(__webpack_require__(/*! ./result */ "./src/scripts/test/result.ts"));
const MonkeyPower = __importStar(__webpack_require__(/*! ../elements/monkey-power */ "./src/scripts/elements/monkey-power.ts"));
const ActivePage = __importStar(__webpack_require__(/*! ../states/active-page */ "./src/scripts/states/active-page.ts"));
const TestActive = __importStar(__webpack_require__(/*! ../states/test-active */ "./src/scripts/states/test-active.ts"));
const TestInput = __importStar(__webpack_require__(/*! ./test-input */ "./src/scripts/test/test-input.ts"));
const TestWords = __importStar(__webpack_require__(/*! ./test-words */ "./src/scripts/test/test-words.ts"));
const TestState = __importStar(__webpack_require__(/*! ./test-state */ "./src/scripts/test/test-state.ts"));
const ModesNotice = __importStar(__webpack_require__(/*! ../elements/modes-notice */ "./src/scripts/elements/modes-notice.ts"));
const PageTransition = __importStar(__webpack_require__(/*! ../states/page-transition */ "./src/scripts/states/page-transition.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const TimerEvent = __importStar(__webpack_require__(/*! ../observables/timer-event */ "./src/scripts/observables/timer-event.ts"));
const ResetRequestedEvent = __importStar(__webpack_require__(/*! ../observables/reset-requested-event */ "./src/scripts/observables/reset-requested-event.ts"));
const Last10Average = __importStar(__webpack_require__(/*! ../elements/last-10-average */ "./src/scripts/elements/last-10-average.ts"));
const Monkey = __importStar(__webpack_require__(/*! ./monkey */ "./src/scripts/test/monkey.ts"));
const tbd_mode_1 = __webpack_require__(/*! ./tbd-mode */ "./src/scripts/test/tbd-mode.ts");
const object_hash_1 = __importDefault(__webpack_require__(/*! object-hash */ "./node_modules/object-hash/dist/object_hash.js"));
const AnalyticsController = __importStar(__webpack_require__(/*! ../controllers/analytics-controller */ "./src/scripts/controllers/analytics-controller.ts"));
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
let failReason = "";
exports.notSignedInLastResult = null;
function clearNotSignedInResult() {
    exports.notSignedInLastResult = null;
}
exports.clearNotSignedInResult = clearNotSignedInResult;
function setNotSignedInUid(uid) {
    if (exports.notSignedInLastResult === null)
        return;
    exports.notSignedInLastResult.uid = uid;
    delete exports.notSignedInLastResult.hash;
    exports.notSignedInLastResult.hash = (0, object_hash_1.default)(exports.notSignedInLastResult);
}
exports.setNotSignedInUid = setNotSignedInUid;
let spanishSentenceTracker = "";
function punctuateWord(previousWord, currentWord, index, maxindex) {
    let word = currentWord;
    const currentLanguage = config_1.default.language.split("_")[0];
    const lastChar = Misc.getLastChar(previousWord);
    if (config_1.default.funbox === "58008") {
        if (currentWord.length > 3) {
            if (Math.random() < 0.75) {
                const special = ["/", "*", "-", "+"][Math.floor(Math.random() * 4)];
                word = Misc.setCharAt(word, Math.floor(word.length / 2), special);
            }
        }
    }
    else {
        if ((index == 0 || lastChar == "." || lastChar == "?" || lastChar == "!") &&
            currentLanguage != "code") {
            //always capitalise the first word or if there was a dot unless using a code alphabet
            word = Misc.capitalizeFirstLetterOfEachWord(word);
            if (currentLanguage == "spanish" || currentLanguage == "catalan") {
                const rand = Math.random();
                if (rand > 0.9) {
                    word = "¿" + word;
                    spanishSentenceTracker = "?";
                }
                else if (rand > 0.8) {
                    word = "¡" + word;
                    spanishSentenceTracker = "!";
                }
            }
        }
        else if ((Math.random() < 0.1 &&
            lastChar != "." &&
            lastChar != "," &&
            index != maxindex - 2) ||
            index == maxindex - 1) {
            if (currentLanguage == "spanish" || currentLanguage == "catalan") {
                if (spanishSentenceTracker == "?" || spanishSentenceTracker == "!") {
                    word += spanishSentenceTracker;
                    spanishSentenceTracker = "";
                }
            }
            else {
                const rand = Math.random();
                if (rand <= 0.8) {
                    word += ".";
                }
                else if (rand > 0.8 && rand < 0.9) {
                    if (currentLanguage == "french") {
                        word = "?";
                    }
                    else if (currentLanguage == "arabic" ||
                        currentLanguage == "persian" ||
                        currentLanguage == "urdu") {
                        word += "؟";
                    }
                    else if (currentLanguage == "greek") {
                        word += ";";
                    }
                    else {
                        word += "?";
                    }
                }
                else {
                    if (currentLanguage == "french") {
                        word = "!";
                    }
                    else {
                        word += "!";
                    }
                }
            }
        }
        else if (Math.random() < 0.01 &&
            lastChar != "," &&
            lastChar != "." &&
            currentLanguage !== "russian") {
            word = `"${word}"`;
        }
        else if (Math.random() < 0.011 &&
            lastChar != "," &&
            lastChar != "." &&
            currentLanguage !== "russian" &&
            currentLanguage !== "ukrainian") {
            word = `'${word}'`;
        }
        else if (Math.random() < 0.012 && lastChar != "," && lastChar != ".") {
            if (currentLanguage == "code") {
                const r = Math.random();
                if (r < 0.25) {
                    word = `(${word})`;
                }
                else if (r < 0.5) {
                    word = `{${word}}`;
                }
                else if (r < 0.75) {
                    word = `[${word}]`;
                }
                else {
                    word = `<${word}>`;
                }
            }
            else {
                word = `(${word})`;
            }
        }
        else if (Math.random() < 0.013 &&
            lastChar != "," &&
            lastChar != "." &&
            lastChar != ";" &&
            lastChar != "؛" &&
            lastChar != ":") {
            if (currentLanguage == "french") {
                word = ":";
            }
            else if (currentLanguage == "greek") {
                word = "·";
            }
            else {
                word += ":";
            }
        }
        else if (Math.random() < 0.014 &&
            lastChar != "," &&
            lastChar != "." &&
            previousWord != "-") {
            word = "-";
        }
        else if (Math.random() < 0.015 &&
            lastChar != "," &&
            lastChar != "." &&
            lastChar != ";" &&
            lastChar != "؛" &&
            lastChar != ":") {
            if (currentLanguage == "french") {
                word = ";";
            }
            else if (currentLanguage == "greek") {
                word = "·";
            }
            else if (currentLanguage == "arabic") {
                word += "؛";
            }
            else {
                word += ";";
            }
        }
        else if (Math.random() < 0.2 && lastChar != ",") {
            if (currentLanguage == "arabic" ||
                currentLanguage == "urdu" ||
                currentLanguage == "persian") {
                word += "،";
            }
            else {
                word += ",";
            }
        }
        else if (Math.random() < 0.25 && currentLanguage == "code") {
            const specials = ["{", "}", "[", "]", "(", ")", ";", "=", "+", "%", "/"];
            word = Misc.randomElementFromArray(specials);
        }
    }
    return word;
}
exports.punctuateWord = punctuateWord;
function startTest() {
    if (PageTransition.get()) {
        return false;
    }
    if (!UpdateConfig.dbConfigLoaded) {
        UpdateConfig.setChangedBeforeDb(true);
    }
    if (firebase_1.Auth.currentUser !== null) {
        AnalyticsController.log("testStarted");
    }
    else {
        AnalyticsController.log("testStartedNoLogin");
    }
    TestActive.set(true);
    Replay.startReplayRecording();
    Replay.replayGetWordsList(TestWords.words.list);
    TestInput.resetKeypressTimings();
    TimerProgress.restart();
    TimerProgress.show();
    $("#liveWpm").text("0");
    LiveWpm.show();
    LiveAcc.show();
    LiveBurst.show();
    TimerProgress.update();
    TestTimer.clear();
    Monkey.show();
    if (config_1.default.funbox === "memory") {
        Funbox.resetMemoryTimer();
        $("#wordsWrapper").addClass("hidden");
    }
    try {
        if (config_1.default.paceCaret !== "off" ||
            (config_1.default.repeatedPace && TestState.isPaceRepeat)) {
            PaceCaret.start();
        }
    }
    catch (e) { }
    //use a recursive self-adjusting timer to avoid time drift
    TestStats.setStart(performance.now());
    TestTimer.start();
    return true;
}
exports.startTest = startTest;
function restart(withSameWordset = false, _, // this is nosave and should be renamed to nosave when needed
event, practiseMissed = false, noAnim = false) {
    if (TestUI.testRestarting || TestUI.resultCalculating) {
        event === null || event === void 0 ? void 0 : event.preventDefault();
        return;
    }
    if (ActivePage.get() == "test" && !TestUI.resultVisible) {
        if (!ManualRestart.get()) {
            if (TestWords.hasTab) {
                if (!(event === null || event === void 0 ? void 0 : event.shiftKey))
                    return;
            }
            if (config_1.default.mode !== "zen")
                event === null || event === void 0 ? void 0 : event.preventDefault();
            if (!Misc.canQuickRestart(config_1.default.mode, config_1.default.words, config_1.default.time, CustomText)) {
                let message = "Use your mouse to confirm.";
                if (config_1.default.quickTab) {
                    message = "Press shift + tab or use your mouse to confirm.";
                }
                Notifications.add("Quick restart disabled. " + message, 0, 3);
                return;
            }
            // }else{
            //   return;
            // }
        }
    }
    if (TestActive.get()) {
        TestInput.pushKeypressesToHistory();
        const testSeconds = TestStats.calculateTestSeconds(performance.now());
        const afkseconds = TestStats.calculateAfkSeconds(testSeconds);
        // incompleteTestSeconds += ;
        let tt = testSeconds - afkseconds;
        if (tt < 0)
            tt = 0;
        console.log(`increasing incomplete time by ${tt}s (${testSeconds}s - ${afkseconds}s afk)`);
        TestStats.incrementIncompleteSeconds(tt);
        TestStats.incrementRestartCount();
        if (tt > 600) {
            Notifications.add(`Your time typing just increased by ${Misc.roundTo2(tt / 60)} minutes. If you think this is incorrect please contact Miodec and dont refresh the website.`, -1);
        }
        // restartCount++;
    }
    if (config_1.default.mode == "zen") {
        $("#words").empty();
    }
    if (PractiseWords.before.mode !== null &&
        !withSameWordset &&
        !practiseMissed) {
        Notifications.add("Reverting to previous settings.", 0);
        if (PractiseWords.before.punctuation !== null) {
            UpdateConfig.setPunctuation(PractiseWords.before.punctuation);
        }
        if (PractiseWords.before.numbers !== null) {
            UpdateConfig.setNumbers(PractiseWords.before.numbers);
        }
        UpdateConfig.setMode(PractiseWords.before.mode);
        PractiseWords.resetBefore();
    }
    let repeatWithPace = false;
    if (TestUI.resultVisible && config_1.default.repeatedPace && withSameWordset) {
        repeatWithPace = true;
    }
    ManualRestart.reset();
    TestTimer.clear();
    TestStats.restart();
    TestInput.restart();
    TestInput.corrected.reset();
    ShiftTracker.reset();
    Caret.hide();
    TestActive.set(false);
    Replay.stopReplayRecording();
    LiveWpm.hide();
    LiveAcc.hide();
    LiveBurst.hide();
    TimerProgress.hide();
    Replay.pauseReplay();
    TestInput.setBailout(false);
    PaceCaret.reset();
    Monkey.hide();
    if (config_1.default.showAverage)
        Last10Average.update();
    $("#showWordHistoryButton").removeClass("loaded");
    $("#restartTestButton").blur();
    Funbox.resetMemoryTimer();
    QuoteRatePopup.clearQuoteStats();
    if (ActivePage.get() == "test" && window.scrollY > 0) {
        window.scrollTo({ top: 0, behavior: "smooth" });
    }
    $("#wordsInput").val(" ");
    TestUI.reset();
    $("#timerNumber").css("opacity", 0);
    let el = null;
    if (TestUI.resultVisible) {
        //results are being displayed
        el = $("#result");
    }
    else {
        //words are being displayed
        el = $("#typingTest");
    }
    if (TestUI.resultVisible) {
        if (config_1.default.randomTheme !== "off" &&
            !PageTransition.get()
        // && Config.customThemeId === ""
        ) {
            ThemeController.randomizeTheme();
        }
    }
    TestUI.setResultVisible(false);
    PageTransition.set(true);
    TestUI.setTestRestarting(true);
    el.stop(true, true).animate({
        opacity: 0,
    }, noAnim ? 0 : 125, () => __awaiter(this, void 0, void 0, function* () {
        if (ActivePage.get() == "test")
            Focus.set(false);
        TestUI.focusWords();
        $("#monkey .fast").stop(true, true).css("opacity", 0);
        $("#monkey").stop(true, true).css({ animationDuration: "0s" });
        $("#typingTest").css("opacity", 0).removeClass("hidden");
        $("#wordsInput").val(" ");
        let shouldQuoteRepeat = false;
        if (config_1.default.mode === "quote" &&
            config_1.default.repeatQuotes === "typing" &&
            failReason !== "") {
            shouldQuoteRepeat = true;
        }
        yield Funbox.rememberSettings();
        if (config_1.default.funbox === "arrows") {
            UpdateConfig.setPunctuation(false, true);
            UpdateConfig.setNumbers(false, true);
        }
        else if (config_1.default.funbox === "58008") {
            UpdateConfig.setNumbers(false, true);
        }
        else if (config_1.default.funbox === "specials") {
            UpdateConfig.setPunctuation(false, true);
            UpdateConfig.setNumbers(false, true);
        }
        else if (config_1.default.funbox === "ascii") {
            UpdateConfig.setPunctuation(false, true);
            UpdateConfig.setNumbers(false, true);
        }
        if (withSameWordset &&
            (config_1.default.funbox === "plus_one" || config_1.default.funbox === "plus_two")) {
            Notifications.add("Sorry, this funbox won't work with repeated tests.", 0, 4);
            withSameWordset = false;
        }
        if (!withSameWordset && !shouldQuoteRepeat) {
            TestState.setRepeated(false);
            TestState.setPaceRepeat(repeatWithPace);
            TestWords.setHasTab(false);
            yield init();
            yield PaceCaret.init();
        }
        else {
            TestState.setRepeated(true);
            TestState.setPaceRepeat(repeatWithPace);
            TestActive.set(false);
            Replay.stopReplayRecording();
            TestWords.words.resetCurrentIndex();
            TestInput.input.reset();
            TestUI.showWords();
            if (config_1.default.keymapMode === "next" && config_1.default.mode !== "zen") {
                Keymap.highlightKey(TestWords.words
                    .getCurrent()
                    .substring(TestInput.input.current.length, TestInput.input.current.length + 1)
                    .toString()
                    .toUpperCase());
            }
            Funbox.toggleScript(TestWords.words.getCurrent());
            yield PaceCaret.init();
        }
        failReason = "";
        if (config_1.default.mode === "quote") {
            TestState.setRepeated(false);
        }
        if (config_1.default.keymapMode !== "off") {
            Keymap.show();
        }
        else {
            Keymap.hide();
        }
        (document.querySelector("#miniTimerAndLiveWpm .wpm")).innerHTML = "0";
        (document.querySelector("#miniTimerAndLiveWpm .acc")).innerHTML = "100%";
        (document.querySelector("#miniTimerAndLiveWpm .burst")).innerHTML = "0";
        document.querySelector("#liveWpm").innerHTML = "0";
        document.querySelector("#liveAcc").innerHTML = "100%";
        document.querySelector("#liveBurst").innerHTML = "0";
        if (config_1.default.funbox === "memory") {
            Funbox.startMemoryTimer();
            if (config_1.default.keymapMode === "next") {
                UpdateConfig.setKeymapMode("react");
            }
        }
        const mode2 = Misc.getMode2(config_1.default, TestWords.randomQuote);
        let fbtext = "";
        if (config_1.default.funbox !== "none") {
            fbtext = " " + config_1.default.funbox;
        }
        $(".pageTest #premidTestMode").text(`${config_1.default.mode} ${mode2} ${config_1.default.language.replace(/_/g, " ")}${fbtext}`);
        $(".pageTest #premidSecondsLeft").text(config_1.default.time);
        if (config_1.default.funbox === "layoutfluid") {
            UpdateConfig.setLayout(config_1.default.customLayoutfluid
                ? config_1.default.customLayoutfluid.split("#")[0]
                : "qwerty", true);
            UpdateConfig.setKeymapLayout(config_1.default.customLayoutfluid
                ? config_1.default.customLayoutfluid.split("#")[0]
                : "qwerty", true);
            Keymap.highlightKey(TestWords.words
                .getCurrent()
                .substring(TestInput.input.current.length, TestInput.input.current.length + 1)
                .toString()
                .toUpperCase());
        }
        $("#result").addClass("hidden");
        $("#testModesNotice").removeClass("hidden").css({
            opacity: 1,
        });
        // resetPaceCaret();
        ModesNotice.update();
        $("#typingTest")
            .css("opacity", 0)
            .removeClass("hidden")
            .stop(true, true)
            .animate({
            opacity: 1,
        }, noAnim ? 0 : 125, () => {
            TestUI.setTestRestarting(false);
            // resetPaceCaret();
            PbCrown.hide();
            TestTimer.clear();
            if ($("#commandLineWrapper").hasClass("hidden")) {
                TestUI.focusWords();
            }
            // ChartController.result.update();
            PageTransition.set(false);
            // console.log(TestStats.incompleteSeconds);
            // console.log(TestStats.restartCount);
        });
    }));
}
exports.restart = restart;
function applyFunboxesToWord(word, wordset) {
    var _a;
    if (config_1.default.funbox === "rAnDoMcAsE") {
        let randomcaseword = "";
        for (let i = 0; i < word.length; i++) {
            if (i % 2 != 0) {
                randomcaseword += word[i].toUpperCase();
            }
            else {
                randomcaseword += word[i];
            }
        }
        word = randomcaseword;
    }
    else if (config_1.default.funbox === "capitals") {
        word = Misc.capitalizeFirstLetterOfEachWord(word);
    }
    else if (config_1.default.funbox === "gibberish") {
        word = Misc.getGibberish();
    }
    else if (config_1.default.funbox === "arrows") {
        word = Misc.getArrows();
    }
    else if (config_1.default.funbox === "58008") {
        word = Misc.getNumbers(7);
    }
    else if (config_1.default.funbox === "specials") {
        word = Misc.getSpecials();
    }
    else if (config_1.default.funbox === "ascii") {
        word = Misc.getASCII();
    }
    else if (wordset !== undefined && config_1.default.funbox === "weakspot") {
        word = WeakSpot.getWord(wordset);
    }
    else if (wordset !== undefined && config_1.default.funbox === "tbdmode") {
        word = ((_a = (0, tbd_mode_1.getTbdMode)()) === null || _a === void 0 ? void 0 : _a.getWord(wordset)) || word;
    }
    return word;
}
function applyBritishEnglishToWord(word) {
    return __awaiter(this, void 0, void 0, function* () {
        if (config_1.default.britishEnglish && /english/.test(config_1.default.language)) {
            word = yield BritishEnglish.replace(word);
        }
        return word;
    });
}
function applyLazyModeToWord(word, language) {
    if (config_1.default.lazyMode === true && !language.noLazyMode) {
        word = LazyMode.replaceAccents(word, language.accents);
    }
    return word;
}
function getNextWord(wordset, language, wordsBound) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        let randomWord = wordset.randomWord();
        const previousWord = TestWords.words.get(TestWords.words.length - 1, true);
        const previousWord2 = TestWords.words.get(TestWords.words.length - 2, true);
        if (config_1.default.mode === "quote") {
            randomWord =
                (_b = (_a = TestWords.randomQuote.textSplit) === null || _a === void 0 ? void 0 : _a[TestWords.words.length]) !== null && _b !== void 0 ? _b : "";
        }
        else if (config_1.default.mode == "custom" &&
            !CustomText.isWordRandom &&
            !CustomText.isTimeRandom) {
            randomWord = CustomText.text[TestWords.words.length];
        }
        else if (config_1.default.mode == "custom" &&
            (CustomText.isWordRandom || CustomText.isTimeRandom) &&
            (wordset.length < 4 || PractiseWords.before.mode !== null)) {
            randomWord = wordset.randomWord();
        }
        else {
            let regenarationCount = 0; //infinite loop emergency stop button
            while (regenarationCount < 100 &&
                (previousWord == randomWord ||
                    previousWord2 == randomWord ||
                    (!config_1.default.punctuation && randomWord == "I"))) {
                regenarationCount++;
                randomWord = wordset.randomWord();
            }
        }
        if (randomWord === undefined) {
            randomWord = wordset.randomWord();
        }
        randomWord = randomWord.replace(/ +/gm, " ");
        randomWord = randomWord.replace(/^ | $/gm, "");
        randomWord = applyLazyModeToWord(randomWord, language);
        randomWord = yield applyBritishEnglishToWord(randomWord);
        randomWord = applyFunboxesToWord(randomWord, wordset);
        if (config_1.default.punctuation) {
            randomWord = punctuateWord(TestWords.words.get(TestWords.words.length - 1), randomWord, TestWords.words.length, wordsBound);
        }
        if (config_1.default.numbers) {
            if (Math.random() < 0.1) {
                randomWord = Misc.getNumbers(4);
            }
        }
        return randomWord;
    });
}
let rememberLazyMode;
function init() {
    return __awaiter(this, void 0, void 0, function* () {
        TestActive.set(false);
        MonkeyPower.reset();
        Replay.stopReplayRecording();
        TestWords.words.reset();
        TestUI.setCurrentWordElementIndex(0);
        // accuracy = {
        //   correct: 0,
        //   incorrect: 0,
        // };
        TestInput.input.resetHistory();
        TestInput.input.resetCurrent();
        if (ActivePage.get() == "test") {
            yield Funbox.activate();
        }
        let language = yield Misc.getLanguage(config_1.default.language);
        if (language && language.name !== config_1.default.language) {
            UpdateConfig.setLanguage("english");
        }
        if (!language) {
            UpdateConfig.setLanguage("english");
            language = yield Misc.getLanguage(config_1.default.language);
        }
        if (config_1.default.lazyMode === true && language.noLazyMode) {
            rememberLazyMode = true;
            Notifications.add("This language does not support lazy mode.", 0);
            UpdateConfig.setLazyMode(false, true);
        }
        else if (rememberLazyMode === true && !language.noLazyMode) {
            UpdateConfig.setLazyMode(true, true);
        }
        if (config_1.default.lazyMode === false && !language.noLazyMode) {
            rememberLazyMode = false;
        }
        let wordsBound = 100;
        if (config_1.default.showAllLines) {
            if (config_1.default.mode === "quote") {
                wordsBound = 100;
            }
            else if (config_1.default.mode === "custom") {
                if (CustomText.isWordRandom) {
                    wordsBound = CustomText.word;
                }
                else if (CustomText.isTimeRandom) {
                    wordsBound = 100;
                }
                else {
                    wordsBound = CustomText.text.length;
                }
            }
            else if (config_1.default.mode != "time") {
                wordsBound = config_1.default.words;
            }
        }
        else {
            if (config_1.default.mode === "words" && config_1.default.words < wordsBound) {
                wordsBound = config_1.default.words;
            }
            if (config_1.default.mode == "custom" &&
                CustomText.isWordRandom &&
                CustomText.word < wordsBound) {
                wordsBound = CustomText.word;
            }
            if (config_1.default.mode == "custom" && CustomText.isTimeRandom) {
                wordsBound = 100;
            }
            if (config_1.default.mode == "custom" &&
                !CustomText.isWordRandom &&
                !CustomText.isTimeRandom &&
                CustomText.text.length < wordsBound) {
                wordsBound = CustomText.text.length;
            }
        }
        if ((config_1.default.mode === "custom" &&
            CustomText.isWordRandom &&
            CustomText.word == 0) ||
            (config_1.default.mode === "custom" &&
                CustomText.isTimeRandom &&
                CustomText.time == 0)) {
            wordsBound = 100;
        }
        if (config_1.default.mode === "words" && config_1.default.words === 0) {
            wordsBound = 100;
        }
        if (config_1.default.funbox === "plus_one") {
            wordsBound = 2;
            if (config_1.default.mode === "words" && config_1.default.words < wordsBound) {
                wordsBound = config_1.default.words;
            }
        }
        if (config_1.default.funbox === "plus_two") {
            wordsBound = 3;
            if (config_1.default.mode === "words" && config_1.default.words < wordsBound) {
                wordsBound = config_1.default.words;
            }
        }
        if (config_1.default.mode == "time" ||
            config_1.default.mode == "words" ||
            config_1.default.mode == "custom") {
            let wordList = language.words;
            if (config_1.default.mode == "custom") {
                wordList = CustomText.text;
            }
            const wordset = Wordset.withWords(wordList, config_1.default.funbox);
            if ((config_1.default.funbox == "wikipedia" || config_1.default.funbox == "poetry") &&
                config_1.default.mode != "custom") {
                let wordCount = 0;
                // If mode is words, get as many sections as you need until the wordCount is fullfilled
                while ((config_1.default.mode == "words" && config_1.default.words >= wordCount) ||
                    (config_1.default.mode === "time" && wordCount < 100)) {
                    const section = config_1.default.funbox == "wikipedia"
                        ? yield Wikipedia.getSection(config_1.default.language)
                        : yield Poetry.getPoem();
                    if (section === undefined)
                        continue;
                    for (const word of section.words) {
                        if (wordCount >= config_1.default.words && config_1.default.mode == "words") {
                            wordCount++;
                            break;
                        }
                        wordCount++;
                        TestWords.words.push(word);
                    }
                }
            }
            else {
                for (let i = 0; i < wordsBound; i++) {
                    const randomWord = yield getNextWord(wordset, language, wordsBound);
                    if (/\t/g.test(randomWord)) {
                        TestWords.setHasTab(true);
                    }
                    if (/ +/.test(randomWord)) {
                        const randomList = randomWord.split(" ");
                        let id = 0;
                        while (id < randomList.length) {
                            TestWords.words.push(randomList[id]);
                            id++;
                            if (TestWords.words.length == wordsBound &&
                                config_1.default.mode == "custom" &&
                                CustomText.isWordRandom) {
                                break;
                            }
                        }
                        if (config_1.default.mode == "custom" &&
                            !CustomText.isWordRandom &&
                            !CustomText.isTimeRandom) {
                            //
                        }
                        else {
                            i = TestWords.words.length - 1;
                        }
                    }
                    else {
                        TestWords.words.push(randomWord);
                    }
                }
            }
        }
        else if (config_1.default.mode === "quote") {
            const quotesCollection = yield quotes_controller_1.default.getQuotes(config_1.default.language, config_1.default.quoteLength);
            if (quotesCollection.length === 0) {
                TestUI.setTestRestarting(false);
                Notifications.add(`No ${config_1.default.language.replace(/_\d*k$/g, "")} quotes found`, 0);
                if (firebase_1.Auth.currentUser) {
                    QuoteSubmitPopup.show(false);
                }
                UpdateConfig.setMode("words");
                restart();
                return;
            }
            let rq = undefined;
            if (config_1.default.quoteLength.includes(-2) && config_1.default.quoteLength.length == 1) {
                const targetQuote = quotes_controller_1.default.getQuoteById(QuoteSearchPopup.selectedId);
                if (targetQuote === undefined) {
                    rq = quotesCollection.groups[0][0];
                    Notifications.add("Quote Id Does Not Exist", 0);
                }
                else {
                    rq = targetQuote;
                }
            }
            else {
                const randomQuote = quotes_controller_1.default.getRandomQuote();
                if (randomQuote === null) {
                    Notifications.add("No quotes found for selected quote length", 0);
                    TestUI.setTestRestarting(false);
                    return;
                }
                rq = randomQuote;
            }
            if (rq === undefined)
                return;
            rq.text = rq.text.replace(/ +/gm, " ");
            rq.text = rq.text.replace(/\\\\t/gm, "\t");
            rq.text = rq.text.replace(/\\\\n/gm, "\n");
            rq.text = rq.text.replace(/\\t/gm, "\t");
            rq.text = rq.text.replace(/\\n/gm, "\n");
            rq.text = rq.text.replace(/( *(\r\n|\r|\n) *)/g, "\n ");
            rq.text = rq.text.replace(/…/g, "...");
            rq.text = rq.text.trim();
            rq.textSplit = rq.text.split(" ");
            rq.language = config_1.default.language.replace(/_\d*k$/g, "");
            TestWords.setRandomQuote(rq);
            const w = TestWords.randomQuote.textSplit;
            if (w === undefined)
                return;
            if (config_1.default.showAllLines) {
                wordsBound = w.length;
            }
            else {
                wordsBound = Math.min(wordsBound, w.length);
            }
            for (let i = 0; i < wordsBound; i++) {
                if (/\t/g.test(w[i])) {
                    TestWords.setHasTab(true);
                }
                w[i] = applyLazyModeToWord(w[i], language);
                w[i] = yield applyBritishEnglishToWord(w[i]);
                w[i] = applyFunboxesToWord(w[i]);
                TestWords.words.push(w[i]);
            }
        }
        //handle right-to-left languages
        if (language.leftToRight) {
            TestUI.arrangeCharactersLeftToRight();
        }
        else {
            TestUI.arrangeCharactersRightToLeft();
        }
        if (language.ligatures) {
            $("#words").addClass("withLigatures");
            $("#resultWordsHistory .words").addClass("withLigatures");
            $("#resultReplay .words").addClass("withLigatures");
        }
        else {
            $("#words").removeClass("withLigatures");
            $("#resultWordsHistory .words").removeClass("withLigatures");
            $("#resultReplay .words").removeClass("withLigatures");
        }
        // if (Config.mode == "zen") {
        //   // Creating an empty active word element for zen mode
        //   $("#words").append('<div class="word active"></div>');
        //   $("#words").css("height", "auto");
        //   $("#wordsWrapper").css("height", "auto");
        // } else {
        TestUI.showWords();
        if (config_1.default.keymapMode === "next" && config_1.default.mode !== "zen") {
            Keymap.highlightKey(TestWords.words
                .getCurrent()
                .substring(TestInput.input.current.length, TestInput.input.current.length + 1)
                .toString()
                .toUpperCase());
        }
        Funbox.toggleScript(TestWords.words.getCurrent());
        // }
    });
}
exports.init = init;
function addWord() {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        let bound = 100;
        if (config_1.default.funbox === "plus_one")
            bound = 1;
        if (config_1.default.funbox === "plus_two")
            bound = 2;
        if (TestWords.words.length - TestInput.input.history.length > bound ||
            (config_1.default.mode === "words" &&
                TestWords.words.length >= config_1.default.words &&
                config_1.default.words > 0) ||
            (config_1.default.mode === "custom" &&
                CustomText.isWordRandom &&
                TestWords.words.length >= CustomText.word &&
                CustomText.word != 0) ||
            (config_1.default.mode === "custom" &&
                !CustomText.isWordRandom &&
                !CustomText.isTimeRandom &&
                TestWords.words.length >= CustomText.text.length) ||
            (config_1.default.mode === "quote" &&
                TestWords.words.length >= ((_b = (_a = TestWords.randomQuote.textSplit) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0))) {
            return;
        }
        if (config_1.default.funbox === "wikipedia" || config_1.default.funbox == "poetry") {
            if (TestWords.words.length - TestWords.words.currentIndex < 20) {
                const section = config_1.default.funbox == "wikipedia"
                    ? yield Wikipedia.getSection(config_1.default.language)
                    : yield Poetry.getPoem();
                if (section === undefined)
                    return;
                let wordCount = 0;
                for (const word of section.words) {
                    if (wordCount >= config_1.default.words && config_1.default.mode == "words") {
                        break;
                    }
                    wordCount++;
                    TestWords.words.push(word);
                    TestUI.addWord(word);
                }
            }
            else {
                return;
            }
        }
        const language = config_1.default.mode !== "custom"
            ? yield Misc.getCurrentLanguage(config_1.default.language)
            : Object.assign(Object.assign({}, (yield Misc.getCurrentLanguage(config_1.default.language))), { words: CustomText.text });
        const wordset = Wordset.withWords(language.words, config_1.default.funbox);
        const randomWord = yield getNextWord(wordset, language, bound);
        const split = randomWord.split(" ");
        if (split.length > 1) {
            split.forEach((word) => {
                TestWords.words.push(word);
                TestUI.addWord(word);
            });
        }
        else {
            TestWords.words.push(randomWord);
            TestUI.addWord(randomWord);
        }
    });
}
exports.addWord = addWord;
const retrySaving = {
    completedEvent: null,
    canRetry: false,
};
function retrySavingResult() {
    return __awaiter(this, void 0, void 0, function* () {
        const { completedEvent } = retrySaving;
        if (completedEvent === null) {
            Notifications.add("Could not retry saving the result as the result no longer exists.", 0, -1);
            return;
        }
        if (!retrySaving.canRetry) {
            return;
        }
        retrySaving.canRetry = false;
        $("#retrySavingResultButton").addClass("hidden");
        AccountButton.loading(true);
        Notifications.add("Retrying to save...");
        const response = yield ape_1.default.results.save(completedEvent);
        AccountButton.loading(false);
        Result.hideCrown();
        if (response.status !== 200) {
            retrySaving.canRetry = true;
            $("#retrySavingResultButton").removeClass("hidden");
            return Notifications.add("Result not saved. " + response.message, -1);
        }
        completedEvent._id = response.data.insertedId;
        if (response.data.isPb) {
            completedEvent.isPb = true;
        }
        DB.saveLocalResult(completedEvent);
        DB.updateLocalStats({
            time: completedEvent.testDuration +
                completedEvent.incompleteTestSeconds -
                completedEvent.afkDuration,
            started: TestStats.restartCount + 1,
        });
        AnalyticsController.log("testCompleted");
        if (response.data.isPb) {
            //new pb
            Result.showCrown();
            Result.updateCrown();
            DB.saveLocalPB(config_1.default.mode, completedEvent.mode2, config_1.default.punctuation, config_1.default.language, config_1.default.difficulty, config_1.default.lazyMode, completedEvent.wpm, completedEvent.acc, completedEvent.rawWpm, completedEvent.consistency);
        }
        $("#retrySavingResultButton").addClass("hidden");
        Notifications.add("Result saved", 1);
    });
}
exports.retrySavingResult = retrySavingResult;
function buildCompletedEvent(difficultyFailed) {
    var _a, _b, _c;
    //build completed event object
    const completedEvent = {
        wpm: undefined,
        rawWpm: undefined,
        charStats: undefined,
        acc: undefined,
        mode: config_1.default.mode,
        mode2: undefined,
        quoteLength: -1,
        punctuation: config_1.default.punctuation,
        numbers: config_1.default.numbers,
        lazyMode: config_1.default.lazyMode,
        timestamp: Date.now(),
        language: config_1.default.language,
        restartCount: TestStats.restartCount,
        incompleteTestSeconds: TestStats.incompleteSeconds < 0
            ? 0
            : Misc.roundTo2(TestStats.incompleteSeconds),
        difficulty: config_1.default.difficulty,
        blindMode: config_1.default.blindMode,
        tags: undefined,
        keySpacing: TestInput.keypressTimings.spacing.array,
        keyDuration: TestInput.keypressTimings.duration.array,
        consistency: undefined,
        keyConsistency: undefined,
        funbox: config_1.default.funbox,
        bailedOut: TestInput.bailout,
        chartData: {
            wpm: TestInput.wpmHistory,
            raw: undefined,
            err: undefined,
        },
        customText: undefined,
        testDuration: undefined,
        afkDuration: undefined,
    };
    // stats
    const stats = TestStats.calculateStats();
    if (stats.time % 1 != 0 && config_1.default.mode !== "time") {
        TestStats.setLastSecondNotRound();
    }
    TestStats.setLastTestWpm(stats.wpm);
    completedEvent.wpm = stats.wpm;
    completedEvent.rawWpm = stats.wpmRaw;
    completedEvent.charStats = [
        stats.correctChars + stats.correctSpaces,
        stats.incorrectChars,
        stats.extraChars,
        stats.missedChars,
    ];
    completedEvent.acc = stats.acc;
    // if the last second was not rounded, add another data point to the history
    if (TestStats.lastSecondNotRound && !difficultyFailed) {
        const wpmAndRaw = TestStats.calculateWpmAndRaw();
        TestInput.pushToWpmHistory(wpmAndRaw.wpm);
        TestInput.pushToRawHistory(wpmAndRaw.raw);
        TestInput.pushKeypressesToHistory();
    }
    //consistency
    const rawPerSecond = TestInput.keypressPerSecond.map((f) => Math.round((f.count / 5) * 60));
    const stddev = Misc.stdDev(rawPerSecond);
    const avg = Misc.mean(rawPerSecond);
    let consistency = Misc.roundTo2(Misc.kogasa(stddev / avg));
    let keyConsistencyArray = TestInput.keypressTimings.spacing.array === "toolong"
        ? []
        : TestInput.keypressTimings.spacing.array.slice();
    if (keyConsistencyArray.length > 0) {
        keyConsistencyArray = keyConsistencyArray.slice(0, keyConsistencyArray.length - 1);
    }
    let keyConsistency = Misc.roundTo2(Misc.kogasa(Misc.stdDev(keyConsistencyArray) / Misc.mean(keyConsistencyArray)));
    if (!consistency || isNaN(consistency)) {
        consistency = 0;
    }
    if (!keyConsistency || isNaN(keyConsistency)) {
        keyConsistency = 0;
    }
    completedEvent.keyConsistency = keyConsistency;
    completedEvent.consistency = consistency;
    const smoothedraw = Misc.smooth(rawPerSecond, 1);
    completedEvent.chartData.raw = smoothedraw;
    completedEvent.chartData.unsmoothedRaw = rawPerSecond;
    //smoothed consistency
    const stddev2 = Misc.stdDev(smoothedraw);
    const avg2 = Misc.mean(smoothedraw);
    const smoothConsistency = Misc.roundTo2(Misc.kogasa(stddev2 / avg2));
    completedEvent.smoothConsistency = smoothConsistency;
    //wpm consistency
    const stddev3 = Misc.stdDev((_a = completedEvent.chartData.wpm) !== null && _a !== void 0 ? _a : []);
    const avg3 = Misc.mean((_b = completedEvent.chartData.wpm) !== null && _b !== void 0 ? _b : []);
    const wpmConsistency = Misc.roundTo2(Misc.kogasa(stddev3 / avg3));
    completedEvent.wpmConsistency = wpmConsistency;
    completedEvent.testDuration = parseFloat(stats.time.toString());
    completedEvent.afkDuration = TestStats.calculateAfkSeconds(completedEvent.testDuration);
    completedEvent.chartData.err = [];
    for (let i = 0; i < TestInput.keypressPerSecond.length; i++) {
        completedEvent.chartData.err.push(TestInput.keypressPerSecond[i].errors);
    }
    if (config_1.default.mode === "quote") {
        completedEvent.quoteLength = TestWords.randomQuote.group;
        completedEvent.lang = config_1.default.language.replace(/_\d*k$/g, "");
    }
    // @ts-ignore TODO fix this
    completedEvent.mode2 = Misc.getMode2(config_1.default, TestWords.randomQuote);
    if (config_1.default.mode === "custom") {
        completedEvent.customText = {};
        completedEvent.customText.textLen = CustomText.text.length;
        completedEvent.customText.isWordRandom = CustomText.isWordRandom;
        completedEvent.customText.isTimeRandom = CustomText.isTimeRandom;
        completedEvent.customText.word = CustomText.word;
        completedEvent.customText.time = CustomText.time;
    }
    else {
        delete completedEvent.customText;
    }
    //tags
    const activeTagsIds = [];
    try {
        (_c = DB.getSnapshot().tags) === null || _c === void 0 ? void 0 : _c.forEach((tag) => {
            if (tag.active === true) {
                activeTagsIds.push(tag._id);
            }
        });
    }
    catch (e) { }
    completedEvent.tags = activeTagsIds;
    if (completedEvent.mode != "custom")
        delete completedEvent.customText;
    return completedEvent;
}
function finish(difficultyFailed = false) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        if (!TestActive.get())
            return;
        if (config_1.default.mode == "zen" && TestInput.input.current.length != 0) {
            TestInput.input.pushHistory();
            TestInput.corrected.pushHistory();
            Replay.replayGetWordsList(TestInput.input.history);
        }
        TestInput.recordKeypressSpacing(); //this is needed in case there is afk time at the end - to make sure test duration makes sense
        TestUI.setResultCalculating(true);
        TestUI.setResultVisible(true);
        TestStats.setEnd(performance.now());
        TestActive.set(false);
        Replay.stopReplayRecording();
        Focus.set(false);
        Caret.hide();
        LiveWpm.hide();
        PbCrown.hide();
        LiveAcc.hide();
        LiveBurst.hide();
        TimerProgress.hide();
        OutOfFocus.hide();
        TestTimer.clear();
        Funbox.clear();
        Monkey.hide();
        //need one more calculation for the last word if test auto ended
        if (TestInput.burstHistory.length !== TestInput.input.getHistory().length) {
            const burst = TestStats.calculateBurst();
            TestInput.pushBurstToHistory(burst);
        }
        //remove afk from zen
        if (config_1.default.mode == "zen" || TestInput.bailout) {
            TestStats.removeAfkData();
        }
        const completedEvent = buildCompletedEvent(difficultyFailed);
        //todo check if any fields are undefined
        ///////// completed event ready
        //afk check
        const kps = TestInput.keypressPerSecond.slice(-5);
        let afkDetected = kps.every((second) => second.afk);
        if (TestInput.bailout)
            afkDetected = false;
        let tooShort = false;
        let dontSave = false;
        //fail checks
        if (difficultyFailed) {
            Notifications.add(`Test failed - ${failReason}`, 0, 1);
            dontSave = true;
        }
        else if (afkDetected) {
            Notifications.add("Test invalid - AFK detected", 0);
            dontSave = true;
        }
        else if (TestState.isRepeated) {
            Notifications.add("Test invalid - repeated", 0);
            dontSave = true;
        }
        else if ((config_1.default.mode === "time" &&
            completedEvent.mode2 < 15 &&
            completedEvent.mode2 > 0) ||
            (config_1.default.mode === "time" &&
                completedEvent.mode2 == 0 &&
                completedEvent.testDuration < 15) ||
            (config_1.default.mode === "words" &&
                completedEvent.mode2 < 10 &&
                completedEvent.mode2 > 0) ||
            (config_1.default.mode === "words" &&
                completedEvent.mode2 == 0 &&
                completedEvent.testDuration < 15) ||
            (config_1.default.mode === "custom" &&
                !CustomText.isWordRandom &&
                !CustomText.isTimeRandom &&
                CustomText.text.length < 10) ||
            (config_1.default.mode === "custom" &&
                CustomText.isWordRandom &&
                !CustomText.isTimeRandom &&
                CustomText.word < 10) ||
            (config_1.default.mode === "custom" &&
                !CustomText.isWordRandom &&
                CustomText.isTimeRandom &&
                CustomText.time < 15) ||
            (config_1.default.mode === "zen" && completedEvent.testDuration < 15)) {
            Notifications.add("Test invalid - too short", 0);
            tooShort = true;
            dontSave = true;
        }
        else if (completedEvent.wpm < 0 || completedEvent.wpm > 350) {
            Notifications.add("Test invalid - wpm", 0);
            TestStats.setInvalid();
            dontSave = true;
        }
        else if (completedEvent.acc < 75 || completedEvent.acc > 100) {
            Notifications.add("Test invalid - accuracy", 0);
            TestStats.setInvalid();
            dontSave = true;
        }
        // test is valid
        if (!dontSave) {
            TodayTracker.addSeconds(completedEvent.testDuration +
                (TestStats.incompleteSeconds < 0
                    ? 0
                    : Misc.roundTo2(TestStats.incompleteSeconds)) -
                completedEvent.afkDuration);
            Result.updateTodayTracker();
        }
        if (firebase_1.Auth.currentUser == null) {
            $(".pageTest #result #rateQuoteButton").addClass("hidden");
            $(".pageTest #result #reportQuoteButton").addClass("hidden");
            AnalyticsController.log("testCompletedNoLogin");
            if (!dontSave)
                exports.notSignedInLastResult = completedEvent;
            dontSave = true;
        }
        else {
            $(".pageTest #result #reportQuoteButton").removeClass("hidden");
        }
        yield Result.update(completedEvent, difficultyFailed, failReason, afkDetected, TestState.isRepeated, tooShort, TestWords.randomQuote, dontSave);
        if (completedEvent.chartData !== "toolong") {
            delete completedEvent.chartData.unsmoothedRaw;
        }
        if (completedEvent.testDuration > 122) {
            completedEvent.chartData = "toolong";
            completedEvent.keySpacing = "toolong";
            completedEvent.keyDuration = "toolong";
            TestInput.setKeypressTimingsTooLong();
        }
        if (dontSave) {
            AnalyticsController.log("testCompletedInvalid");
            return;
        }
        // user is logged in
        if (config_1.default.difficulty == "normal" ||
            ((config_1.default.difficulty == "master" || config_1.default.difficulty == "expert") &&
                !difficultyFailed)) {
            TestStats.resetIncomplete();
        }
        completedEvent.uid = (_a = firebase_1.Auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid;
        Result.updateRateQuote(TestWords.randomQuote);
        AccountButton.loading(true);
        completedEvent.challenge = ChallengeContoller.verify(completedEvent);
        if (completedEvent.challenge === null)
            completedEvent === null || completedEvent === void 0 ? true : delete completedEvent.challenge;
        completedEvent.hash = (0, object_hash_1.default)(completedEvent);
        const response = yield ape_1.default.results.save(completedEvent);
        AccountButton.loading(false);
        if (response.status !== 200) {
            console.log("Error saving result", completedEvent);
            $("#retrySavingResultButton").removeClass("hidden");
            if (response.message === "Incorrect result hash") {
                console.log(completedEvent);
            }
            retrySaving.completedEvent = completedEvent;
            retrySaving.canRetry = true;
            return Notifications.add("Failed to save result: " + response.message, -1);
        }
        Result.hideCrown();
        completedEvent._id = response.data.insertedId;
        if (response.data.isPb) {
            completedEvent.isPb = true;
        }
        DB.saveLocalResult(completedEvent);
        DB.updateLocalStats({
            time: completedEvent.testDuration +
                completedEvent.incompleteTestSeconds -
                completedEvent.afkDuration,
            started: TestStats.restartCount + 1,
        });
        AnalyticsController.log("testCompleted");
        if (response.data.isPb) {
            //new pb
            Result.showCrown();
            Result.updateCrown();
            DB.saveLocalPB(config_1.default.mode, completedEvent.mode2, config_1.default.punctuation, config_1.default.language, config_1.default.difficulty, config_1.default.lazyMode, completedEvent.wpm, completedEvent.acc, completedEvent.rawWpm, completedEvent.consistency);
        }
        $("#retrySavingResultButton").addClass("hidden");
    });
}
exports.finish = finish;
function fail(reason) {
    failReason = reason;
    // input.pushHistory();
    // corrected.pushHistory();
    TestInput.pushKeypressesToHistory();
    finish(true);
    const testSeconds = TestStats.calculateTestSeconds(performance.now());
    const afkseconds = TestStats.calculateAfkSeconds(testSeconds);
    let tt = testSeconds - afkseconds;
    if (tt < 0)
        tt = 0;
    TestStats.incrementIncompleteSeconds(tt);
    TestStats.incrementRestartCount();
}
exports.fail = fail;
$(document).on("click", "#testModesNotice .text-button.restart", () => {
    restart();
});
$(document).on("keypress", "#restartTestButton", (event) => {
    if (event.key === "Enter") {
        ManualRestart.reset();
        if (TestActive.get() &&
            config_1.default.repeatQuotes === "typing" &&
            config_1.default.mode === "quote") {
            restart(true);
        }
        else {
            restart();
        }
    }
});
$(document.body).on("click", "#restartTestButton", () => {
    ManualRestart.set();
    if (TestUI.resultCalculating)
        return;
    if (TestActive.get() &&
        config_1.default.repeatQuotes === "typing" &&
        config_1.default.mode === "quote") {
        restart(true);
    }
    else {
        restart();
    }
});
$(document.body).on("click", "#retrySavingResultButton", retrySavingResult);
$(document).on("keypress", "#nextTestButton", (event) => {
    if (event.key === "Enter") {
        restart();
    }
});
$(document.body).on("click", "#nextTestButton", () => {
    ManualRestart.set();
    restart();
});
$(document.body).on("click", "#restartTestButtonWithSameWordset", () => {
    if (config_1.default.mode == "zen") {
        Notifications.add("Repeat test disabled in zen mode");
        return;
    }
    ManualRestart.set();
    restart(true);
});
$(document).on("keypress", "#restartTestButtonWithSameWordset", (event) => {
    if (config_1.default.mode == "zen") {
        Notifications.add("Repeat test disabled in zen mode");
        return;
    }
    if (event.key === "Enter") {
        restart(true);
    }
});
$(document).on("click", "#top .config .wordCount .text-button", (e) => {
    var _a;
    const wrd = (_a = $(e.currentTarget).attr("wordCount")) !== null && _a !== void 0 ? _a : "15";
    if (wrd != "custom") {
        UpdateConfig.setWordCount(parseInt(wrd));
        ManualRestart.set();
        restart();
    }
});
$(document).on("click", "#top .config .time .text-button", (e) => {
    var _a;
    const mode = (_a = $(e.currentTarget).attr("timeConfig")) !== null && _a !== void 0 ? _a : "10";
    if (mode != "custom") {
        UpdateConfig.setTimeConfig(parseInt(mode));
        ManualRestart.set();
        restart();
    }
});
$(document).on("click", "#top .config .quoteLength .text-button", (e) => {
    var _a;
    let len = parseInt((_a = $(e.currentTarget).attr("quoteLength")) !== null && _a !== void 0 ? _a : "1");
    if (len != -2) {
        if (len == -1) {
            len = [0, 1, 2, 3];
        }
        UpdateConfig.setQuoteLength(len, false, e.shiftKey);
        ManualRestart.set();
        restart();
    }
});
$(document).on("click", "#top .config .punctuationMode .text-button", () => {
    UpdateConfig.setPunctuation(!config_1.default.punctuation);
    ManualRestart.set();
    restart();
});
$(document).on("click", "#top .config .numbersMode .text-button", () => {
    UpdateConfig.setNumbers(!config_1.default.numbers);
    ManualRestart.set();
    restart();
});
$(document).on("click", "#top .config .mode .text-button", (e) => {
    var _a;
    if ($(e.currentTarget).hasClass("active"))
        return;
    const mode = ((_a = $(e.currentTarget).attr("mode")) !== null && _a !== void 0 ? _a : "time");
    if (mode === undefined)
        return;
    UpdateConfig.setMode(mode);
    ManualRestart.set();
    restart();
});
$("#practiseWordsPopup .button.missed").on("click", () => {
    PractiseWords.hidePopup();
    PractiseWords.init(true, false);
    restart(false, false, undefined, true);
});
$("#practiseWordsPopup .button.slow").on("click", () => {
    PractiseWords.hidePopup();
    PractiseWords.init(false, true);
    restart(false, false, undefined, true);
});
$("#practiseWordsPopup .button.both").on("click", () => {
    PractiseWords.hidePopup();
    PractiseWords.init(true, true);
    restart(false, false, undefined, true);
});
$(document).on("click", "#quoteSearchPopup #quoteSearchResults .searchResult", (e) => {
    var _a;
    if (e.target.classList.contains("report")) {
        return;
    }
    const sid = parseInt((_a = $(e.currentTarget).attr("id")) !== null && _a !== void 0 ? _a : "");
    QuoteSearchPopup.setSelectedId(sid);
    if (QuoteSearchPopup.apply(sid) === true)
        restart();
});
$(document).on("click", "#top #menu #startTestButton, #top .logo", () => {
    if (ActivePage.get() === "test")
        restart();
});
// ===============================
ConfigEvent.subscribe((eventKey, eventValue, nosave) => {
    if (eventKey === "difficulty" && !nosave)
        restart(false, nosave);
    if (eventKey === "showAllLines" && !nosave)
        restart();
    if (eventKey === "keymapMode" && !nosave)
        restart(false, nosave);
    if (eventKey === "lazyMode" && eventValue === false && !nosave) {
        rememberLazyMode = false;
    }
});
TimerEvent.subscribe((eventKey, eventValue) => {
    if (eventKey === "fail" && eventValue !== undefined)
        fail(eventValue);
    if (eventKey === "finish")
        finish();
});
ResetRequestedEvent.subscribe(() => {
    restart();
});


/***/ }),

/***/ "./src/scripts/test/test-state.ts":
/*!****************************************!*\
  !*** ./src/scripts/test/test-state.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setActiveChallenge = exports.setPaceRepeat = exports.setRepeated = exports.activeChallenge = exports.isPaceRepeat = exports.isRepeated = void 0;
exports.isRepeated = false;
exports.isPaceRepeat = false;
exports.activeChallenge = null;
function setRepeated(tf) {
    exports.isRepeated = tf;
}
exports.setRepeated = setRepeated;
function setPaceRepeat(tf) {
    exports.isPaceRepeat = tf;
}
exports.setPaceRepeat = setPaceRepeat;
function setActiveChallenge(val) {
    exports.activeChallenge = val;
}
exports.setActiveChallenge = setActiveChallenge;


/***/ }),

/***/ "./src/scripts/test/test-stats.ts":
/*!****************************************!*\
  !*** ./src/scripts/test/test-stats.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.calculateStats = exports.removeAfkData = exports.calculateAccuracy = exports.calculateBurst = exports.setLastSecondNotRound = exports.calculateAfkSeconds = exports.setStart = exports.setEnd = exports.calculateWpmAndRaw = exports.calculateTestSeconds = exports.setInvalid = exports.resetIncomplete = exports.incrementIncompleteSeconds = exports.incrementRestartCount = exports.incompleteSeconds = exports.restartCount = exports.restart = exports.getStats = exports.setLastTestWpm = exports.lastTestWpm = exports.lastSecondNotRound = exports.end2 = exports.start2 = exports.end = exports.start = exports.invalid = void 0;
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const TestInput = __importStar(__webpack_require__(/*! ./test-input */ "./src/scripts/test/test-input.ts"));
const TestWords = __importStar(__webpack_require__(/*! ./test-words */ "./src/scripts/test/test-words.ts"));
exports.invalid = false;
exports.lastSecondNotRound = false;
exports.lastTestWpm = 0;
function setLastTestWpm(wpm) {
    exports.lastTestWpm = wpm;
}
exports.setLastTestWpm = setLastTestWpm;
function getStats() {
    const ret = {
        start: exports.start,
        end: exports.end,
        wpmHistory: TestInput.wpmHistory,
        rawHistory: TestInput.wpmHistory,
        burstHistory: TestInput.burstHistory,
        keypressPerSecond: TestInput.keypressPerSecond,
        currentKeypress: TestInput.currentKeypress,
        lastKeypress: TestInput.lastKeypress,
        currentBurstStart: TestInput.currentBurstStart,
        lastSecondNotRound: exports.lastSecondNotRound,
        missedWords: TestInput.missedWords,
        accuracy: TestInput.accuracy,
        keypressTimings: TestInput.keypressTimings,
    };
    try {
        ret.keySpacingStats = {
            average: TestInput.keypressTimings.spacing.array.reduce((previous, current) => (current += previous)) / TestInput.keypressTimings.spacing.array.length,
            sd: Misc.stdDev(TestInput.keypressTimings.spacing.array),
        };
    }
    catch (e) {
        //
    }
    try {
        ret.keyDurationStats = {
            average: TestInput.keypressTimings.duration.array.reduce((previous, current) => (current += previous)) / TestInput.keypressTimings.duration.array.length,
            sd: Misc.stdDev(TestInput.keypressTimings.duration.array),
        };
    }
    catch (e) {
        //
    }
    return ret;
}
exports.getStats = getStats;
function restart() {
    exports.start = 0;
    exports.end = 0;
    exports.invalid = false;
    exports.lastSecondNotRound = false;
}
exports.restart = restart;
exports.restartCount = 0;
exports.incompleteSeconds = 0;
function incrementRestartCount() {
    exports.restartCount++;
}
exports.incrementRestartCount = incrementRestartCount;
function incrementIncompleteSeconds(val) {
    exports.incompleteSeconds += val;
}
exports.incrementIncompleteSeconds = incrementIncompleteSeconds;
function resetIncomplete() {
    exports.restartCount = 0;
    exports.incompleteSeconds = 0;
}
exports.resetIncomplete = resetIncomplete;
function setInvalid() {
    exports.invalid = true;
}
exports.setInvalid = setInvalid;
function calculateTestSeconds(now) {
    if (now === undefined) {
        const endAfkSeconds = (exports.end - TestInput.lastKeypress) / 1000;
        if ((config_1.default.mode == "zen" || TestInput.bailout) && endAfkSeconds < 7) {
            return (TestInput.lastKeypress - exports.start) / 1000;
        }
        else {
            return (exports.end - exports.start) / 1000;
        }
    }
    else {
        return (now - exports.start) / 1000;
    }
}
exports.calculateTestSeconds = calculateTestSeconds;
function calculateWpmAndRaw() {
    let chars = 0;
    let correctWordChars = 0;
    let spaces = 0;
    //check input history
    for (let i = 0; i < TestInput.input.history.length; i++) {
        const word = config_1.default.mode == "zen"
            ? TestInput.input.getHistory(i)
            : TestWords.words.get(i);
        if (TestInput.input.getHistory(i) == word) {
            //the word is correct
            //+1 for space
            correctWordChars += word.length;
            if (i < TestInput.input.history.length - 1 &&
                Misc.getLastChar(TestInput.input.getHistory(i)) !== "\n") {
                spaces++;
            }
        }
        chars += TestInput.input.getHistory(i).length;
    }
    if (TestInput.input.current !== "") {
        const word = config_1.default.mode == "zen"
            ? TestInput.input.current
            : TestWords.words.getCurrent();
        //check whats currently typed
        const toAdd = {
            correct: 0,
            incorrect: 0,
            missed: 0,
        };
        for (let c = 0; c < word.length; c++) {
            if (c < TestInput.input.current.length) {
                //on char that still has a word list pair
                if (TestInput.input.current[c] == word[c]) {
                    toAdd.correct++;
                }
                else {
                    toAdd.incorrect++;
                }
            }
            else {
                //on char that is extra
                toAdd.missed++;
            }
        }
        chars += toAdd.correct;
        chars += toAdd.incorrect;
        chars += toAdd.missed;
        if (toAdd.incorrect == 0) {
            //word is correct so far, add chars
            correctWordChars += toAdd.correct;
        }
    }
    if (config_1.default.funbox === "nospace" || config_1.default.funbox === "arrows") {
        spaces = 0;
    }
    chars += TestInput.input.current.length;
    const testSeconds = calculateTestSeconds(performance.now());
    const wpm = Math.round(((correctWordChars + spaces) * (60 / testSeconds)) / 5);
    const raw = Math.round(((chars + spaces) * (60 / testSeconds)) / 5);
    return {
        wpm: wpm,
        raw: raw,
    };
}
exports.calculateWpmAndRaw = calculateWpmAndRaw;
function setEnd(e) {
    exports.end = e;
    exports.end2 = Date.now();
}
exports.setEnd = setEnd;
function setStart(s) {
    exports.start = s;
    exports.start2 = Date.now();
}
exports.setStart = setStart;
function calculateAfkSeconds(testSeconds) {
    let extraAfk = 0;
    if (testSeconds !== undefined) {
        if (config_1.default.mode === "time") {
            extraAfk = Math.round(testSeconds) - TestInput.keypressPerSecond.length;
        }
        else {
            extraAfk = Math.ceil(testSeconds) - TestInput.keypressPerSecond.length;
        }
        if (extraAfk < 0)
            extraAfk = 0;
        // console.log("-- extra afk debug");
        // console.log("should be " + Math.ceil(testSeconds));
        // console.log(keypressPerSecond.length);
        // console.log(
        //   `gonna add extra ${extraAfk} seconds of afk because of no keypress data`
        // );
    }
    const ret = TestInput.keypressPerSecond.filter((x) => x.afk).length;
    return ret + extraAfk;
}
exports.calculateAfkSeconds = calculateAfkSeconds;
function setLastSecondNotRound() {
    exports.lastSecondNotRound = true;
}
exports.setLastSecondNotRound = setLastSecondNotRound;
function calculateBurst() {
    const timeToWrite = (performance.now() - TestInput.currentBurstStart) / 1000;
    let wordLength;
    wordLength = TestInput.input.current.length;
    if (wordLength == 0) {
        wordLength = TestInput.input.getHistoryLast().length;
    }
    const speed = Misc.roundTo2((wordLength * (60 / timeToWrite)) / 5);
    return Math.round(speed);
}
exports.calculateBurst = calculateBurst;
function calculateAccuracy() {
    const acc = (TestInput.accuracy.correct /
        (TestInput.accuracy.correct + TestInput.accuracy.incorrect)) *
        100;
    return isNaN(acc) ? 100 : acc;
}
exports.calculateAccuracy = calculateAccuracy;
function removeAfkData() {
    const testSeconds = calculateTestSeconds();
    TestInput.keypressPerSecond.splice(testSeconds);
    TestInput.keypressTimings.duration.array.splice(testSeconds);
    TestInput.keypressTimings.spacing.array.splice(testSeconds);
    TestInput.wpmHistory.splice(testSeconds);
}
exports.removeAfkData = removeAfkData;
function countChars() {
    let correctWordChars = 0;
    let correctChars = 0;
    let incorrectChars = 0;
    let extraChars = 0;
    let missedChars = 0;
    let spaces = 0;
    let correctspaces = 0;
    for (let i = 0; i < TestInput.input.history.length; i++) {
        const word = config_1.default.mode == "zen"
            ? TestInput.input.getHistory(i)
            : TestWords.words.get(i);
        if (TestInput.input.getHistory(i) === "") {
            //last word that was not started
            continue;
        }
        if (TestInput.input.getHistory(i) == word) {
            //the word is correct
            correctWordChars += word.length;
            correctChars += word.length;
            if (i < TestInput.input.history.length - 1 &&
                Misc.getLastChar(TestInput.input.getHistory(i)) !== "\n") {
                correctspaces++;
            }
        }
        else if (TestInput.input.getHistory(i).length >= word.length) {
            //too many chars
            for (let c = 0; c < TestInput.input.getHistory(i).length; c++) {
                if (c < word.length) {
                    //on char that still has a word list pair
                    if (TestInput.input.getHistory(i)[c] == word[c]) {
                        correctChars++;
                    }
                    else {
                        incorrectChars++;
                    }
                }
                else {
                    //on char that is extra
                    extraChars++;
                }
            }
        }
        else {
            //not enough chars
            const toAdd = {
                correct: 0,
                incorrect: 0,
                missed: 0,
            };
            for (let c = 0; c < word.length; c++) {
                if (c < TestInput.input.getHistory(i).length) {
                    //on char that still has a word list pair
                    if (TestInput.input.getHistory(i)[c] == word[c]) {
                        toAdd.correct++;
                    }
                    else {
                        toAdd.incorrect++;
                    }
                }
                else {
                    //on char that is extra
                    toAdd.missed++;
                }
            }
            correctChars += toAdd.correct;
            incorrectChars += toAdd.incorrect;
            if (i === TestInput.input.history.length - 1 && config_1.default.mode == "time") {
                //last word - check if it was all correct - add to correct word chars
                if (toAdd.incorrect === 0)
                    correctWordChars += toAdd.correct;
            }
            else {
                missedChars += toAdd.missed;
            }
        }
        if (i < TestInput.input.history.length - 1) {
            spaces++;
        }
    }
    if (config_1.default.funbox === "nospace" || config_1.default.funbox === "arrows") {
        spaces = 0;
        correctspaces = 0;
    }
    return {
        spaces: spaces,
        correctWordChars: correctWordChars,
        allCorrectChars: correctChars,
        incorrectChars: config_1.default.mode == "zen" ? TestInput.accuracy.incorrect : incorrectChars,
        extraChars: extraChars,
        missedChars: missedChars,
        correctSpaces: correctspaces,
    };
}
function calculateStats() {
    let testSeconds = calculateTestSeconds();
    // console.log((end2 - start2) / 1000);
    // console.log(testSeconds);
    if (config_1.default.mode != "custom") {
        testSeconds = Misc.roundTo2(testSeconds);
    }
    const chars = countChars();
    const wpm = Misc.roundTo2(((chars.correctWordChars + chars.correctSpaces) * (60 / testSeconds)) / 5);
    const wpmraw = Misc.roundTo2(((chars.allCorrectChars +
        chars.spaces +
        chars.incorrectChars +
        chars.extraChars) *
        (60 / testSeconds)) /
        5);
    const acc = Misc.roundTo2(calculateAccuracy());
    return {
        wpm: isNaN(wpm) ? 0 : wpm,
        wpmRaw: isNaN(wpmraw) ? 0 : wpmraw,
        acc: acc,
        correctChars: chars.correctWordChars,
        incorrectChars: chars.incorrectChars,
        missedChars: chars.missedChars,
        extraChars: chars.extraChars,
        allChars: chars.allCorrectChars +
            chars.spaces +
            chars.incorrectChars +
            chars.extraChars,
        time: Misc.roundTo2(testSeconds),
        spaces: chars.spaces,
        correctSpaces: chars.correctSpaces,
    };
}
exports.calculateStats = calculateStats;


/***/ }),

/***/ "./src/scripts/test/test-timer.ts":
/*!****************************************!*\
  !*** ./src/scripts/test/test-timer.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


//most of the code is thanks to
//https://stackoverflow.com/questions/29971898/how-to-create-an-accurate-timer-in-javascript
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.start = exports.getTimerStats = exports.clear = exports.enableTimerDebug = void 0;
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const CustomText = __importStar(__webpack_require__(/*! ./custom-text */ "./src/scripts/test/custom-text.ts"));
const TimerProgress = __importStar(__webpack_require__(/*! ./timer-progress */ "./src/scripts/test/timer-progress.ts"));
const LiveWpm = __importStar(__webpack_require__(/*! ./live-wpm */ "./src/scripts/test/live-wpm.ts"));
const TestStats = __importStar(__webpack_require__(/*! ./test-stats */ "./src/scripts/test/test-stats.ts"));
const TestInput = __importStar(__webpack_require__(/*! ./test-input */ "./src/scripts/test/test-input.ts"));
const TestWords = __importStar(__webpack_require__(/*! ./test-words */ "./src/scripts/test/test-words.ts"));
const Monkey = __importStar(__webpack_require__(/*! ./monkey */ "./src/scripts/test/monkey.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const Caret = __importStar(__webpack_require__(/*! ./caret */ "./src/scripts/test/caret.ts"));
const SlowTimer = __importStar(__webpack_require__(/*! ../states/slow-timer */ "./src/scripts/states/slow-timer.ts"));
const TestActive = __importStar(__webpack_require__(/*! ../states/test-active */ "./src/scripts/states/test-active.ts"));
const Time = __importStar(__webpack_require__(/*! ../states/time */ "./src/scripts/states/time.ts"));
const TimerEvent = __importStar(__webpack_require__(/*! ../observables/timer-event */ "./src/scripts/observables/timer-event.ts"));
let slowTimerCount = 0;
let timer = null;
const interval = 1000;
let expected = 0;
let timerDebug = false;
function enableTimerDebug() {
    timerDebug = true;
}
exports.enableTimerDebug = enableTimerDebug;
function clear() {
    Time.set(0);
    if (timer !== null)
        clearTimeout(timer);
}
exports.clear = clear;
function premid() {
    if (timerDebug)
        console.time("premid");
    const premidSecondsLeft = document.querySelector("#premidSecondsLeft");
    if (premidSecondsLeft !== null) {
        premidSecondsLeft.innerHTML = (config_1.default.time - Time.get()).toString();
    }
    if (timerDebug)
        console.timeEnd("premid");
}
function updateTimer() {
    if (timerDebug)
        console.time("timer progress update");
    if (config_1.default.mode === "time" ||
        (config_1.default.mode === "custom" && CustomText.isTimeRandom)) {
        TimerProgress.update();
    }
    if (timerDebug)
        console.timeEnd("timer progress update");
}
function calculateWpmRaw() {
    if (timerDebug)
        console.time("calculate wpm and raw");
    const wpmAndRaw = TestStats.calculateWpmAndRaw();
    if (timerDebug)
        console.timeEnd("calculate wpm and raw");
    if (timerDebug)
        console.time("update live wpm");
    LiveWpm.update(wpmAndRaw.wpm, wpmAndRaw.raw);
    if (timerDebug)
        console.timeEnd("update live wpm");
    if (timerDebug)
        console.time("push to history");
    TestInput.pushToWpmHistory(wpmAndRaw.wpm);
    TestInput.pushToRawHistory(wpmAndRaw.raw);
    if (timerDebug)
        console.timeEnd("push to history");
    return wpmAndRaw;
}
function monkey(wpmAndRaw) {
    if (timerDebug)
        console.time("update monkey");
    const num = config_1.default.blindMode ? wpmAndRaw.raw : wpmAndRaw.wpm;
    Monkey.updateFastOpacity(num);
    if (timerDebug)
        console.timeEnd("update monkey");
}
function calculateAcc() {
    if (timerDebug)
        console.time("calculate acc");
    const acc = Misc.roundTo2(TestStats.calculateAccuracy());
    if (timerDebug)
        console.timeEnd("calculate acc");
    return acc;
}
function layoutfluid() {
    if (timerDebug)
        console.time("layoutfluid");
    if (config_1.default.funbox === "layoutfluid" && config_1.default.mode === "time") {
        const layouts = config_1.default.customLayoutfluid
            ? config_1.default.customLayoutfluid.split("#")
            : ["qwerty", "dvorak", "colemak"];
        const switchTime = config_1.default.time / layouts.length;
        const time = Time.get();
        const index = Math.floor(time / switchTime);
        const layout = layouts[index];
        const flooredSwitchTimes = [];
        for (let i = 1; i < layouts.length; i++) {
            flooredSwitchTimes.push(Math.floor(switchTime * i));
        }
        if (flooredSwitchTimes.includes(time + 3)) {
            Notifications.add("3", 0, 1);
        }
        else if (flooredSwitchTimes.includes(time + 2)) {
            Notifications.add("2", 0, 1);
        }
        else if (flooredSwitchTimes.includes(time + 1)) {
            Notifications.add("1", 0, 1);
        }
        if (config_1.default.layout !== layout && layout !== undefined) {
            Notifications.add(`--- !!! ${layout} !!! ---`, 0);
            UpdateConfig.setLayout(layout, true);
            UpdateConfig.setKeymapLayout(layout, true);
        }
    }
    if (timerDebug)
        console.timeEnd("layoutfluid");
}
function checkIfFailed(wpmAndRaw, acc) {
    if (timerDebug)
        console.time("fail conditions");
    TestInput.pushKeypressesToHistory();
    if (config_1.default.minWpm === "custom" &&
        wpmAndRaw.wpm < config_1.default.minWpmCustomSpeed &&
        TestWords.words.currentIndex > 3) {
        if (timer !== null)
            clearTimeout(timer);
        SlowTimer.clear();
        slowTimerCount = 0;
        TimerEvent.dispatch("fail", "min wpm");
        return;
    }
    if (config_1.default.minAcc === "custom" &&
        acc < config_1.default.minAccCustom &&
        TestWords.words.currentIndex > 3) {
        if (timer !== null)
            clearTimeout(timer);
        SlowTimer.clear();
        slowTimerCount = 0;
        TimerEvent.dispatch("fail", "min accuracy");
        return;
    }
    if (timerDebug)
        console.timeEnd("fail conditions");
}
function checkIfTimeIsUp() {
    if (timerDebug)
        console.time("times up check");
    if (config_1.default.mode == "time" ||
        (config_1.default.mode === "custom" && CustomText.isTimeRandom)) {
        if ((Time.get() >= config_1.default.time &&
            config_1.default.time !== 0 &&
            config_1.default.mode === "time") ||
            (Time.get() >= CustomText.time &&
                CustomText.time !== 0 &&
                config_1.default.mode === "custom")) {
            //times up
            if (timer !== null)
                clearTimeout(timer);
            Caret.hide();
            TestInput.input.pushHistory();
            TestInput.corrected.pushHistory();
            SlowTimer.clear();
            slowTimerCount = 0;
            TimerEvent.dispatch("finish");
            return;
        }
    }
    if (timerDebug)
        console.timeEnd("times up check");
}
// ---------------------------------------
let timerStats = [];
function getTimerStats() {
    return timerStats;
}
exports.getTimerStats = getTimerStats;
function timerStep() {
    return __awaiter(this, void 0, void 0, function* () {
        if (timerDebug)
            console.time("timer step -----------------------------");
        Time.increment();
        premid();
        updateTimer();
        const wpmAndRaw = calculateWpmRaw();
        const acc = calculateAcc();
        monkey(wpmAndRaw);
        layoutfluid();
        checkIfFailed(wpmAndRaw, acc);
        checkIfTimeIsUp();
        if (timerDebug)
            console.timeEnd("timer step -----------------------------");
    });
}
function start() {
    return __awaiter(this, void 0, void 0, function* () {
        SlowTimer.clear();
        slowTimerCount = 0;
        timerStats = [];
        expected = TestStats.start + interval;
        (function loop() {
            const delay = expected - performance.now();
            timerStats.push({
                dateNow: Date.now(),
                now: performance.now(),
                expected: expected,
                nextDelay: delay,
            });
            if ((config_1.default.mode === "time" && config_1.default.time < 130 && config_1.default.time > 0) ||
                (config_1.default.mode === "words" && config_1.default.words < 250 && config_1.default.words > 0)) {
                if (delay < interval / 2) {
                    //slow timer
                    SlowTimer.set();
                }
                if (delay < interval / 10) {
                    slowTimerCount++;
                    if (slowTimerCount > 5) {
                        //slow timer
                        if (window.navigator.userAgent.includes("Edg")) {
                            Notifications.add('This bad performance could be caused by "efficiency mode" on Microsoft Edge.');
                        }
                        Notifications.add("Stopping the test due to bad performance. This would cause test calculations to be incorrect. If this happens a lot, please report this.", -1);
                        TimerEvent.dispatch("fail", "slow timer");
                    }
                }
            }
            timer = setTimeout(function () {
                // time++;
                if (!TestActive.get()) {
                    if (timer !== null)
                        clearTimeout(timer);
                    SlowTimer.clear();
                    slowTimerCount = 0;
                    return;
                }
                timerStep();
                expected += interval;
                loop();
            }, delay);
        })();
    });
}
exports.start = start;


/***/ }),

/***/ "./src/scripts/test/test-ui.ts":
/*!*************************************!*\
  !*** ./src/scripts/test/test-ui.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.highlightBadWord = exports.applyBurstHeatmap = exports.toggleResultWords = exports.arrangeCharactersLeftToRight = exports.arrangeCharactersRightToLeft = exports.lineJump = exports.updateWordElement = exports.screenshot = exports.colorful = exports.flipColors = exports.addWord = exports.showWords = exports.updateActiveElement = exports.focusWords = exports.reset = exports.setResultCalculating = exports.setTestRestarting = exports.setActiveWordTop = exports.setCurrentWordElementIndex = exports.setResultVisible = exports.resultCalculating = exports.currentTestLine = exports.lineTransition = exports.testRestartingPromise = exports.testRestarting = exports.activeWordTop = exports.resultVisible = exports.currentWordElementIndex = void 0;
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
const ThemeColors = __importStar(__webpack_require__(/*! ../elements/theme-colors */ "./src/scripts/elements/theme-colors.ts"));
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
const TestWords = __importStar(__webpack_require__(/*! ./test-words */ "./src/scripts/test/test-words.ts"));
const TestInput = __importStar(__webpack_require__(/*! ./test-input */ "./src/scripts/test/test-input.ts"));
const CustomText = __importStar(__webpack_require__(/*! ./custom-text */ "./src/scripts/test/custom-text.ts"));
const Caret = __importStar(__webpack_require__(/*! ./caret */ "./src/scripts/test/caret.ts"));
const OutOfFocus = __importStar(__webpack_require__(/*! ./out-of-focus */ "./src/scripts/test/out-of-focus.ts"));
const Replay = __importStar(__webpack_require__(/*! ./replay */ "./src/scripts/test/replay.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const SlowTimer = __importStar(__webpack_require__(/*! ../states/slow-timer */ "./src/scripts/states/slow-timer.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
const format_1 = __importDefault(__webpack_require__(/*! date-fns/format */ "./node_modules/date-fns/esm/format/index.js"));
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
ConfigEvent.subscribe((eventKey, eventValue) => {
    if (eventValue === undefined || typeof eventValue !== "boolean")
        return;
    if (eventKey === "flipTestColors")
        flipColors(eventValue);
    if (eventKey === "colorfulMode")
        colorful(eventValue);
    if (eventKey === "highlightMode")
        updateWordElement(eventValue);
    if (eventKey === "burstHeatmap")
        applyBurstHeatmap();
});
exports.currentWordElementIndex = 0;
exports.resultVisible = false;
exports.activeWordTop = 0;
exports.testRestarting = false;
exports.lineTransition = false;
exports.currentTestLine = 0;
exports.resultCalculating = false;
function setResultVisible(val) {
    exports.resultVisible = val;
}
exports.setResultVisible = setResultVisible;
function setCurrentWordElementIndex(val) {
    exports.currentWordElementIndex = val;
}
exports.setCurrentWordElementIndex = setCurrentWordElementIndex;
function setActiveWordTop(val) {
    exports.activeWordTop = val;
}
exports.setActiveWordTop = setActiveWordTop;
let restartingResolve;
function setTestRestarting(val) {
    exports.testRestarting = val;
    if (val === true) {
        exports.testRestartingPromise = new Promise((resolve) => {
            restartingResolve = resolve;
        });
    }
    else {
        if (restartingResolve)
            restartingResolve();
        restartingResolve = null;
    }
}
exports.setTestRestarting = setTestRestarting;
function setResultCalculating(val) {
    exports.resultCalculating = val;
}
exports.setResultCalculating = setResultCalculating;
function reset() {
    exports.currentTestLine = 0;
    exports.currentWordElementIndex = 0;
}
exports.reset = reset;
function focusWords() {
    if (!$("#wordsWrapper").hasClass("hidden")) {
        $("#wordsInput").trigger("focus");
    }
}
exports.focusWords = focusWords;
function updateActiveElement(backspace) {
    const active = document.querySelector("#words .active");
    if (config_1.default.mode == "zen" && backspace) {
        active === null || active === void 0 ? void 0 : active.remove();
    }
    else if (active !== null) {
        if (config_1.default.highlightMode == "word") {
            active.querySelectorAll("letter").forEach((e) => {
                e.classList.remove("correct");
            });
        }
        active.classList.remove("active");
    }
    try {
        const activeWord = document.querySelectorAll("#words .word")[exports.currentWordElementIndex];
        activeWord.classList.add("active");
        activeWord.classList.remove("error");
        exports.activeWordTop = document.querySelector("#words .active")
            .offsetTop;
        if (config_1.default.highlightMode == "word") {
            activeWord.querySelectorAll("letter").forEach((e) => {
                e.classList.add("correct");
            });
        }
    }
    catch (e) { }
}
exports.updateActiveElement = updateActiveElement;
function getWordHTML(word) {
    let newlineafter = false;
    let retval = `<div class='word'>`;
    for (let c = 0; c < word.length; c++) {
        if (config_1.default.funbox === "arrows") {
            if (word.charAt(c) === "↑") {
                retval += `<letter><i class="fas fa-arrow-up"></i></letter>`;
            }
            if (word.charAt(c) === "↓") {
                retval += `<letter><i class="fas fa-arrow-down"></i></letter>`;
            }
            if (word.charAt(c) === "←") {
                retval += `<letter><i class="fas fa-arrow-left"></i></letter>`;
            }
            if (word.charAt(c) === "→") {
                retval += `<letter><i class="fas fa-arrow-right"></i></letter>`;
            }
        }
        else if (word.charAt(c) === "\t") {
            retval += `<letter class='tabChar'><i class="fas fa-long-arrow-alt-right"></i></letter>`;
        }
        else if (word.charAt(c) === "\n") {
            newlineafter = true;
            retval += `<letter class='nlChar'><i class="fas fa-angle-down"></i></letter>`;
        }
        else {
            retval += "<letter>" + word.charAt(c) + "</letter>";
        }
    }
    retval += "</div>";
    if (newlineafter)
        retval += "<div class='newline'></div>";
    return retval;
}
function showWords() {
    $("#words").empty();
    let wordsHTML = "";
    if (config_1.default.mode !== "zen") {
        for (let i = 0; i < TestWords.words.length; i++) {
            wordsHTML += getWordHTML(TestWords.words.get(i));
        }
    }
    else {
        wordsHTML =
            '<div class="word">word height</div><div class="word active"></div>';
    }
    $("#words").html(wordsHTML);
    $("#wordsWrapper").removeClass("hidden");
    const wordHeight = ($(document.querySelector(".word")).outerHeight(true));
    const wordsHeight = ($(document.querySelector("#words")).outerHeight(true));
    if (config_1.default.showAllLines &&
        config_1.default.mode != "time" &&
        !(CustomText.isWordRandom && CustomText.word == 0) &&
        !CustomText.isTimeRandom) {
        $("#words").css("height", "auto");
        $("#wordsWrapper").css("height", "auto");
        let nh = wordHeight * 3;
        if (nh > wordsHeight) {
            nh = wordsHeight;
        }
        $(".outOfFocusWarning").css("line-height", nh + "px");
    }
    else {
        $("#words")
            .css("height", wordHeight * 4 + "px")
            .css("overflow", "hidden");
        $("#wordsWrapper")
            .css("height", wordHeight * 3 + "px")
            .css("overflow", "hidden");
        $(".outOfFocusWarning").css("line-height", wordHeight * 3 + "px");
    }
    if (config_1.default.mode === "zen") {
        $(document.querySelector(".word")).remove();
    }
    updateActiveElement();
    Caret.updatePosition();
}
exports.showWords = showWords;
function addWord(word) {
    $("#words").append(getWordHTML(word));
}
exports.addWord = addWord;
function flipColors(tf) {
    if (tf) {
        $("#words").addClass("flipped");
    }
    else {
        $("#words").removeClass("flipped");
    }
}
exports.flipColors = flipColors;
function colorful(tc) {
    if (tc) {
        $("#words").addClass("colorfulMode");
    }
    else {
        $("#words").removeClass("colorfulMode");
    }
}
exports.colorful = colorful;
function screenshot() {
    return __awaiter(this, void 0, void 0, function* () {
        let revealReplay = false;
        function revertScreenshot() {
            $("#notificationCenter").removeClass("hidden");
            $("#commandLineMobileButton").removeClass("hidden");
            $(".pageTest .ssWatermark").addClass("hidden");
            $(".pageTest .ssWatermark").text("monkeytype.com");
            $(".pageTest .buttons").removeClass("hidden");
            if (revealReplay)
                $("#resultReplay").removeClass("hidden");
            if (firebase_1.Auth.currentUser == null) {
                $(".pageTest .loginTip").removeClass("hidden");
            }
        }
        if (!$("#resultReplay").hasClass("hidden")) {
            revealReplay = true;
            Replay.pauseReplay();
        }
        const dateNow = new Date(Date.now());
        $("#resultReplay").addClass("hidden");
        $(".pageTest .ssWatermark").removeClass("hidden");
        $(".pageTest .ssWatermark").text((0, format_1.default)(dateNow, "dd MMM yyyy HH:mm") + " | monkeytype.com ");
        if (firebase_1.Auth.currentUser != null) {
            $(".pageTest .ssWatermark").text(DB.getSnapshot().name +
                " | " +
                (0, format_1.default)(dateNow, "dd MMM yyyy HH:mm") +
                " | monkeytype.com  ");
        }
        $(".pageTest .buttons").addClass("hidden");
        const src = $("#middle");
        const sourceX = src.position().left; /*X position from div#target*/
        const sourceY = src.position().top; /*Y position from div#target*/
        const sourceWidth = (src.outerWidth(true)); /*clientWidth/offsetWidth from div#target*/
        const sourceHeight = (src.outerHeight(true)); /*clientHeight/offsetHeight from div#target*/
        $("#notificationCenter").addClass("hidden");
        $("#commandLineMobileButton").addClass("hidden");
        $(".pageTest .loginTip").addClass("hidden");
        try {
            const paddingX = 50;
            const paddingY = 25;
            html2canvas(document.body, {
                backgroundColor: yield ThemeColors.get("bg"),
                width: sourceWidth + paddingX * 2,
                height: sourceHeight + paddingY * 2,
                x: sourceX - paddingX,
                y: sourceY - paddingY,
            }).then((canvas) => {
                canvas.toBlob((blob) => {
                    try {
                        if (blob === null)
                            return;
                        if (navigator.userAgent.toLowerCase().indexOf("firefox") > -1) {
                            open(URL.createObjectURL(blob));
                            revertScreenshot();
                        }
                        else {
                            navigator.clipboard
                                .write([
                                new ClipboardItem(Object.defineProperty({}, blob.type, {
                                    value: blob,
                                    enumerable: true,
                                })),
                            ])
                                .then(() => {
                                Notifications.add("Copied to clipboard", 1, 2);
                                revertScreenshot();
                            });
                        }
                    }
                    catch (e) {
                        Notifications.add("Error saving image to clipboard: " + e.message, -1);
                        revertScreenshot();
                    }
                });
            });
        }
        catch (e) {
            Notifications.add("Error creating image: " + e.message, -1);
            revertScreenshot();
        }
        setTimeout(() => {
            revertScreenshot();
        }, 3000);
    });
}
exports.screenshot = screenshot;
function updateWordElement(showError = !config_1.default.blindMode) {
    const input = TestInput.input.current;
    const wordAtIndex = document.querySelector("#words .word.active");
    const currentWord = TestWords.words.getCurrent();
    if (!currentWord && config_1.default.mode !== "zen")
        return;
    let ret = "";
    let newlineafter = false;
    if (config_1.default.mode === "zen") {
        for (let i = 0; i < TestInput.input.current.length; i++) {
            if (TestInput.input.current[i] === "\t") {
                ret += `<letter class='tabChar correct' style="opacity: 0"><i class="fas fa-long-arrow-alt-right"></i></letter>`;
            }
            else if (TestInput.input.current[i] === "\n") {
                newlineafter = true;
                ret += `<letter class='nlChar correct' style="opacity: 0"><i class="fas fa-angle-down"></i></letter>`;
            }
            else {
                ret += `<letter class="correct">${TestInput.input.current[i]}</letter>`;
            }
        }
    }
    else {
        let correctSoFar = false;
        // slice earlier if input has trailing compose characters
        const inputWithoutComposeLength = Misc.trailingComposeChars.test(input)
            ? input.search(Misc.trailingComposeChars)
            : input.length;
        if (input.search(Misc.trailingComposeChars) < currentWord.length &&
            currentWord.slice(0, inputWithoutComposeLength) ===
                input.slice(0, inputWithoutComposeLength)) {
            correctSoFar = true;
        }
        let wordHighlightClassString = correctSoFar ? "correct" : "incorrect";
        if (config_1.default.blindMode) {
            wordHighlightClassString = "correct";
        }
        for (let i = 0; i < input.length; i++) {
            const charCorrect = currentWord[i] == input[i];
            let correctClass = "correct";
            if (config_1.default.highlightMode == "off") {
                correctClass = "";
            }
            let currentLetter = currentWord[i];
            let tabChar = "";
            let nlChar = "";
            if (config_1.default.funbox === "arrows") {
                if (currentLetter === "↑") {
                    currentLetter = `<i class="fas fa-arrow-up"></i>`;
                }
                if (currentLetter === "↓") {
                    currentLetter = `<i class="fas fa-arrow-down"></i>`;
                }
                if (currentLetter === "←") {
                    currentLetter = `<i class="fas fa-arrow-left"></i>`;
                }
                if (currentLetter === "→") {
                    currentLetter = `<i class="fas fa-arrow-right"></i>`;
                }
            }
            else if (currentLetter === "\t") {
                tabChar = "tabChar";
                currentLetter = `<i class="fas fa-long-arrow-alt-right"></i>`;
            }
            else if (currentLetter === "\n") {
                nlChar = "nlChar";
                currentLetter = `<i class="fas fa-angle-down"></i>`;
            }
            if (Misc.trailingComposeChars.test(input) &&
                i > input.search(Misc.trailingComposeChars)) {
                continue;
            }
            if (charCorrect) {
                ret += `<letter class="${config_1.default.highlightMode == "word"
                    ? wordHighlightClassString
                    : correctClass} ${tabChar}${nlChar}">${currentLetter}</letter>`;
            }
            else if (currentLetter !== undefined &&
                Misc.trailingComposeChars.test(input) &&
                i === input.search(Misc.trailingComposeChars)) {
                ret += `<letter class="${config_1.default.highlightMode == "word" ? wordHighlightClassString : ""} dead">${currentLetter}</letter>`;
            }
            else if (!showError) {
                if (currentLetter !== undefined) {
                    ret += `<letter class="${config_1.default.highlightMode == "word"
                        ? wordHighlightClassString
                        : correctClass} ${tabChar}${nlChar}">${currentLetter}</letter>`;
                }
            }
            else if (currentLetter === undefined) {
                if (!config_1.default.hideExtraLetters) {
                    let letter = input[i];
                    if (letter == " " || letter == "\t" || letter == "\n") {
                        letter = "_";
                    }
                    ret += `<letter class="${config_1.default.highlightMode == "word"
                        ? wordHighlightClassString
                        : "incorrect"} extra ${tabChar}${nlChar}">${letter}</letter>`;
                }
            }
            else {
                ret +=
                    `<letter class="${config_1.default.highlightMode == "word"
                        ? wordHighlightClassString
                        : "incorrect"} ${tabChar}${nlChar}">` +
                        (config_1.default.indicateTypos === "replace"
                            ? input[i] == " "
                                ? "_"
                                : input[i]
                            : currentLetter) +
                        (config_1.default.indicateTypos === "below" ? `<hint>${input[i]}</hint>` : "") +
                        "</letter>";
            }
        }
        const inputWithSingleComposeLength = Misc.trailingComposeChars.test(input)
            ? input.search(Misc.trailingComposeChars) + 1
            : input.length;
        if (inputWithSingleComposeLength < currentWord.length) {
            for (let i = inputWithSingleComposeLength; i < currentWord.length; i++) {
                if (config_1.default.funbox === "arrows") {
                    if (currentWord[i] === "↑") {
                        ret += `<letter><i class="fas fa-arrow-up"></i></letter>`;
                    }
                    if (currentWord[i] === "↓") {
                        ret += `<letter><i class="fas fa-arrow-down"></i></letter>`;
                    }
                    if (currentWord[i] === "←") {
                        ret += `<letter><i class="fas fa-arrow-left"></i></letter>`;
                    }
                    if (currentWord[i] === "→") {
                        ret += `<letter><i class="fas fa-arrow-right"></i></letter>`;
                    }
                }
                else if (currentWord[i] === "\t") {
                    ret += `<letter class='tabChar'><i class="fas fa-long-arrow-alt-right"></i></letter>`;
                }
                else if (currentWord[i] === "\n") {
                    ret += `<letter class='nlChar'><i class="fas fa-angle-down"></i></letter>`;
                }
                else {
                    ret +=
                        `<letter class="${config_1.default.highlightMode == "word" ? wordHighlightClassString : ""}">` +
                            currentWord[i] +
                            "</letter>";
                }
            }
        }
        if (config_1.default.highlightMode === "letter" && config_1.default.hideExtraLetters) {
            if (input.length > currentWord.length && !config_1.default.blindMode) {
                $(wordAtIndex).addClass("error");
            }
            else if (input.length == currentWord.length) {
                $(wordAtIndex).removeClass("error");
            }
        }
    }
    wordAtIndex.innerHTML = ret;
    if (newlineafter)
        $("#words").append("<div class='newline'></div>");
}
exports.updateWordElement = updateWordElement;
function lineJump(currentTop) {
    var _a;
    //last word of the line
    if (exports.currentTestLine > 0) {
        const hideBound = currentTop;
        const toHide = [];
        const wordElements = $("#words .word");
        for (let i = 0; i < exports.currentWordElementIndex; i++) {
            if ($(wordElements[i]).hasClass("hidden"))
                continue;
            const forWordTop = Math.floor(wordElements[i].offsetTop);
            if (forWordTop < hideBound - 10) {
                toHide.push($($("#words .word")[i]));
            }
        }
        const wordHeight = ($(document.querySelector(".word")).outerHeight(true));
        if (config_1.default.smoothLineScroll && toHide.length > 0) {
            exports.lineTransition = true;
            $("#words").prepend(`<div class="smoothScroller" style="position: fixed;height:${wordHeight}px;width:100%"></div>`);
            $("#words .smoothScroller").animate({
                height: 0,
            }, SlowTimer.get() ? 0 : 125, () => {
                $("#words .smoothScroller").remove();
            });
            $("#paceCaret").animate({
                top: ((_a = document.querySelector("#paceCaret")) === null || _a === void 0 ? void 0 : _a.offsetTop) -
                    wordHeight,
            }, SlowTimer.get() ? 0 : 125);
            $("#words").animate({
                marginTop: `-${wordHeight}px`,
            }, SlowTimer.get() ? 0 : 125, () => {
                exports.activeWordTop = (document.querySelector("#words .active")).offsetTop;
                exports.currentWordElementIndex -= toHide.length;
                exports.lineTransition = false;
                toHide.forEach((el) => el.remove());
                $("#words").css("marginTop", "0");
            });
        }
        else {
            toHide.forEach((el) => el.remove());
            exports.currentWordElementIndex -= toHide.length;
            $("#paceCaret").css({
                top: document.querySelector("#paceCaret").offsetTop -
                    wordHeight,
            });
        }
    }
    exports.currentTestLine++;
}
exports.lineJump = lineJump;
function arrangeCharactersRightToLeft() {
    $("#words").addClass("rightToLeftTest");
    $("#resultWordsHistory .words").addClass("rightToLeftTest");
    $("#resultReplay .words").addClass("rightToLeftTest");
}
exports.arrangeCharactersRightToLeft = arrangeCharactersRightToLeft;
function arrangeCharactersLeftToRight() {
    $("#words").removeClass("rightToLeftTest");
    $("#resultWordsHistory .words").removeClass("rightToLeftTest");
    $("#resultReplay .words").removeClass("rightToLeftTest");
}
exports.arrangeCharactersLeftToRight = arrangeCharactersLeftToRight;
function loadWordsHistory() {
    return __awaiter(this, void 0, void 0, function* () {
        $("#resultWordsHistory .words").empty();
        let wordsHTML = "";
        for (let i = 0; i < TestInput.input.history.length + 2; i++) {
            const input = TestInput.input.getHistory(i);
            const word = TestWords.words.get(i);
            let wordEl = "";
            try {
                if (input === "")
                    throw new Error("empty input word");
                if (TestInput.corrected.getHistory(i) !== undefined &&
                    TestInput.corrected.getHistory(i) !== "") {
                    wordEl = `<div class='word' burst="${TestInput.burstHistory[i]}" input="${TestInput.corrected
                        .getHistory(i)
                        .replace(/"/g, "&quot;")
                        .replace(/ /g, "_")}">`;
                }
                else {
                    wordEl = `<div class='word' burst="${TestInput.burstHistory[i]}" input="${input.replace(/"/g, "&quot;").replace(/ /g, "_")}">`;
                }
                if (i === TestInput.input.history.length - 1) {
                    //last word
                    const wordstats = {
                        correct: 0,
                        incorrect: 0,
                        missed: 0,
                    };
                    const length = config_1.default.mode == "zen" ? input.length : word.length;
                    for (let c = 0; c < length; c++) {
                        if (c < input.length) {
                            //on char that still has a word list pair
                            if (config_1.default.mode == "zen" || input[c] == word[c]) {
                                wordstats.correct++;
                            }
                            else {
                                wordstats.incorrect++;
                            }
                        }
                        else {
                            //on char that is extra
                            wordstats.missed++;
                        }
                    }
                    if (wordstats.incorrect !== 0 || config_1.default.mode !== "time") {
                        if (config_1.default.mode != "zen" && input !== word) {
                            wordEl = `<div class='word error' burst="${TestInput.burstHistory[i]}" input="${input.replace(/"/g, "&quot;").replace(/ /g, "_")}">`;
                        }
                    }
                }
                else {
                    if (config_1.default.mode != "zen" && input !== word) {
                        wordEl = `<div class='word error' burst="${TestInput.burstHistory[i]}" input="${input.replace(/"/g, "&quot;").replace(/ /g, "_")}">`;
                    }
                }
                let loop;
                if (config_1.default.mode == "zen" || input.length > word.length) {
                    //input is longer - extra characters possible (loop over input)
                    loop = input.length;
                }
                else {
                    //input is shorter or equal (loop over word list)
                    loop = word.length;
                }
                for (let c = 0; c < loop; c++) {
                    let correctedChar;
                    try {
                        correctedChar = TestInput.corrected.getHistory(i)[c];
                    }
                    catch (e) {
                        correctedChar = undefined;
                    }
                    let extraCorrected = "";
                    if (c + 1 === loop &&
                        TestInput.corrected.getHistory(i) !== undefined &&
                        TestInput.corrected.getHistory(i).length > input.length) {
                        extraCorrected = "extraCorrected";
                    }
                    if (config_1.default.mode == "zen" || word[c] !== undefined) {
                        if (config_1.default.mode == "zen" || input[c] === word[c]) {
                            if (correctedChar === input[c] || correctedChar === undefined) {
                                wordEl += `<letter class="correct ${extraCorrected}">${input[c]}</letter>`;
                            }
                            else {
                                wordEl +=
                                    `<letter class="corrected ${extraCorrected}">` +
                                        input[c] +
                                        "</letter>";
                            }
                        }
                        else {
                            if (input[c] === TestInput.input.current) {
                                wordEl +=
                                    `<letter class='correct ${extraCorrected}'>` +
                                        word[c] +
                                        "</letter>";
                            }
                            else if (input[c] === undefined) {
                                wordEl += "<letter>" + word[c] + "</letter>";
                            }
                            else {
                                wordEl +=
                                    `<letter class="incorrect ${extraCorrected}">` +
                                        word[c] +
                                        "</letter>";
                            }
                        }
                    }
                    else {
                        wordEl += '<letter class="incorrect extra">' + input[c] + "</letter>";
                    }
                }
                wordEl += "</div>";
            }
            catch (e) {
                try {
                    wordEl = "<div class='word'>";
                    for (let c = 0; c < word.length; c++) {
                        wordEl += "<letter>" + word[c] + "</letter>";
                    }
                    wordEl += "</div>";
                }
                catch (_a) { }
            }
            wordsHTML += wordEl;
        }
        $("#resultWordsHistory .words").html(wordsHTML);
        $("#showWordHistoryButton").addClass("loaded");
        return true;
    });
}
function toggleResultWords() {
    if (exports.resultVisible) {
        if ($("#resultWordsHistory").stop(true, true).hasClass("hidden")) {
            //show
            if (!$("#showWordHistoryButton").hasClass("loaded")) {
                $("#words").html(`<div class="preloader"><i class="fas fa-fw fa-spin fa-circle-notch"></i></div>`);
                loadWordsHistory().then(() => {
                    if (config_1.default.burstHeatmap) {
                        applyBurstHeatmap();
                    }
                    $("#resultWordsHistory")
                        .removeClass("hidden")
                        .css("display", "none")
                        .slideDown(250, () => {
                        if (config_1.default.burstHeatmap) {
                            applyBurstHeatmap();
                        }
                    });
                });
            }
            else {
                if (config_1.default.burstHeatmap) {
                    applyBurstHeatmap();
                }
                $("#resultWordsHistory")
                    .removeClass("hidden")
                    .css("display", "none")
                    .slideDown(250);
            }
        }
        else {
            //hide
            $("#resultWordsHistory").slideUp(250, () => {
                $("#resultWordsHistory").addClass("hidden");
            });
        }
    }
}
exports.toggleResultWords = toggleResultWords;
function applyBurstHeatmap() {
    var _a, _b;
    if (config_1.default.burstHeatmap) {
        $("#resultWordsHistory .heatmapLegend").removeClass("hidden");
        let burstlist = [...TestInput.burstHistory];
        burstlist = burstlist.filter((x) => x !== Infinity);
        burstlist = burstlist.filter((x) => x < 350);
        if (((_a = TestInput.input.getHistory(TestInput.input.getHistory().length - 1)) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = TestWords.words.getCurrent()) === null || _b === void 0 ? void 0 : _b.length)) {
            burstlist = burstlist.splice(0, burstlist.length - 1);
        }
        const median = Misc.median(burstlist);
        const adatm = [];
        burstlist.forEach((burst) => {
            adatm.push(Math.abs(median - burst));
        });
        const step = Misc.mean(adatm);
        const steps = [
            {
                val: 0,
                class: "heatmap-0",
            },
            {
                val: median - step * 1.5,
                class: "heatmap-1",
            },
            {
                val: median - step * 0.5,
                class: "heatmap-2",
            },
            {
                val: median + step * 0.5,
                class: "heatmap-3",
            },
            {
                val: median + step * 1.5,
                class: "heatmap-4",
            },
        ];
        $("#resultWordsHistory .words .word").each((_, word) => {
            const wordBurstVal = parseInt($(word).attr("burst"));
            let cls = "";
            steps.forEach((step) => {
                if (wordBurstVal > step.val)
                    cls = step.class;
            });
            $(word).addClass(cls);
        });
    }
    else {
        $("#resultWordsHistory .heatmapLegend").addClass("hidden");
        $("#resultWordsHistory .words .word").removeClass("heatmap-0");
        $("#resultWordsHistory .words .word").removeClass("heatmap-1");
        $("#resultWordsHistory .words .word").removeClass("heatmap-2");
        $("#resultWordsHistory .words .word").removeClass("heatmap-3");
        $("#resultWordsHistory .words .word").removeClass("heatmap-4");
    }
}
exports.applyBurstHeatmap = applyBurstHeatmap;
function highlightBadWord(index, showError) {
    if (!showError)
        return;
    $($("#words .word")[index]).addClass("error");
}
exports.highlightBadWord = highlightBadWord;
$(document.body).on("click", "#saveScreenshotButton", () => {
    screenshot();
});
$(document).on("click", "#testModesNotice .text-button.blind", () => {
    UpdateConfig.setBlindMode(!config_1.default.blindMode);
});
$(".pageTest #copyWordsListButton").on("click", () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        let words;
        if (config_1.default.mode == "zen") {
            words = TestInput.input.history.join(" ");
        }
        else {
            words = TestWords.words.get()
                .slice(0, TestInput.input.history.length)
                .join(" ");
        }
        yield navigator.clipboard.writeText(words);
        Notifications.add("Copied to clipboard", 0, 2);
    }
    catch (e) {
        Notifications.add("Could not copy to clipboard: " + e, -1);
    }
}));
$(".pageTest #toggleBurstHeatmap").on("click", () => __awaiter(void 0, void 0, void 0, function* () {
    UpdateConfig.setBurstHeatmap(!config_1.default.burstHeatmap);
}));
$(document).on("mouseleave", "#resultWordsHistory .words .word", () => {
    $(".wordInputAfter").remove();
});
$("#wpmChart").on("mouseleave", () => {
    $(".wordInputAfter").remove();
});
$(document).on("mouseenter", "#resultWordsHistory .words .word", (e) => {
    if (exports.resultVisible) {
        const input = $(e.currentTarget).attr("input");
        const burst = parseInt($(e.currentTarget).attr("burst"));
        if (input != undefined) {
            $(e.currentTarget).append(`<div class="wordInputAfter">
          <div class="text">
          ${input
                .replace(/\t/g, "_")
                .replace(/\n/g, "_")
                .replace(/</g, "&lt")
                .replace(/>/g, "&gt")}
          </div>
          <div class="speed">
          ${Math.round(config_1.default.alwaysShowCPM ? burst * 5 : burst)}${config_1.default.alwaysShowCPM ? "cpm" : "wpm"}
          </div>
          </div>`);
        }
    }
});
$("#wordsInput").on("focus", () => {
    if (!exports.resultVisible && config_1.default.showOutOfFocusWarning) {
        OutOfFocus.hide();
    }
    Caret.show();
});
$("#wordsInput").on("focusout", () => {
    if (!exports.resultVisible && config_1.default.showOutOfFocusWarning) {
        OutOfFocus.show();
    }
    Caret.hide();
});
$(document).on("keypress", "#showWordHistoryButton", (event) => {
    if (event.key === "Enter") {
        toggleResultWords();
    }
});
$(document.body).on("click", "#showWordHistoryButton", () => {
    toggleResultWords();
});
$("#wordsWrapper").on("click", () => {
    focusWords();
});


/***/ }),

/***/ "./src/scripts/test/test-words.ts":
/*!****************************************!*\
  !*** ./src/scripts/test/test-words.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setHasTab = exports.setRandomQuote = exports.randomQuote = exports.hasTab = exports.words = void 0;
class Words {
    constructor() {
        this.list = [];
        this.length = 0;
        this.currentIndex = 0;
    }
    get(i, raw = false) {
        var _a, _b;
        if (i === undefined) {
            return this.list;
        }
        else {
            if (raw) {
                return (_b = (_a = this.list[i]) === null || _a === void 0 ? void 0 : _a.replace(/[.?!":\-,]/g, "")) === null || _b === void 0 ? void 0 : _b.toLowerCase();
            }
            else {
                return this.list[i];
            }
        }
    }
    getCurrent() {
        return this.list[this.currentIndex];
    }
    getLast() {
        return this.list[this.list.length - 1];
    }
    push(word) {
        this.list.push(word);
        this.length = this.list.length;
    }
    reset() {
        this.list = [];
        this.currentIndex = 0;
        this.length = this.list.length;
    }
    resetCurrentIndex() {
        this.currentIndex = 0;
    }
    decreaseCurrentIndex() {
        this.currentIndex--;
    }
    increaseCurrentIndex() {
        this.currentIndex++;
    }
    clean() {
        for (const s of this.list) {
            if (/ +/.test(s)) {
                const id = this.list.indexOf(s);
                const tempList = s.split(" ");
                this.list.splice(id, 1);
                for (let i = 0; i < tempList.length; i++) {
                    this.list.splice(id + i, 0, tempList[i]);
                }
            }
        }
    }
}
exports.words = new Words();
exports.hasTab = false;
exports.randomQuote = null;
function setRandomQuote(rq) {
    exports.randomQuote = rq;
}
exports.setRandomQuote = setRandomQuote;
function setHasTab(tf) {
    exports.hasTab = tf;
}
exports.setHasTab = setHasTab;


/***/ }),

/***/ "./src/scripts/test/timer-progress.ts":
/*!********************************************!*\
  !*** ./src/scripts/test/timer-progress.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.updateStyle = exports.update = exports.restart = exports.hide = exports.show = void 0;
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const CustomText = __importStar(__webpack_require__(/*! ./custom-text */ "./src/scripts/test/custom-text.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const TestWords = __importStar(__webpack_require__(/*! ./test-words */ "./src/scripts/test/test-words.ts"));
const TestInput = __importStar(__webpack_require__(/*! ./test-input */ "./src/scripts/test/test-input.ts"));
const Time = __importStar(__webpack_require__(/*! ../states/time */ "./src/scripts/states/time.ts"));
const SlowTimer = __importStar(__webpack_require__(/*! ../states/slow-timer */ "./src/scripts/states/slow-timer.ts"));
const TestActive = __importStar(__webpack_require__(/*! ../states/test-active */ "./src/scripts/states/test-active.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
function show() {
    const op = config_1.default.showTimerProgress ? config_1.default.timerOpacity : 0;
    if (config_1.default.mode != "zen" && config_1.default.timerStyle === "bar") {
        $("#timerWrapper").stop(true, true).removeClass("hidden").animate({
            opacity: op,
        }, 125);
    }
    else if (config_1.default.timerStyle === "text") {
        $("#timerNumber")
            .stop(true, true)
            .removeClass("hidden")
            .css("opacity", 0)
            .animate({
            opacity: op,
        }, 125);
    }
    else if (config_1.default.mode == "zen" || config_1.default.timerStyle === "mini") {
        if (op > 0) {
            $("#miniTimerAndLiveWpm .time")
                .stop(true, true)
                .removeClass("hidden")
                .animate({
                opacity: op,
            }, 125);
        }
    }
}
exports.show = show;
function hide() {
    $("#timerWrapper").stop(true, true).animate({
        opacity: 0,
    }, 125);
    $("#miniTimerAndLiveWpm .time")
        .stop(true, true)
        .animate({
        opacity: 0,
    }, 125, () => {
        $("#miniTimerAndLiveWpm .time").addClass("hidden");
    });
    $("#timerNumber").stop(true, true).animate({
        opacity: 0,
    }, 125);
}
exports.hide = hide;
function restart() {
    if (config_1.default.timerStyle === "bar") {
        if (config_1.default.mode === "time") {
            $("#timer").stop(true, true).animate({
                width: "100vw",
            }, 0);
        }
        else if (config_1.default.mode === "words" || config_1.default.mode === "custom") {
            $("#timer").stop(true, true).animate({
                width: "0vw",
            }, 0);
        }
    }
}
exports.restart = restart;
const timerNumberElement = document.querySelector("#timerNumber");
const miniTimerNumberElement = document.querySelector("#miniTimerAndLiveWpm .time");
function update() {
    var _a, _b, _c;
    const time = Time.get();
    if (config_1.default.mode === "time" ||
        (config_1.default.mode === "custom" && CustomText.isTimeRandom)) {
        let maxtime = config_1.default.time;
        if (config_1.default.mode === "custom" && CustomText.isTimeRandom) {
            maxtime = CustomText.time;
        }
        if (config_1.default.timerStyle === "bar") {
            const percent = 100 - ((time + 1) / maxtime) * 100;
            $("#timer")
                .stop(true, true)
                .animate({
                width: percent + "vw",
            }, SlowTimer.get() ? 0 : 1000, "linear");
        }
        else if (config_1.default.timerStyle === "text") {
            let displayTime = Misc.secondsToString(maxtime - time);
            if (maxtime === 0) {
                displayTime = Misc.secondsToString(time);
            }
            if (timerNumberElement !== null) {
                timerNumberElement.innerHTML = "<div>" + displayTime + "</div>";
            }
        }
        else if (config_1.default.timerStyle === "mini") {
            let displayTime = Misc.secondsToString(maxtime - time);
            if (maxtime === 0) {
                displayTime = Misc.secondsToString(time);
            }
            if (miniTimerNumberElement !== null) {
                miniTimerNumberElement.innerHTML = displayTime;
            }
        }
    }
    else if (config_1.default.mode === "words" ||
        config_1.default.mode === "custom" ||
        config_1.default.mode === "quote") {
        let outof = TestWords.words.length;
        if (config_1.default.mode === "words") {
            outof = config_1.default.words;
        }
        if (config_1.default.mode === "custom") {
            if (CustomText.isWordRandom) {
                outof = CustomText.word;
            }
            else {
                outof = CustomText.text.length;
            }
        }
        if (config_1.default.mode === "quote") {
            outof = (_c = (_b = (_a = TestWords.randomQuote) === null || _a === void 0 ? void 0 : _a.textSplit) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 1;
        }
        if (config_1.default.timerStyle === "bar") {
            const percent = Math.floor(((TestWords.words.currentIndex + 1) / outof) * 100);
            $("#timer")
                .stop(true, true)
                .animate({
                width: percent + "vw",
            }, SlowTimer.get() ? 0 : 250);
        }
        else if (config_1.default.timerStyle === "text") {
            if (outof === 0) {
                if (timerNumberElement !== null) {
                    timerNumberElement.innerHTML =
                        "<div>" + `${TestInput.input.history.length}` + "</div>";
                }
            }
            else {
                if (timerNumberElement !== null) {
                    timerNumberElement.innerHTML =
                        "<div>" + `${TestInput.input.history.length}/${outof}` + "</div>";
                }
            }
        }
        else if (config_1.default.timerStyle === "mini") {
            if (config_1.default.words === 0) {
                if (miniTimerNumberElement !== null) {
                    miniTimerNumberElement.innerHTML = `${TestInput.input.history.length}`;
                }
            }
            else {
                if (miniTimerNumberElement !== null) {
                    miniTimerNumberElement.innerHTML = `${TestInput.input.history.length}/${outof}`;
                }
            }
        }
    }
    else if (config_1.default.mode == "zen") {
        if (config_1.default.timerStyle === "text") {
            if (timerNumberElement !== null) {
                timerNumberElement.innerHTML =
                    "<div>" + `${TestInput.input.history.length}` + "</div>";
            }
        }
        else {
            if (miniTimerNumberElement !== null) {
                miniTimerNumberElement.innerHTML = `${TestInput.input.history.length}`;
            }
        }
    }
}
exports.update = update;
function updateStyle() {
    if (!TestActive.get())
        return;
    hide();
    update();
    setTimeout(() => {
        show();
    }, 125);
}
exports.updateStyle = updateStyle;
ConfigEvent.subscribe((eventKey, eventValue) => {
    if (eventKey === "showTimerProgress") {
        if (eventValue === true && TestActive.get()) {
            show();
        }
        else {
            hide();
        }
    }
    if (eventKey === "timerStyle")
        updateStyle();
});


/***/ }),

/***/ "./src/scripts/test/today-tracker.ts":
/*!*******************************************!*\
  !*** ./src/scripts/test/today-tracker.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addAllFromToday = exports.getString = exports.addSeconds = void 0;
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const DB = __importStar(__webpack_require__(/*! ../db */ "./src/scripts/db.ts"));
let seconds = 0;
let addedAllToday = false;
let dayToday;
function addSeconds(s) {
    if (addedAllToday) {
        const nowDate = new Date().getDate();
        if (nowDate > dayToday) {
            seconds = s;
            return;
        }
    }
    seconds += s;
}
exports.addSeconds = addSeconds;
function getString() {
    const secString = Misc.secondsToString(Math.round(seconds), true, true);
    return secString + (addedAllToday === true ? " today" : " session");
}
exports.getString = getString;
function addAllFromToday() {
    const todayDate = new Date();
    todayDate.setSeconds(0);
    todayDate.setMinutes(0);
    todayDate.setHours(0);
    todayDate.setMilliseconds(0);
    dayToday = todayDate.getDate();
    const todayDateMS = todayDate.getTime();
    seconds = 0;
    const results = DB.getSnapshot().results;
    results === null || results === void 0 ? void 0 : results.forEach((result) => {
        const resultDate = new Date(result.timestamp);
        resultDate.setSeconds(0);
        resultDate.setMinutes(0);
        resultDate.setHours(0);
        resultDate.setMilliseconds(0);
        const resultDateMS = resultDate.getTime();
        if (resultDateMS >= todayDateMS) {
            seconds +=
                result.testDuration + result.incompleteTestSeconds - result.afkDuration;
        }
    });
    addedAllToday = true;
}
exports.addAllFromToday = addAllFromToday;


/***/ }),

/***/ "./src/scripts/test/tts.ts":
/*!*********************************!*\
  !*** ./src/scripts/test/tts.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.speak = exports.clear = exports.init = exports.setLanguage = void 0;
const config_1 = __importDefault(__webpack_require__(/*! ../config */ "./src/scripts/config.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ../observables/config-event */ "./src/scripts/observables/config-event.ts"));
let voice;
function setLanguage(lang = config_1.default.language) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!voice)
            return;
        const language = yield Misc.getLanguage(lang);
        const bcp = language.bcp47 ? language.bcp47 : "en-US";
        voice.lang = bcp;
    });
}
exports.setLanguage = setLanguage;
function init() {
    return __awaiter(this, void 0, void 0, function* () {
        voice = new SpeechSynthesisUtterance();
        setLanguage();
    });
}
exports.init = init;
function clear() {
    voice = undefined;
}
exports.clear = clear;
function speak(text) {
    window.speechSynthesis.cancel();
    if (voice === undefined)
        init();
    if (voice !== undefined) {
        voice.text = text;
        window.speechSynthesis.speak(voice);
    }
}
exports.speak = speak;
ConfigEvent.subscribe((eventKey, eventValue) => {
    if (eventKey === "funbox") {
        if (eventValue === "none") {
            clear();
        }
        else if (eventValue === "tts") {
            init();
        }
    }
    if (eventKey === "language" && config_1.default.funbox === "tts")
        setLanguage();
});


/***/ }),

/***/ "./src/scripts/test/weak-spot.ts":
/*!***************************************!*\
  !*** ./src/scripts/test/weak-spot.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getWord = exports.updateScore = void 0;
const TestInput = __importStar(__webpack_require__(/*! ./test-input */ "./src/scripts/test/test-input.ts"));
// Changes how quickly it 'learns' scores - very roughly the score for a char
// is based on last perCharCount occurrences. Make it smaller to adjust faster.
const perCharCount = 50;
// Choose the highest scoring word from this many random words. Higher values
// will choose words with more weak letters on average.
const wordSamples = 20;
// Score penatly (in milliseconds) for getting a letter wrong.
const incorrectPenalty = 5000;
const scores = {};
class Score {
    constructor() {
        this.average = 0.0;
        this.count = 0;
    }
    update(score) {
        if (this.count < perCharCount) {
            this.count++;
        }
        const adjustRate = 1.0 / this.count;
        // Keep an exponential moving average of the score over time.
        this.average = score * adjustRate + this.average * (1 - adjustRate);
    }
}
function updateScore(char, isCorrect) {
    const timings = TestInput.keypressTimings.spacing.array;
    if (timings.length === 0 || typeof timings === "string") {
        return;
    }
    let score = timings[timings.length - 1];
    if (!isCorrect) {
        score += incorrectPenalty;
    }
    if (!(char in scores)) {
        scores[char] = new Score();
    }
    scores[char].update(score);
}
exports.updateScore = updateScore;
function score(word) {
    let total = 0.0;
    let numChars = 0;
    for (const c of word) {
        if (c in scores) {
            total += scores[c].average;
            numChars++;
        }
    }
    return numChars == 0 ? 0.0 : total / numChars;
}
function getWord(wordset) {
    let highScore;
    let randomWord = "";
    for (let i = 0; i < wordSamples; i++) {
        const newWord = wordset.randomWord();
        const newScore = score(newWord);
        if (i == 0 || highScore === undefined || newScore > highScore) {
            randomWord = newWord;
            highScore = newScore;
        }
    }
    return randomWord;
}
exports.getWord = getWord;


/***/ }),

/***/ "./src/scripts/test/wikipedia.ts":
/*!***************************************!*\
  !*** ./src/scripts/test/wikipedia.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getSection = exports.getTLD = exports.Section = void 0;
const Loader = __importStar(__webpack_require__(/*! ../elements/loader */ "./src/scripts/elements/loader.ts"));
const Misc = __importStar(__webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts"));
class Section {
    constructor(title, author, words) {
        this.title = title;
        this.author = author;
        this.words = words;
    }
}
exports.Section = Section;
function getTLD(languageGroup) {
    return __awaiter(this, void 0, void 0, function* () {
        // language group to tld
        switch (languageGroup.name) {
            case "english":
                return "en";
            case "spanish":
                return "es";
            case "french":
                return "fr";
            case "german":
                return "de";
            case "portuguese":
                return "pt";
            case "italian":
                return "it";
            case "dutch":
                return "nl";
            default:
                return "en";
        }
    });
}
exports.getTLD = getTLD;
function getSection(language) {
    return __awaiter(this, void 0, void 0, function* () {
        // console.log("Getting section");
        Loader.show();
        // get TLD for wikipedia according to language group
        let urlTLD = "en";
        const currentLanguageGroup = yield Misc.findCurrentGroup(language);
        if (currentLanguageGroup !== undefined) {
            urlTLD = yield getTLD(currentLanguageGroup);
        }
        const randomPostURL = `https://${urlTLD}.wikipedia.org/api/rest_v1/page/random/summary`;
        const sectionObj = { title: "", author: "" };
        const randomPostReq = yield fetch(randomPostURL);
        let pageid = 0;
        if (randomPostReq.status == 200) {
            const postObj = yield randomPostReq.json();
            sectionObj.title = postObj.title;
            sectionObj.author = postObj.author;
            pageid = postObj.pageid;
        }
        return new Promise((res, rej) => {
            if (randomPostReq.status != 200) {
                Loader.hide();
                rej(randomPostReq.status);
            }
            const sectionURL = `https://${urlTLD}.wikipedia.org/w/api.php?action=query&format=json&pageids=${pageid}&prop=extracts&exintro=true&origin=*`;
            const sectionReq = new XMLHttpRequest();
            sectionReq.onload = () => {
                if (sectionReq.readyState == 4) {
                    if (sectionReq.status == 200) {
                        let sectionText = JSON.parse(sectionReq.responseText).query
                            .pages[pageid.toString()].extract;
                        const words = [];
                        // Remove double whitespaces and finally trailing whitespaces.
                        sectionText = sectionText.replace(/<\/p><p>+/g, " ");
                        sectionText = $("<div/>").html(sectionText).text();
                        sectionText = sectionText.replace(/\s+/g, " ");
                        sectionText = sectionText.trim();
                        // // Add spaces
                        // sectionText = sectionText.replace(/[a-zA-Z0-9]{3,}\.[a-zA-Z]/g, (x) =>
                        //   x.replace(/\./, ". ")
                        // );
                        sectionText.split(" ").forEach((word) => {
                            words.push(word);
                        });
                        const section = new Section(sectionObj.title, sectionObj.author, words);
                        Loader.hide();
                        res(section);
                    }
                    else {
                        Loader.hide();
                        rej(sectionReq.status);
                    }
                }
            };
            sectionReq.open("GET", sectionURL);
            sectionReq.send();
        });
    });
}
exports.getSection = getSection;


/***/ }),

/***/ "./src/scripts/test/wordset.ts":
/*!*************************************!*\
  !*** ./src/scripts/test/wordset.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.withWords = exports.Wordset = void 0;
const misc_1 = __webpack_require__(/*! ../utils/misc */ "./src/scripts/utils/misc.ts");
let currentWordset = null;
let currentWordGenerator = null;
class Wordset {
    constructor(words) {
        this.words = words;
        this.length = this.words.length;
    }
    randomWord() {
        return (0, misc_1.randomElementFromArray)(this.words);
    }
}
exports.Wordset = Wordset;
const prefixSize = 2;
class CharDistribution {
    constructor() {
        this.chars = {};
        this.count = 0;
    }
    addChar(char) {
        this.count++;
        if (char in this.chars) {
            this.chars[char]++;
        }
        else {
            this.chars[char] = 1;
        }
    }
    randomChar() {
        const randomIndex = (0, misc_1.randomIntFromRange)(0, this.count - 1);
        let runningCount = 0;
        for (const [char, charCount] of Object.entries(this.chars)) {
            runningCount += charCount;
            if (runningCount > randomIndex) {
                return char;
            }
        }
        return Object.keys(this.chars)[0];
    }
}
class WordGenerator extends Wordset {
    constructor(words) {
        super(words);
        this.ngrams = {};
        // Can generate an unbounded number of words in theory.
        this.length = Infinity;
        for (let word of words) {
            // Mark the end of each word with a space.
            word += " ";
            let prefix = "";
            for (const c of word) {
                // Add `c` to the distribution of chars that can come after `prefix`.
                if (!(prefix in this.ngrams)) {
                    this.ngrams[prefix] = new CharDistribution();
                }
                this.ngrams[prefix].addChar(c);
                prefix = (prefix + c).substr(-prefixSize);
            }
        }
    }
    randomWord() {
        let word = "";
        for (;;) {
            const prefix = word.substr(-prefixSize);
            const charDistribution = this.ngrams[prefix];
            if (!charDistribution) {
                // This shouldn't happen if this.ngrams is complete. If it does
                // somehow, start generating a new word.
                word = "";
                continue;
            }
            // Pick a random char from the distribution that comes after `prefix`.
            const nextChar = charDistribution.randomChar();
            if (nextChar == " ") {
                // A space marks the end of the word, so stop generating and return.
                break;
            }
            word += nextChar;
        }
        return word;
    }
}
function withWords(words, funbox) {
    if (funbox == "pseudolang") {
        if (currentWordGenerator == null || words !== currentWordGenerator.words) {
            currentWordGenerator = new WordGenerator(words);
        }
        return currentWordGenerator;
    }
    else {
        if (currentWordset == null || words !== currentWordset.words) {
            currentWordset = new Wordset(words);
        }
        return currentWordset;
    }
}
exports.withWords = withWords;


/***/ }),

/***/ "./src/scripts/ui.ts":
/*!***************************!*\
  !*** ./src/scripts/ui.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.updateKeytips = void 0;
const config_1 = __importDefault(__webpack_require__(/*! ./config */ "./src/scripts/config.ts"));
const Caret = __importStar(__webpack_require__(/*! ./test/caret */ "./src/scripts/test/caret.ts"));
const Notifications = __importStar(__webpack_require__(/*! ./elements/notifications */ "./src/scripts/elements/notifications.ts"));
const CustomText = __importStar(__webpack_require__(/*! ./test/custom-text */ "./src/scripts/test/custom-text.ts"));
const TestActive = __importStar(__webpack_require__(/*! ./states/test-active */ "./src/scripts/states/test-active.ts"));
const ConfigEvent = __importStar(__webpack_require__(/*! ./observables/config-event */ "./src/scripts/observables/config-event.ts"));
function updateKeytips() {
    if (config_1.default.swapEscAndTab) {
        $(".pageSettings .tip").html(`
    tip: You can also change all these settings quickly using the
    command line (
    <key>tab</key>
    )`);
        $("#bottom .keyTips").html(`
    <key>esc</key> - restart test<br>
      <key>tab</key> - command line`);
    }
    else {
        $(".pageSettings .tip").html(`
    tip: You can also change all these settings quickly using the
    command line (
    <key>esc</key>
    )`);
        $("#bottom .keyTips").html(`
    <key>tab</key> - restart test<br>
      <key>esc</key> or <key>ctrl/cmd</key>+<key>shift</key>+<key>p</key> - command line`);
    }
}
exports.updateKeytips = updateKeytips;
if (window.location.hostname === "localhost") {
    window.onerror = function (error) {
        Notifications.add(error.toString(), -1);
    };
    $("#top .logo .top").text("localhost");
    $("head title").text($("head title").text() + " (localhost)");
    $("body").append(`<div class="devIndicator tl">local</div><div class="devIndicator br">local</div>`);
    $(".pageSettings .discordIntegration .buttons a").attr("href", "https://discord.com/api/oauth2/authorize?client_id=798272335035498557&redirect_uri=http%3A%2F%2Flocalhost%3A5000%2Fverify&response_type=token&scope=identify");
}
//stop space scrolling
window.addEventListener("keydown", function (e) {
    if (e.code === "Space" && e.target === document.body) {
        e.preventDefault();
    }
});
window.addEventListener("beforeunload", (event) => {
    // Cancel the event as stated by the standard.
    if ((config_1.default.mode === "words" && config_1.default.words < 1000) ||
        (config_1.default.mode === "time" && config_1.default.time < 3600) ||
        config_1.default.mode === "quote" ||
        (config_1.default.mode === "custom" &&
            CustomText.isWordRandom &&
            CustomText.word < 1000) ||
        (config_1.default.mode === "custom" &&
            CustomText.isTimeRandom &&
            CustomText.time < 1000) ||
        (config_1.default.mode === "custom" &&
            !CustomText.isWordRandom &&
            CustomText.text.length < 1000)) {
        //ignore
    }
    else {
        if (TestActive.get()) {
            event.preventDefault();
            // Chrome requires returnValue to be set.
            event.returnValue = "";
        }
    }
});
$(window).on("resize", () => {
    console.log("Updating caret position");
    Caret.updatePosition();
});
ConfigEvent.subscribe((eventKey) => {
    if (eventKey === "swapEscAndTab")
        updateKeytips();
});


/***/ }),

/***/ "./src/scripts/utils/debounce.ts":
/*!***************************************!*\
  !*** ./src/scripts/utils/debounce.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.debounce = void 0;
function debounce(fn, ms = 250) {
    let timeoutId;
    return function (...args) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => fn.apply(this, args), ms);
    };
}
exports.debounce = debounce;


/***/ }),

/***/ "./src/scripts/utils/misc.ts":
/*!***********************************!*\
  !*** ./src/scripts/utils/misc.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.regexIndexOf = exports.setCharAt = exports.clearTimeouts = exports.canQuickRestart = exports.mapRange = exports.isUsernameValid = exports.cleanTypographySymbols = exports.escapeRegExp = exports.remove_non_ascii = exports.getWords = exports.toggleFullscreen = exports.objectToQueryString = exports.findGetParameter = exports.getPositionString = exports.getArrows = exports.getASCII = exports.getSpecials = exports.getNumbers = exports.secondsToString = exports.getGibberish = exports.findLineByLeastSquares = exports.roundTo2 = exports.whorf = exports.kogasa = exports.isASCIILetter = exports.capitalizeFirstLetterOfEachWord = exports.getLastChar = exports.getReleasesFromGitHub = exports.median = exports.mean = exports.stdDev = exports.smooth = exports.getChallengeList = exports.findCurrentGroup = exports.getCurrentLanguage = exports.getLanguage = exports.getLanguageGroups = exports.getLanguageList = exports.getContributorsList = exports.getSupportersList = exports.getFontsList = exports.getLayout = exports.getLayoutsList = exports.getFunbox = exports.getFunboxList = exports.getSortedThemesList = exports.getThemesList = exports.isColorDark = exports.isColorLight = exports.getuid = void 0;
exports.createErrorMessage = exports.randomElementFromObject = exports.randomElementFromArray = exports.shuffle = exports.randomIntFromRange = exports.downloadResultsCSV = exports.getMode2 = exports.swapElements = exports.convertRemToPixels = exports.trailingComposeChars = exports.convertRGBtoHEX = void 0;
const Loader = __importStar(__webpack_require__(/*! ../elements/loader */ "./src/scripts/elements/loader.ts"));
const format_1 = __importDefault(__webpack_require__(/*! date-fns/format */ "./node_modules/date-fns/esm/format/index.js"));
const firebase_1 = __webpack_require__(/*! ../firebase */ "./src/scripts/firebase.ts");
function getuid() {
    var _a;
    console.error("Only share this uid with Miodec and nobody else!");
    console.log((_a = firebase_1.Auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid);
    console.error("Only share this uid with Miodec and nobody else!");
}
exports.getuid = getuid;
function hexToHSL(hex) {
    // Convert hex to RGB first
    let r;
    let g;
    let b;
    if (hex.length == 4) {
        r = ("0x" + hex[1] + hex[1]);
        g = ("0x" + hex[2] + hex[2]);
        b = ("0x" + hex[3] + hex[3]);
    }
    else if (hex.length == 7) {
        r = ("0x" + hex[1] + hex[2]);
        g = ("0x" + hex[3] + hex[4]);
        b = ("0x" + hex[5] + hex[6]);
    }
    else {
        r = 0x00;
        g = 0x00;
        b = 0x00;
    }
    // Then to HSL
    r /= 255;
    g /= 255;
    b /= 255;
    const cmin = Math.min(r, g, b);
    const cmax = Math.max(r, g, b);
    const delta = cmax - cmin;
    let h = 0;
    let s = 0;
    let l = 0;
    if (delta == 0)
        h = 0;
    else if (cmax == r)
        h = ((g - b) / delta) % 6;
    else if (cmax == g)
        h = (b - r) / delta + 2;
    else
        h = (r - g) / delta + 4;
    h = Math.round(h * 60);
    if (h < 0)
        h += 360;
    l = (cmax + cmin) / 2;
    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
    s = +(s * 100).toFixed(1);
    l = +(l * 100).toFixed(1);
    return {
        hue: h,
        sat: s,
        lgt: l,
        string: "hsl(" + h + "," + s + "%," + l + "%)",
    };
}
function isColorLight(hex) {
    const hsl = hexToHSL(hex);
    return hsl.lgt >= 50;
}
exports.isColorLight = isColorLight;
function isColorDark(hex) {
    const hsl = hexToHSL(hex);
    return hsl.lgt < 50;
}
exports.isColorDark = isColorDark;
let themesList = [];
function getThemesList() {
    return __awaiter(this, void 0, void 0, function* () {
        if (themesList.length == 0) {
            return $.getJSON("themes/_list.json", function (data) {
                const list = data.sort(function (a, b) {
                    const nameA = a.name.toLowerCase();
                    const nameB = b.name.toLowerCase();
                    if (nameA < nameB)
                        return -1;
                    if (nameA > nameB)
                        return 1;
                    return 0;
                });
                themesList = list;
                return themesList;
            });
        }
        else {
            return themesList;
        }
    });
}
exports.getThemesList = getThemesList;
let sortedThemesList = [];
function getSortedThemesList() {
    return __awaiter(this, void 0, void 0, function* () {
        if (sortedThemesList.length === 0) {
            if (themesList.length === 0) {
                yield getThemesList();
            }
            let sorted = [...themesList];
            sorted = sorted.sort((a, b) => {
                const b1 = hexToHSL(a.bgColor);
                const b2 = hexToHSL(b.bgColor);
                return b2.lgt - b1.lgt;
            });
            sortedThemesList = sorted;
            return sortedThemesList;
        }
        else {
            return sortedThemesList;
        }
    });
}
exports.getSortedThemesList = getSortedThemesList;
let funboxList = [];
function getFunboxList() {
    return __awaiter(this, void 0, void 0, function* () {
        if (funboxList.length === 0) {
            return $.getJSON("funbox/_list.json", function (data) {
                funboxList = data.sort(function (a, b) {
                    const nameA = a.name.toLowerCase();
                    const nameB = b.name.toLowerCase();
                    if (nameA < nameB)
                        return -1;
                    if (nameA > nameB)
                        return 1;
                    return 0;
                });
                return funboxList;
            });
        }
        else {
            return funboxList;
        }
    });
}
exports.getFunboxList = getFunboxList;
function getFunbox(funbox) {
    return __awaiter(this, void 0, void 0, function* () {
        const list = yield getFunboxList();
        return list.find(function (element) {
            return element.name == funbox;
        });
    });
}
exports.getFunbox = getFunbox;
let layoutsList = {};
function getLayoutsList() {
    return __awaiter(this, void 0, void 0, function* () {
        if (Object.keys(layoutsList).length === 0) {
            return $.getJSON("layouts/_list.json", function (data) {
                layoutsList = data;
                return layoutsList;
            });
        }
        else {
            return layoutsList;
        }
    });
}
exports.getLayoutsList = getLayoutsList;
function getLayout(layoutName) {
    return __awaiter(this, void 0, void 0, function* () {
        if (Object.keys(layoutsList).length === 0) {
            yield getLayoutsList();
        }
        return layoutsList[layoutName];
    });
}
exports.getLayout = getLayout;
let fontsList = [];
function getFontsList() {
    return __awaiter(this, void 0, void 0, function* () {
        if (fontsList.length === 0) {
            return $.getJSON("fonts/_list.json", function (data) {
                fontsList = data.sort(function (a, b) {
                    const nameA = a.name.toLowerCase();
                    const nameB = b.name.toLowerCase();
                    if (nameA < nameB)
                        return -1;
                    if (nameA > nameB)
                        return 1;
                    return 0;
                });
                return fontsList;
            });
        }
        else {
            return fontsList;
        }
    });
}
exports.getFontsList = getFontsList;
let supportersList = [];
function getSupportersList() {
    return __awaiter(this, void 0, void 0, function* () {
        if (supportersList.length === 0) {
            return $.getJSON("about/supporters.json", function (data) {
                supportersList = data;
                return supportersList;
            });
        }
        else {
            return supportersList;
        }
    });
}
exports.getSupportersList = getSupportersList;
let contributorsList = [];
function getContributorsList() {
    return __awaiter(this, void 0, void 0, function* () {
        if (contributorsList.length === 0) {
            return $.getJSON("about/contributors.json", function (data) {
                contributorsList = data;
                return contributorsList;
            });
        }
        else {
            return contributorsList;
        }
    });
}
exports.getContributorsList = getContributorsList;
let languageList = [];
function getLanguageList() {
    return __awaiter(this, void 0, void 0, function* () {
        if (languageList.length === 0) {
            return $.getJSON("languages/_list.json", function (data) {
                languageList = data;
                return languageList;
            });
        }
        else {
            return languageList;
        }
    });
}
exports.getLanguageList = getLanguageList;
let languageGroupList = [];
function getLanguageGroups() {
    return __awaiter(this, void 0, void 0, function* () {
        if (languageGroupList.length === 0) {
            return $.getJSON("languages/_groups.json", function (data) {
                languageGroupList = data;
                return languageGroupList;
            });
        }
        else {
            return languageGroupList;
        }
    });
}
exports.getLanguageGroups = getLanguageGroups;
let currentLanguage;
function getLanguage(lang) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (currentLanguage == undefined || currentLanguage.name !== lang) {
                console.log("getting language json");
                yield $.getJSON(`languages/${lang}.json`, function (data) {
                    currentLanguage = data;
                });
            }
            return currentLanguage;
        }
        catch (e) {
            console.error(`error getting language`);
            console.error(e);
            yield $.getJSON(`languages/english.json`, function (data) {
                currentLanguage = data;
            });
            return currentLanguage;
        }
    });
}
exports.getLanguage = getLanguage;
function getCurrentLanguage(languageName) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield getLanguage(languageName);
    });
}
exports.getCurrentLanguage = getCurrentLanguage;
function findCurrentGroup(language) {
    return __awaiter(this, void 0, void 0, function* () {
        let retgroup;
        const groups = yield getLanguageGroups();
        groups.forEach((group) => {
            if (retgroup === undefined) {
                if (group.languages.includes(language)) {
                    retgroup = group;
                }
            }
        });
        return retgroup;
    });
}
exports.findCurrentGroup = findCurrentGroup;
let challengeList = [];
function getChallengeList() {
    return __awaiter(this, void 0, void 0, function* () {
        if (challengeList.length === 0) {
            return $.getJSON("challenges/_list.json", function (data) {
                challengeList = data;
                return challengeList;
            });
        }
        else {
            return challengeList;
        }
    });
}
exports.getChallengeList = getChallengeList;
function smooth(arr, windowSize, getter = (value) => value) {
    const get = getter;
    const result = [];
    for (let i = 0; i < arr.length; i += 1) {
        const leftOffeset = i - windowSize;
        const from = leftOffeset >= 0 ? leftOffeset : 0;
        const to = i + windowSize + 1;
        let count = 0;
        let sum = 0;
        for (let j = from; j < to && j < arr.length; j += 1) {
            sum += get(arr[j]);
            count += 1;
        }
        result[i] = sum / count;
    }
    return result;
}
exports.smooth = smooth;
function stdDev(array) {
    try {
        const n = array.length;
        const mean = array.reduce((a, b) => a + b) / n;
        return Math.sqrt(array.map((x) => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n);
    }
    catch (e) {
        return 0;
    }
}
exports.stdDev = stdDev;
function mean(array) {
    try {
        return (array.reduce((previous, current) => (current += previous)) / array.length);
    }
    catch (e) {
        return 0;
    }
}
exports.mean = mean;
//https://www.w3resource.com/javascript-exercises/fundamental/javascript-fundamental-exercise-88.php
function median(arr) {
    try {
        const mid = Math.floor(arr.length / 2), nums = [...arr].sort((a, b) => a - b);
        return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;
    }
    catch (e) {
        return 0;
    }
}
exports.median = median;
function getReleasesFromGitHub() {
    return __awaiter(this, void 0, void 0, function* () {
        return $.getJSON("https://api.github.com/repos/Miodec/monkeytype/releases", (data) => {
            $("#bottom .version .text").text(data[0].name);
            $("#bottom .version").css("opacity", 1);
            $("#versionHistory .releases").empty();
            data.forEach((release) => {
                if (!release.draft && !release.prerelease) {
                    $("#versionHistory .releases").append(`
          <div class="release">
            <div class="title">${release.name}</div>
            <div class="date">${(0, format_1.default)(new Date(release.published_at), "dd MMM yyyy")}</div>
            <div class="body">${release.body.replace(/\r\n/g, "<br>")}</div>
          </div>
        `);
                }
            });
        });
    });
}
exports.getReleasesFromGitHub = getReleasesFromGitHub;
// function getPatreonNames() {
//   let namesel = $(".pageAbout .section .supporters");
//   firebase
//     .functions()
//     .httpsCallable("getPatreons")()
//     .then((data) => {
//       let names = data.data;
//       names.forEach((name) => {
//         namesel.append(`<div>${name}</div>`);
//       });
//     });
// }
function getLastChar(word) {
    try {
        return word.charAt(word.length - 1);
    }
    catch (_a) {
        return "";
    }
}
exports.getLastChar = getLastChar;
function capitalizeFirstLetterOfEachWord(str) {
    return str
        .split(/ +/)
        .map((s) => s.charAt(0).toUpperCase() + s.slice(1))
        .join(" ");
}
exports.capitalizeFirstLetterOfEachWord = capitalizeFirstLetterOfEachWord;
function isASCIILetter(c) {
    return c.length === 1 && /[a-z]/i.test(c);
}
exports.isASCIILetter = isASCIILetter;
function kogasa(cov) {
    return (100 * (1 - Math.tanh(cov + Math.pow(cov, 3) / 3 + Math.pow(cov, 5) / 5)));
}
exports.kogasa = kogasa;
function whorf(speed, wordlen) {
    return Math.min(speed, Math.floor(speed * Math.pow(1.03, -2 * (wordlen - 3))));
}
exports.whorf = whorf;
function roundTo2(num) {
    return Math.round((num + Number.EPSILON) * 100) / 100;
}
exports.roundTo2 = roundTo2;
function findLineByLeastSquares(values_y) {
    let sum_x = 0;
    let sum_y = 0;
    let sum_xy = 0;
    let sum_xx = 0;
    let count = 0;
    /*
     * We'll use those letiables for faster read/write access.
     */
    let x = 0;
    let y = 0;
    const values_length = values_y.length;
    /*
     * Nothing to do.
     */
    if (values_length === 0) {
        return [[], []];
    }
    /*
     * Calculate the sum for each of the parts necessary.
     */
    for (let v = 0; v < values_length; v++) {
        x = v + 1;
        y = values_y[v];
        sum_x += x;
        sum_y += y;
        sum_xx += x * x;
        sum_xy += x * y;
        count++;
    }
    /*
     * Calculate m and b for the formular:
     * y = x * m + b
     */
    const m = (count * sum_xy - sum_x * sum_y) / (count * sum_xx - sum_x * sum_x);
    const b = sum_y / count - (m * sum_x) / count;
    const returnpoint1 = [1, 1 * m + b];
    const returnpoint2 = [values_length, values_length * m + b];
    return [returnpoint1, returnpoint2];
}
exports.findLineByLeastSquares = findLineByLeastSquares;
function getGibberish() {
    const randLen = randomIntFromRange(1, 7);
    let ret = "";
    for (let i = 0; i < randLen; i++) {
        ret += String.fromCharCode(97 + randomIntFromRange(0, 25));
    }
    return ret;
}
exports.getGibberish = getGibberish;
function secondsToString(sec, alwaysShowMinutes = false, alwaysShowHours = false, delimiter = ":", showSeconds = true, showDays = false) {
    sec = Math.abs(sec);
    let days = 0;
    let hours;
    if (showDays) {
        days = Math.floor(sec / 86400);
        hours = Math.floor((sec % 86400) / 3600);
    }
    else {
        hours = Math.floor(sec / 3600);
    }
    const minutes = Math.floor((sec % 3600) / 60);
    const seconds = roundTo2((sec % 3600) % 60);
    let daysString;
    let hoursString;
    let minutesString;
    let secondsString;
    if (showDays) {
        days < 10 && delimiter !== "text"
            ? (daysString = "0" + days)
            : (daysString = days);
    }
    hours < 10 && delimiter !== "text"
        ? (hoursString = "0" + hours)
        : (hoursString = hours);
    minutes < 10 && delimiter !== "text"
        ? (minutesString = "0" + minutes)
        : (minutesString = minutes);
    seconds < 10 &&
        (minutes > 0 || hours > 0 || alwaysShowMinutes) &&
        delimiter !== "text"
        ? (secondsString = "0" + seconds)
        : (secondsString = seconds);
    let ret = "";
    if (days > 0 && showDays) {
        ret += daysString;
        if (delimiter === "text") {
            if (days == 1) {
                ret += " day ";
            }
            else {
                ret += " days ";
            }
        }
        else {
            ret += delimiter;
        }
    }
    if (hours > 0 || alwaysShowHours) {
        ret += hoursString;
        if (delimiter === "text") {
            if (hours == 1) {
                ret += " hour ";
            }
            else {
                ret += " hours ";
            }
        }
        else {
            ret += delimiter;
        }
    }
    if (minutes > 0 || hours > 0 || alwaysShowMinutes) {
        ret += minutesString;
        if (delimiter === "text") {
            if (minutes == 1) {
                ret += " minute ";
            }
            else {
                ret += " minutes ";
            }
        }
        else if (showSeconds) {
            ret += delimiter;
        }
    }
    if (showSeconds) {
        ret += secondsString;
        if (delimiter === "text") {
            if (seconds == 1) {
                ret += " second";
            }
            else {
                ret += " seconds";
            }
        }
    }
    if (hours === 0 && minutes === 0 && !showSeconds && delimiter === "text") {
        ret = "less than 1 minute";
    }
    return ret.trim();
}
exports.secondsToString = secondsToString;
function getNumbers(len) {
    const randLen = randomIntFromRange(1, len);
    let ret = "";
    for (let i = 0; i < randLen; i++) {
        const randomNum = randomIntFromRange(0, 9);
        ret += randomNum.toString();
    }
    return ret;
}
exports.getNumbers = getNumbers;
function getSpecials() {
    const randLen = randomIntFromRange(1, 7);
    let ret = "";
    const specials = [
        "!",
        "@",
        "#",
        "$",
        "%",
        "^",
        "&",
        "*",
        "(",
        ")",
        "-",
        "_",
        "=",
        "+",
        "{",
        "}",
        "[",
        "]",
        "'",
        '"',
        "/",
        "\\",
        "|",
    ];
    for (let i = 0; i < randLen; i++) {
        ret += randomElementFromArray(specials);
    }
    return ret;
}
exports.getSpecials = getSpecials;
function getASCII() {
    const randLen = randomIntFromRange(1, 10);
    let ret = "";
    for (let i = 0; i < randLen; i++) {
        let ran = 33 + randomIntFromRange(0, 93);
        while (ran == 96 || ran == 94)
            ran = 33 + randomIntFromRange(0, 93); //todo remove when input rewrite is fixed
        ret += String.fromCharCode(ran);
    }
    return ret;
}
exports.getASCII = getASCII;
function getArrows() {
    const arrowArray = ["←", "↑", "→", "↓"];
    let arrowWord = "";
    let lastchar;
    for (let i = 0; i < 5; i++) {
        let random = randomElementFromArray(arrowArray);
        while (random === lastchar) {
            random = randomElementFromArray(arrowArray);
        }
        lastchar = random;
        arrowWord += random;
    }
    return arrowWord;
}
exports.getArrows = getArrows;
function getPositionString(number) {
    let numend = "th";
    const t = number % 10;
    const h = number % 100;
    if (t == 1 && h != 11) {
        numend = "st";
    }
    if (t == 2 && h != 12) {
        numend = "nd";
    }
    if (t == 3 && h != 13) {
        numend = "rd";
    }
    return number + numend;
}
exports.getPositionString = getPositionString;
function findGetParameter(parameterName) {
    let result = null;
    let tmp = [];
    location.search
        .substr(1)
        .split("&")
        .forEach(function (item) {
        tmp = item.split("=");
        if (tmp[0] === parameterName)
            result = decodeURIComponent(tmp[1]);
    });
    return result;
}
exports.findGetParameter = findGetParameter;
function objectToQueryString(obj) {
    const str = [];
    for (const p in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, p)) {
            // Arrays get encoded as a comma(%2C)-separated list
            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
        }
    }
    return str.join("&");
}
exports.objectToQueryString = objectToQueryString;
function toggleFullscreen() {
    const elem = document.documentElement;
    if (!document.fullscreenElement &&
        !document.mozFullScreenElement &&
        !document.webkitFullscreenElement &&
        !document.msFullscreenElement) {
        if (elem.requestFullscreen) {
            elem.requestFullscreen();
        }
        else if (elem.msRequestFullscreen) {
            elem.msRequestFullscreen();
        }
        else if (elem.mozRequestFullScreen) {
            elem.mozRequestFullScreen();
        }
        else if (elem.webkitRequestFullscreen) {
            // @ts-ignore
            elem.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        }
    }
    else {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        }
        else if (document.msExitFullscreen) {
            document.msExitFullscreen();
        }
        else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen();
        }
        else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
        }
    }
}
exports.toggleFullscreen = toggleFullscreen;
function getWords() {
    const words = [...document.querySelectorAll("#words .word")]
        .map((word) => {
        return [...word.querySelectorAll("letter")]
            .map((letter) => letter.textContent)
            .join("");
    })
        .join(" ");
    return words;
}
exports.getWords = getWords;
//credit: https://www.w3resource.com/javascript-exercises/javascript-string-exercise-32.php
function remove_non_ascii(str) {
    if (str === null || str === "")
        return "";
    else
        str = str.toString();
    return str.replace(/[^\x20-\x7E]/g, "");
}
exports.remove_non_ascii = remove_non_ascii;
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
exports.escapeRegExp = escapeRegExp;
function cleanTypographySymbols(textToClean) {
    const specials = {
        "“": '"',
        "”": '"',
        "’": "'",
        "‘": "'",
        ",": ",",
        "—": "-",
        "…": "...",
        "«": "<<",
        "»": ">>",
        "–": "-",
        " ": " ",
        " ": " ",
        " ": " ",
    };
    return textToClean.replace(/[“”’‘—,…«»–\u2007\u202F\u00A0]/g, (char) => specials[char] || "");
}
exports.cleanTypographySymbols = cleanTypographySymbols;
function isUsernameValid(name) {
    if (name === null || name === undefined || name === "")
        return false;
    if (/miodec/.test(name.toLowerCase()))
        return false;
    if (/bitly/.test(name.toLowerCase()))
        return false;
    if (name.length > 14)
        return false;
    if (/^\..*/.test(name.toLowerCase()))
        return false;
    return /^[0-9a-zA-Z_.-]+$/.test(name);
}
exports.isUsernameValid = isUsernameValid;
function mapRange(x, in_min, in_max, out_min, out_max) {
    let num = ((x - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min;
    if (out_min > out_max) {
        if (num > out_min) {
            num = out_min;
        }
        else if (num < out_max) {
            num = out_max;
        }
    }
    else {
        if (num < out_min) {
            num = out_min;
        }
        else if (num > out_max) {
            num = out_max;
        }
    }
    return num;
}
exports.mapRange = mapRange;
function canQuickRestart(mode, words, time, CustomText) {
    if ((mode === "words" && words < 1000) ||
        (mode === "time" && time < 3600) ||
        mode === "quote" ||
        (mode === "custom" && CustomText.isWordRandom && CustomText.word < 1000) ||
        (mode === "custom" && CustomText.isTimeRandom && CustomText.time < 3600) ||
        (mode === "custom" &&
            !CustomText.isWordRandom &&
            CustomText.text.length < 1000)) {
        return true;
    }
    else {
        return false;
    }
}
exports.canQuickRestart = canQuickRestart;
function clearTimeouts(timeouts) {
    timeouts.forEach((to) => {
        if (typeof to === "number")
            clearTimeout(to);
        else
            clearTimeout(to);
    });
}
exports.clearTimeouts = clearTimeouts;
//https://stackoverflow.com/questions/1431094/how-do-i-replace-a-character-at-a-particular-index-in-javascript
function setCharAt(str, index, chr) {
    if (index > str.length - 1)
        return str;
    return str.substring(0, index) + chr + str.substring(index + 1);
}
exports.setCharAt = setCharAt;
//https://stackoverflow.com/questions/273789/is-there-a-version-of-javascripts-string-indexof-that-allows-for-regular-expr
function regexIndexOf(string, regex, startpos) {
    const indexOf = string.substring(startpos || 0).search(regex);
    return indexOf >= 0 ? indexOf + (startpos || 0) : indexOf;
}
exports.regexIndexOf = regexIndexOf;
function convertRGBtoHEX(rgb) {
    const match = rgb.match(/^rgb\((\d+), \s*(\d+), \s*(\d+)\)$/);
    if (match === null)
        return;
    if (match.length < 3)
        return;
    function hexCode(i) {
        // Take the last 2 characters and convert
        // them to Hexadecimal.
        return ("0" + parseInt(i).toString(16)).slice(-2);
    }
    return "#" + hexCode(match[1]) + hexCode(match[2]) + hexCode(match[3]);
}
exports.convertRGBtoHEX = convertRGBtoHEX;
String.prototype.lastIndexOfRegex = function (regex) {
    const match = this.match(regex);
    return match ? this.lastIndexOf(match[match.length - 1]) : -1;
};
exports.trailingComposeChars = /[\u02B0-\u02FF`´^¨~]+$|⎄.*$/;
//https://stackoverflow.com/questions/36532307/rem-px-in-javascript
function convertRemToPixels(rem) {
    return rem * parseFloat(getComputedStyle(document.documentElement).fontSize);
}
exports.convertRemToPixels = convertRemToPixels;
function swapElements(el1, el2, totalDuration, callback = function () {
    return;
}, middleCallback = function () {
    return;
}) {
    if ((el1.hasClass("hidden") && !el2.hasClass("hidden")) ||
        (!el1.hasClass("hidden") && el2.hasClass("hidden"))) {
        //one of them is hidden and the other is visible
        if (el1.hasClass("hidden")) {
            callback();
            return false;
        }
        $(el1)
            .removeClass("hidden")
            .css("opacity", 1)
            .animate({
            opacity: 0,
        }, totalDuration / 2, () => {
            middleCallback();
            $(el1).addClass("hidden");
            $(el2)
                .removeClass("hidden")
                .css("opacity", 0)
                .animate({
                opacity: 1,
            }, totalDuration / 2, () => {
                callback();
            });
        });
    }
    else if (el1.hasClass("hidden") && el2.hasClass("hidden")) {
        //both are hidden, only fade in the second
        $(el2)
            .removeClass("hidden")
            .css("opacity", 0)
            .animate({
            opacity: 1,
        }, totalDuration, () => {
            callback();
        });
    }
    else {
        callback();
    }
    return;
}
exports.swapElements = swapElements;
function getMode2(config, randomQuote) {
    const mode = config.mode;
    if (mode === "time") {
        return config.time.toString();
    }
    else if (mode === "words") {
        return config.words.toString();
    }
    else if (mode === "custom") {
        return "custom";
    }
    else if (mode === "zen") {
        return "zen";
    }
    else if (mode === "quote") {
        return randomQuote.id.toString();
    }
    return "";
}
exports.getMode2 = getMode2;
function downloadResultsCSV(array) {
    return __awaiter(this, void 0, void 0, function* () {
        Loader.show();
        const csvString = [
            [
                "_id",
                "isPb",
                "wpm",
                "acc",
                "rawWpm",
                "consistency",
                "charStats",
                "mode",
                "mode2",
                "quoteLength",
                "restartCount",
                "testDuration",
                "afkDuration",
                "incompleteTestSeconds",
                "punctuation",
                "numbers",
                "language",
                "funbox",
                "difficulty",
                "lazyMode",
                "blindMode",
                "bailedOut",
                "tags",
                "timestamp",
            ],
            ...array.map((item) => [
                item._id,
                item.isPb,
                item.wpm,
                item.acc,
                item.rawWpm,
                item.consistency,
                item.charStats.join(","),
                item.mode,
                item.mode2,
                item.quoteLength,
                item.restartCount,
                item.testDuration,
                item.afkDuration,
                item.incompleteTestSeconds,
                item.punctuation,
                item.numbers,
                item.language,
                item.funbox,
                item.difficulty,
                item.lazyMode,
                item.blindMode,
                item.bailedOut,
                item.tags.join(","),
                item.timestamp,
            ]),
        ]
            .map((e) => e.join("|"))
            .join("\n");
        const blob = new Blob([csvString], { type: "text/csv" });
        const href = window.URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.setAttribute("href", href);
        link.setAttribute("download", "results.csv");
        document.body.appendChild(link); // Required for FF
        link.click();
        link.remove();
        Loader.hide();
    });
}
exports.downloadResultsCSV = downloadResultsCSV;
/**
 * Gets an integer between min and max, both are inclusive.
 * @param min
 * @param max
 * @returns Random integer betwen min and max.
 */
function randomIntFromRange(min, max) {
    const minNorm = Math.ceil(min);
    const maxNorm = Math.floor(max);
    return Math.floor(Math.random() * (maxNorm - minNorm + 1) + minNorm);
}
exports.randomIntFromRange = randomIntFromRange;
/**
 * Shuffle an array of elements using the Fisher–Yates algorithm.
 * This function mutates the input array.
 * @param elements
 */
function shuffle(elements) {
    for (let i = elements.length - 1; i > 0; --i) {
        const j = randomIntFromRange(0, i);
        const temp = elements[j];
        elements[j] = elements[i];
        elements[i] = temp;
    }
}
exports.shuffle = shuffle;
function randomElementFromArray(array) {
    return array[randomIntFromRange(0, array.length - 1)];
}
exports.randomElementFromArray = randomElementFromArray;
function randomElementFromObject(object) {
    return randomElementFromArray(Object.values(object));
}
exports.randomElementFromObject = randomElementFromObject;
function createErrorMessage(error, message) {
    if (error instanceof Error)
        return `${message}: ${error.message}`;
    return `${message}`;
}
exports.createErrorMessage = createErrorMessage;


/***/ }),

/***/ "./src/scripts/utils/search-service.ts":
/*!*********************************************!*\
  !*** ./src/scripts/utils/search-service.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.buildSearchService = void 0;
const stemmer_1 = __webpack_require__(/*! stemmer */ "./node_modules/stemmer/index.js");
const damerau_levenshtein_1 = __importDefault(__webpack_require__(/*! damerau-levenshtein */ "./node_modules/damerau-levenshtein/index.js"));
const DEFAULT_OPTIONS = {
    fuzzyMatchSensitivity: 0.2,
    scoreForSimilarMatch: 0.5,
    scoreForExactMatch: 1, // When ranking results, the score a match gets for having an exact match with a token in the search query.
};
function inverseDocumentFrequency(numberOfDocuments, numberOfDocumentsWithTerm) {
    if (numberOfDocumentsWithTerm === 0) {
        return 0;
    }
    return Math.log10(numberOfDocuments / numberOfDocumentsWithTerm);
}
function tokenize(text) {
    return text.match(/[^\\\][.,"/#!?$%^&*;:{}=\-_`~()\s]+/g) || [];
}
const buildSearchService = (documents, getSearchableText, options = DEFAULT_OPTIONS) => {
    const reverseIndex = {};
    const normalizedTokenToOriginal = {};
    documents.forEach((document, documentIndex) => {
        const rawTokens = tokenize(getSearchableText(document));
        const internalDocument = {
            id: documentIndex,
        };
        rawTokens.forEach((token) => {
            const stemmedToken = (0, stemmer_1.stemmer)(token);
            if (!(stemmedToken in normalizedTokenToOriginal)) {
                normalizedTokenToOriginal[stemmedToken] = new Set();
            }
            normalizedTokenToOriginal[stemmedToken].add(token);
            if (!(stemmedToken in reverseIndex)) {
                reverseIndex[stemmedToken] = new Set();
            }
            reverseIndex[stemmedToken].add(internalDocument);
        });
    });
    const tokenSet = Object.keys(reverseIndex);
    const query = (searchQuery) => {
        const searchResult = {
            results: [],
            matchedQueryTerms: [],
        };
        const normalizedSearchQuery = new Set(tokenize(searchQuery).map((token) => (0, stemmer_1.stemmer)(token)));
        if (normalizedSearchQuery.size === 0) {
            return searchResult;
        }
        const results = new Map();
        const matchedTokens = new Set();
        normalizedSearchQuery.forEach((searchToken) => {
            tokenSet.forEach((token) => {
                const { similarity } = (0, damerau_levenshtein_1.default)(searchToken, token);
                const matchesSearchToken = token === searchToken;
                const isSimilar = similarity >= 1 - options.fuzzyMatchSensitivity;
                if (matchesSearchToken || isSimilar) {
                    const documentMatches = reverseIndex[token];
                    const idf = inverseDocumentFrequency(documents.length, documentMatches.size);
                    documentMatches.forEach((document) => {
                        var _a;
                        const currentScore = (_a = results.get(document.id)) !== null && _a !== void 0 ? _a : 0;
                        const scoreForExactMatch = matchesSearchToken
                            ? options.scoreForExactMatch
                            : 0;
                        const scoreForSimilarity = isSimilar
                            ? options.scoreForSimilarMatch
                            : 0;
                        const score = scoreForExactMatch + scoreForSimilarity;
                        const scoreForToken = score * idf;
                        results.set(document.id, currentScore + scoreForToken);
                    });
                    normalizedTokenToOriginal[token].forEach((originalToken) => {
                        matchedTokens.add(originalToken);
                    });
                }
            });
        });
        const orderedResults = [...results]
            .sort((match1, match2) => {
            return match2[1] - match1[1];
        })
            .map((match) => documents[match[0]]);
        searchResult.results = orderedResults;
        searchResult.matchedQueryTerms = [...matchedTokens];
        return searchResult;
    };
    return {
        query,
    };
};
exports.buildSearchService = buildSearchService;


/***/ }),

/***/ "./src/scripts/utils/strings.ts":
/*!**************************************!*\
  !*** ./src/scripts/utils/strings.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.splitByAndKeep = void 0;
/**
 *
 * @param text String to split
 * @param delimiters Single character delimiters.
 */
function splitByAndKeep(text, delimiters) {
    const splitString = [];
    let currentToken = [];
    const delimiterSet = new Set(delimiters);
    for (const char of text) {
        if (delimiterSet.has(char)) {
            if (currentToken.length > 0) {
                splitString.push(currentToken.join(""));
            }
            splitString.push(char);
            currentToken = [];
        }
        else {
            currentToken.push(char);
        }
    }
    if (currentToken.length > 0) {
        splitString.push(currentToken.join(""));
    }
    return splitString;
}
exports.splitByAndKeep = splitByAndKeep;


/***/ }),

/***/ "./src/scripts/utils/url-handler.ts":
/*!******************************************!*\
  !*** ./src/scripts/utils/url-handler.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadCustomThemeFromUrl = void 0;
const Misc = __importStar(__webpack_require__(/*! ./misc */ "./src/scripts/utils/misc.ts"));
const config_1 = __importStar(__webpack_require__(/*! ../config */ "./src/scripts/config.ts")), UpdateConfig = config_1;
const Notifications = __importStar(__webpack_require__(/*! ../elements/notifications */ "./src/scripts/elements/notifications.ts"));
function loadCustomThemeFromUrl() {
    var _a;
    const getValue = Misc.findGetParameter("customTheme");
    if (getValue === null)
        return;
    const urlEncoded = getValue.split(",");
    let base64decoded = null;
    try {
        base64decoded = JSON.parse((_a = atob(getValue)) !== null && _a !== void 0 ? _a : "");
    }
    catch (e) {
        //
    }
    let colorArray = [];
    if (Array.isArray(urlEncoded) && urlEncoded.length === 9) {
        colorArray = urlEncoded;
    }
    else if (Array.isArray(base64decoded) && base64decoded.length === 9) {
        colorArray = base64decoded;
    }
    if (colorArray.length === 0) {
        return Notifications.add("Invalid custom theme ", 0);
    }
    const oldCustomTheme = config_1.default.customTheme;
    const oldCustomThemeColors = config_1.default.customThemeColors;
    try {
        UpdateConfig.setCustomThemeColors(colorArray);
        Notifications.add("Custom theme applied", 1);
        if (!config_1.default.customTheme)
            UpdateConfig.setCustomTheme(true);
    }
    catch (e) {
        Notifications.add("Something went wrong. Reverting to previous state.", 0);
        console.error(e);
        UpdateConfig.setCustomTheme(oldCustomTheme);
        UpdateConfig.setCustomThemeColors(oldCustomThemeColors);
    }
}
exports.loadCustomThemeFromUrl = loadCustomThemeFromUrl;


/***/ }),

/***/ "./src/scripts/version.ts":
/*!********************************!*\
  !*** ./src/scripts/version.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CLIENT_VERSION = void 0;
exports.CLIENT_VERSION = "DEVELOPMENT-CLIENT";
$(document.body).on("click", ".version", (e) => {
    if (e.shiftKey) {
        alert(exports.CLIENT_VERSION);
    }
});


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"monkeytype": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkmonkeytype_frontend"] = self["webpackChunkmonkeytype_frontend"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["vendor"], () => (__webpack_require__("./src/scripts/index.ts")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,